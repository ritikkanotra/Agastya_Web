%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1604.m00.i125.n014.S.c12.400488715 Medical team. Hospital staff vector illustration.eps
%%Creator: Adobe Illustrator(R) 17.0
%%For: Anton
%%CreationDate: 4/21/2016
%%BoundingBox: 0 0 525 350
%%HiResBoundingBox: 0 0 525 350
%%CropBox: 0 0 525 350
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.0.0 x256 R agm 4.7700 ct 5.3328%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">2</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2016-04-21T12:51:59+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-04-21T12:51:59+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-04-21T12:51:59+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>172</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgArAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYqsmnghXlNIsanYM7BR+OEBjKcY7k06GeCZeUMiyKNiyMGH4YkLGcZb&#xA;g2vwMnYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUv1nX9I0W3WfUrhYEc0jW&#xA;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&#xA;irsVdirsVdirsVdirsVdir//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:4b39da7e-b052-764c-9914-123a5ecb1e9e</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:4b39da7e-b052-764c-9914-123a5ecb1e9e</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:3cf51289-8dce-1b48-a213-d3047f19cfb5</stRef:instanceID>
            <stRef:documentID>xmp.did:3cf51289-8dce-1b48-a213-d3047f19cfb5</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4239c0b2-9560-5644-9c1b-2d4eaefa5ca4</stEvt:instanceID>
                  <stEvt:when>2015-03-29T08:26:58+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a613b13b-ad44-5047-9dbf-0017b945326e</stEvt:instanceID>
                  <stEvt:when>2016-03-03T19:26:51+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:baa8e3d8-32e8-264e-85e2-479b96a27290</stEvt:instanceID>
                  <stEvt:when>2016-03-06T20:07:54+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4b39da7e-b052-764c-9914-123a5ecb1e9e</stEvt:instanceID>
                  <stEvt:when>2016-04-21T12:51:59+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>525.000000</stDim:w>
            <stDim:h>350.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Белый</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Черный</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -350 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 350 li
525 350 li
525 0 li
cp
clp
525 350 mo
0 350 li
0 0 li
525 0 li
525 350 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
46.6215 305.465 mo
32.3605 305.465 20.7998 302.912 20.7998 299.764 cv
20.7998 296.723 31.583 294.238 45.1683 294.072 cv
45.5331 294.225 li
45.534 294.068 li
45.8951 294.065 46.2568 294.063 46.6215 294.063 cv
47.1525 294.063 47.6791 294.066 48.2021 294.073 cv
48.1993 294.367 li
48.6358 294.08 li
61.955 294.307 72.4433 296.765 72.4433 299.764 cv
72.4433 302.912 60.8824 305.465 46.6215 305.465 cv
.698039 .698039 .698039 rgb
f
51.0586 106.292 mo
53.2424 106.292 55.0126 104.522 55.0126 102.338 cv
55.0126 102.216 55.0063 102.096 54.9955 101.977 cv
55.5117 102.56 56.2635 102.929 57.1033 102.929 cv
58.6596 102.929 59.9212 101.667 59.9212 100.111 cv
59.92 100.086 li
60.5171 100.448 61.2174 100.656 61.9665 100.656 cv
64.1503 100.656 65.9206 98.8861 65.9206 96.7023 cv
65.9206 95.7082 65.5529 94.8004 64.9472 94.1057 cv
66.4485 94.0438 67.6477 92.8104 67.6477 91.2937 cv
67.6477 91.1326 67.6311 90.9757 67.6051 90.8221 cv
68.995 90.2089 69.9657 88.8199 69.9657 87.2032 cv
69.9657 86.1636 69.5638 85.2182 68.9077 84.5123 cv
69.9445 83.9394 70.6474 82.8359 70.6474 81.5674 cv
70.6474 80.3237 69.9704 79.2402 68.9666 78.6584 cv
69.6685 77.9447 70.102 76.9662 70.102 75.8863 cv
70.102 74.1799 69.0213 72.7262 67.5071 72.1719 cv
67.5974 71.8959 67.6477 71.6019 67.6477 71.2958 cv
67.6477 69.7791 66.4485 68.5458 64.9472 68.4838 cv
65.5529 67.7891 65.9206 66.8813 65.9206 65.8872 cv
65.9206 63.7034 64.1503 61.9331 61.9665 61.9331 cv
61.2174 61.9331 60.5171 62.1415 59.92 62.5033 cv
59.9212 62.4785 li
59.9212 60.9223 58.6596 59.6607 57.1033 59.6607 cv
56.2635 59.6607 55.5117 60.03 54.9955 60.6129 cv
55.0063 60.4938 55.0126 60.3734 55.0126 60.2514 cv
55.0126 58.0676 53.2424 56.2973 51.0584 56.2973 cv
49.373 56.2973 47.9348 57.3524 47.3657 58.8377 cv
46.8615 58.0743 45.997 57.5699 45.0137 57.5699 cv
43.8754 57.5699 42.8971 58.2462 42.4525 59.2178 cv
41.7346 58.2202 40.5644 57.5699 39.2416 57.5699 cv
37.0578 57.5699 35.2874 59.3403 35.2874 61.5241 cv
35.2886 61.5741 li
34.9771 61.4556 34.6407 61.3878 34.2875 61.3878 cv
32.7312 61.3878 31.4696 62.6494 31.4696 64.2056 cv
31.4696 64.3255 31.4796 64.4428 31.494 64.5587 cv
31.2366 64.506 30.97 64.4783 30.6969 64.4783 cv
28.5131 64.4783 26.7428 66.2486 26.7428 68.4325 cv
26.7428 69.0757 26.8975 69.6825 27.1699 70.2194 cv
25.9806 70.5496 25.1066 71.6375 25.1066 72.932 cv
25.1066 73.8662 25.5632 74.6917 26.2632 75.2044 cv
24.9685 75.4101 23.4749 77.1928 24.1924 79.1586 cv
23.8419 79.6283 23.6319 80.2091 23.6319 80.8402 cv
23.6319 81.7472 24.062 82.5519 24.7276 83.0673 cv
23.3304 83.0673 22.6559 87.4759 26.1416 87.4759 cv
25.5101 87.9927 25.1066 88.7778 25.1066 89.6575 cv
25.1066 90.952 25.9806 92.0399 27.1699 92.3701 cv
26.8975 92.907 26.7428 93.5138 26.7428 94.157 cv
26.7428 96.3409 28.5131 98.1112 30.6969 98.1112 cv
30.97 98.1112 31.2366 98.0835 31.494 98.0308 cv
31.4796 98.1467 31.4696 98.264 31.4696 98.3839 cv
31.4696 99.9402 32.7312 101.202 34.2875 101.202 cv
34.6407 101.202 34.9771 101.134 35.2886 101.015 cv
35.2874 101.065 li
35.2874 103.249 37.0578 105.02 39.2416 105.02 cv
40.5644 105.02 41.7346 104.369 42.4525 103.372 cv
42.8971 104.343 43.8754 105.02 45.0137 105.02 cv
45.997 105.02 46.8615 104.515 47.3657 103.752 cv
47.9348 105.237 49.373 106.292 51.0586 106.292 cv
.301961 .00392157 0 rgb
f
47.2203 66.3765 mo
38.5023 66.3765 31.4349 72.645 31.4349 82.8889 cv
31.4349 95.6649 35.3459 102.025 39.7062 104.991 cv
40.8359 104.859 41.8201 104.251 42.4525 103.372 cv
42.8971 104.343 43.8754 105.02 45.0137 105.02 cv
45.997 105.02 46.8615 104.515 47.3657 103.752 cv
47.9348 105.237 49.373 106.292 51.0586 106.292 cv
53.2422 106.292 55.0127 104.522 55.0127 102.338 cv
55.0127 102.216 55.0063 102.096 54.9955 101.977 cv
55.5117 102.56 56.2635 102.929 57.1033 102.929 cv
57.1287 102.926 li
60.4294 99.3932 63.0059 93.2557 63.0059 82.8889 cv
63.0059 72.645 55.9385 66.3765 47.2203 66.3765 cv
.239216 0 0 rgb
f
68.6045 112.529 mo
67.818 111.661 66.9097 110.965 65.939 110.551 cv
53.1656 105.157 li
53.1656 84.3836 li
41.1769 84.3836 li
41.1769 105.157 li
28.4035 110.551 li
27.4328 110.965 26.5245 111.661 25.738 112.529 cv
68.6045 112.529 li
.635294 .341176 .258824 rgb
f
41.1769 101.215 mo
43.409 103.882 46.0956 104.659 48.1043 104.659 cv
49.5758 104.659 51.4113 104.24 53.1656 102.97 cv
53.1656 84.3838 li
41.1769 84.3838 li
41.1769 101.215 li
.537255 .239216 .188235 rgb
f
59.5904 83.0239 mo
59.5904 99.339 51.8395 102.602 47.2686 102.602 cv
42.6975 102.602 34.9466 99.339 34.9466 83.0239 cv
34.9466 74.8144 40.4633 69.7906 47.2686 69.7906 cv
54.0737 69.7906 59.5904 74.8144 59.5904 83.0239 cv
.678431 .364706 .294118 rgb
f
56.1454 88.2731 mo
55.6746 88.2731 50.99 88.2639 50.4335 88.2639 cv
49.8772 88.2639 46.9032 83.1211 50.36 83.1211 cv
50.9592 83.1211 56.8615 83.1211 56.8615 83.1211 cv
58.1035 83.1211 56.6161 88.2731 56.1454 88.2731 cv
44.1364 88.2639 mo
43.5799 88.2639 38.8953 88.2731 38.4245 88.2731 cv
37.9537 88.2731 36.4663 83.1211 37.7083 83.1211 cv
37.7083 83.1211 43.6107 83.1211 44.2098 83.1211 cv
47.6667 83.1211 44.6927 88.2639 44.1364 88.2639 cv
57.9754 82.8748 mo
57.914 82.6513 57.7877 82.5087 57.5565 82.5087 cv
57.5565 82.5087 50.5619 82.5087 49.8087 82.5087 cv
49.1546 82.5087 48.1643 82.9672 47.285 82.9672 cv
46.4057 82.9672 45.4153 82.5087 44.7612 82.5087 cv
44.008 82.5087 37.0134 82.5087 37.0134 82.5087 cv
36.7822 82.5087 36.6559 82.6513 36.5945 82.8748 cv
34.4489 82.8748 li
34.4489 83.6311 li
36.5858 83.6311 li
36.835 85.3633 37.6894 88.4966 38.1181 88.4966 cv
44.1156 88.4966 li
44.8151 88.4966 45.8373 86.9824 46.214 86.0189 cv
46.4469 85.4227 46.9328 85.1631 47.285 85.1631 cv
47.6372 85.1631 48.123 85.4227 48.3559 86.0189 cv
48.7325 86.9824 49.7548 88.4966 50.4543 88.4966 cv
56.4517 88.4966 li
56.8804 88.4966 57.7349 85.3633 57.984 83.6311 cv
60.1209 83.6311 li
60.1209 82.8748 li
57.9754 82.8748 li
0 .243137 .301961 rgb
f
38.4245 88.2731 mo
38.0861 88.2731 37.2226 85.6116 37.2248 84.1145 cv
37.2256 83.5287 37.359 83.1211 37.7083 83.1211 cv
37.7083 83.1211 43.6107 83.1211 44.2098 83.1211 cv
45.4386 83.1211 45.8548 83.771 45.8559 84.6087 cv
45.8578 86.1275 44.4949 88.2639 44.1364 88.2639 cv
43.5799 88.2639 38.8953 88.2731 38.4245 88.2731 cv
.74902 .533333 .470588 rgb
f
56.1454 88.2731 mo
55.6746 88.2731 50.99 88.2639 50.4335 88.2639 cv
50.0755 88.2639 48.7161 86.134 48.7139 84.6156 cv
48.7127 83.7746 49.1279 83.1211 50.36 83.1211 cv
50.9592 83.1211 56.8615 83.1211 56.8615 83.1211 cv
57.2108 83.1211 57.3442 83.5287 57.3451 84.1145 cv
57.3473 85.6116 56.4837 88.2731 56.1454 88.2731 cv
f
47.2685 69.7907 mo
40.4634 69.7907 34.9467 74.8144 34.9467 83.0239 cv
34.9467 83.5291 34.9543 84.0215 34.9688 84.502 cv
35.1127 84.2249 35.2292 83.9295 35.2846 83.6052 cv
35.3417 83.2707 35.3407 82.9402 35.2926 82.622 cv
36.4301 82.4056 37.3832 81.5605 37.6983 80.4013 cv
37.8642 80.4384 li
39.2784 80.6798 40.6481 80.2276 41.6335 79.3324 cv
42.0801 79.8157 42.6814 80.163 43.3802 80.2824 cv
44.2312 80.4277 45.0596 80.2094 45.7085 79.7415 cv
46.3259 80.7566 47.3599 81.5109 48.623 81.7266 cv
49.9269 81.9492 51.1932 81.5525 52.1213 80.7499 cv
52.5744 81.4557 53.3084 81.9777 54.2004 82.13 cv
54.9322 82.2549 55.6475 82.1112 56.2464 81.771 cv
56.7828 83.0866 57.9619 84.1055 59.4654 84.3622 cv
59.515 84.3681 li
59.5158 84.5219 59.5307 84.673 59.5537 84.822 cv
59.5755 84.2391 59.5904 83.6441 59.5904 83.0239 cv
59.5904 74.8144 54.0737 69.7907 47.2685 69.7907 cv
cp
.239216 0 0 rgb
f
66.9174 84.4385 mo
66.2172 76.4343 59.8979 64.8012 52.7689 63.5839 cv
47.8384 62.7421 42.0768 62.4081 37.8001 65.4651 cv
33.3987 68.6112 32.9161 71.7732 31.5062 76.6158 cv
31.1666 77.7824 31.3281 78.1813 30.8161 79.1742 cv
30.3854 80.0096 29.3912 80.1693 29.1885 81.3596 cv
28.902 83.0424 30.0334 84.6391 31.7163 84.9265 cv
33.3996 85.2139 34.9972 84.0823 35.2846 82.399 cv
35.3417 82.0645 35.3407 81.734 35.2925 81.4159 cv
36.4301 81.1995 37.3833 80.3544 37.6983 79.1952 cv
37.8642 79.2322 li
39.2784 79.4737 40.6481 79.0215 41.6335 78.1262 cv
42.0801 78.6096 42.6814 78.9569 43.3802 79.0762 cv
44.2312 79.2215 45.0596 79.0033 45.7085 78.5354 cv
46.3259 79.5505 47.3599 80.3047 48.623 80.5204 cv
49.9269 80.7431 51.1932 80.3463 52.1213 79.5437 cv
52.5744 80.2495 53.3084 80.7715 54.2003 80.9238 cv
54.9322 81.0488 55.6475 80.905 56.2464 80.5648 cv
56.7828 81.8804 57.9619 82.8993 59.4654 83.156 cv
59.515 83.162 li
59.5207 84.2672 60.1196 85.2723 61.0535 85.8148 cv
60.9025 86.0989 60.7918 86.4103 60.7347 86.7448 cv
60.4473 88.4281 61.5789 90.0258 63.2622 90.3132 cv
64.9455 90.6006 66.5431 89.4691 66.8314 87.7807 cv
67.0005 86.7828 67.0235 85.6524 66.9174 84.4385 cv
cp
.301961 .00392157 0 rgb
f
47.7177 53.4449 mo
41.6085 53.4449 36.0702 55.8769 32.0076 59.8206 cv
35.8573 73.3998 li
37.5552 70.2603 42.2176 68.0015 47.7177 68.0015 cv
52.9677 68.0015 57.4596 70.0581 59.3344 72.9754 cv
63.1413 59.5475 li
59.1065 55.7652 53.6845 53.4449 47.7177 53.4449 cv
cp
.866667 .866667 .866667 rgb
f
51.4208 60.1238 mo
48.5796 60.1238 li
48.5796 57.2825 li
46.8557 57.2825 li
46.8557 60.1238 li
44.0145 60.1238 li
44.0145 61.8476 li
46.8557 61.8476 li
46.8557 64.6888 li
48.5796 64.6888 li
48.5796 61.8476 li
51.4208 61.8476 li
51.4208 60.1238 li
cp
.0862745 .768627 .701961 rgb
f
46.7093 55.0251 mo
44.1386 54.7224 35.836 56.8004 33.4332 60.3231 cv
33.4332 60.3231 33.7694 62.7221 34.8849 65.2878 cv
39.6493 61.2707 46.7093 55.0251 46.7093 55.0251 cv
cp
.956863 .956863 .956863 rgb
f
41.8951 72.0641 mo
40.3345 73.8961 48.5362 75.5217 53.4128 75.965 cv
57.322 76.3204 60.6725 76.5583 57.8895 73.1995 cv
52.8955 67.1723 43.3631 70.3406 41.8951 72.0641 cv
cp
.356863 .0352941 .0352941 rgb
f
32.2659 167.816 mo
46.7762 173.627 li
60.9713 168.526 li
60.9713 168.526 64.738 179.51 64.738 190.464 cv
64.738 195.938 59.2348 239.421 59.2348 239.753 cv
52.616 291.459 li
48.1993 294.367 li
48.4872 263.676 li
48.6923 232.782 li
48.6923 232.782 48.1481 206.601 48.4017 199.762 cv
48.4848 197.524 49.1601 190.835 49.1601 190.835 cv
47.6429 190.789 li
44.8898 190.778 li
44.8898 190.778 45.6341 197.393 45.7259 199.609 cv
46.0096 206.456 45.409 232.667 45.409 232.667 cv
45.7259 263.368 li
45.5331 294.225 li
41.1336 292.379 li
34.68 240.522 li
34.68 238.265 29.2714 194.274 29.0094 190.343 cv
28.646 184.893 32.2659 167.816 32.2659 167.816 cv
.635294 .341176 .258824 rgb
f
62.9087 168.073 mo
62.6708 161.782 li
30.4367 161.782 li
30.283 167.533 li
30.0986 168.146 25.6162 183.1 25.7829 188.299 cv
25.846 190.267 27.834 202.599 29.8617 215.181 cv
30.7815 220.888 32.5742 228.649 32.5742 232.189 cv
32.5742 239.407 61.0856 239.398 61.448 232.189 cv
62.0782 219.653 68.1591 192.343 67.973 188.364 cv
67.4934 178.111 62.9535 168.17 62.9087 168.073 cv
.0862745 .768627 .701961 rgb
f
35.4975 222.175 mo
32.8236 211.436 29.6034 198.506 29.2333 196.167 cv
28.4982 191.52 28.9851 178.34 29.3516 170.758 cv
28.0078 175.553 25.6622 184.531 25.7829 188.299 cv
25.846 190.267 27.2635 202.455 29.2912 215.037 cv
30.211 220.744 31.2036 226.792 31.9821 231.983 cv
32.5284 235.626 38.3635 236.638 38.3635 236.638 cv
37.6425 233.702 36.3789 225.714 35.4975 222.175 cv
.054902 .686275 .611765 rgb
f
64.0107 170.767 mo
64.6486 176.616 65.4621 187.047 64.5062 196.246 cv
63.976 201.351 57.3595 226.364 54.6501 236.824 cv
54.6501 236.824 59.1156 236.028 60.8193 233.816 cv
63.1832 230.747 68.1591 192.343 67.973 188.364 cv
67.643 181.308 65.39 174.401 64.0107 170.767 cv
f
39.7479 289.547 mo
39.7479 289.547 37.0786 293.934 36.8621 295.406 cv
36.6457 296.878 36.1695 301.011 37.3816 301.53 cv
38.5938 302.05 43.6588 302.136 44.3515 301.703 cv
45.0441 301.271 46.516 298.35 46.6459 296.705 cv
46.7757 295.06 45.7845 288.476 45.7845 288.476 cv
39.7479 289.547 li
cp
f
39.8671 289.011 mo
39.8671 289.011 37.1163 294.504 38.9048 296.676 cv
39.6242 297.549 46.0502 295.884 45.7776 288.525 cv
45.5051 281.167 39.8671 289.011 39.8671 289.011 cv
cp
.635294 .341176 .258824 rgb
f
53.9937 289.547 mo
53.9937 289.547 56.6631 293.934 56.8795 295.406 cv
57.096 296.878 57.5722 301.011 56.36 301.53 cv
55.1479 302.05 50.0829 302.136 49.3903 301.703 cv
48.6976 301.271 47.2257 298.35 47.0958 296.705 cv
46.9659 295.06 47.9572 288.476 47.9572 288.476 cv
53.9937 289.547 li
cp
.054902 .686275 .611765 rgb
f
53.8745 289.011 mo
53.8745 289.011 56.6254 294.504 54.8369 296.676 cv
54.1174 297.549 47.6915 295.884 47.964 288.525 cv
48.2365 281.167 53.8745 289.011 53.8745 289.011 cv
cp
.635294 .341176 .258824 rgb
f
62.5669 163.823 mo
71.7445 118.34 li
71.7445 114.809 69.2964 110.917 66.2766 109.648 cv
53.4227 104.247 li
50.5503 109.323 47.1643 111.663 47.1643 111.663 cv
47.1643 111.663 43.7946 109.169 41.0085 104.247 cv
28.1546 109.648 li
25.1348 110.917 22.6868 114.808 22.6868 118.34 cv
32.6144 163.823 li
62.5669 163.823 li
cp
.0862745 .768627 .701961 rgb
f
73.7398 201.286 mo
72.502 189.733 65.4605 166.04 65.3735 156.969 cv
65.2765 146.875 72.6307 117.817 72.6307 117.817 cv
72.6307 114.437 69.5725 110.044 66.4182 108.829 cv
56.3831 104.965 li
48.0732 146.97 li
48.3761 212.564 li
48.3761 212.564 74.6144 209.449 73.7398 201.286 cv
.866667 .866667 .866667 rgb
f
60.4569 110.868 mo
59.7836 106.716 li
66.9482 109.59 li
70.0171 110.772 60.4569 110.868 60.4569 110.868 cv
cp
.956863 .956863 .956863 rgb
f
61.2109 122.076 mo
59.0472 118.737 li
60.2226 115.309 li
58.8505 105.915 li
56.3832 104.965 li
48.4453 145.089 li
61.2109 122.076 li
cp
f
57.9428 132.319 mo
57.9428 127.06 li
68.4358 127.06 li
68.4358 132.319 li
57.9428 132.319 li
cp
0 .243137 .301961 rgb
f
68.1533 132.037 mo
58.2253 132.037 li
58.2253 127.343 li
68.1533 127.343 li
68.1533 132.037 li
cp
.956863 .956863 .956863 rgb
f
63.8774 127.657 mo
62.5012 127.657 li
62.5012 126.501 li
63.8774 126.501 li
63.8774 127.657 li
cp
.717647 .741176 .741176 rgb
f
62.0341 131.669 mo
58.8895 131.669 li
58.8895 127.802 li
62.0341 127.802 li
62.0341 131.669 li
cp
f
66.4343 192.143 mo
64.5558 192.143 60.5539 186.861 62.561 185.528 cv
64.9517 181.531 66.8468 177.982 68.3297 174.764 cv
69.1754 178.572 70.0966 182.54 70.9438 186.354 cv
69.7085 188.238 68.3569 190.131 66.8522 192.029 cv
66.7304 192.107 66.5898 192.143 66.4343 192.143 cv
.74902 .760784 .764706 rgb
f
64.2607 182.987 mo
62.4891 183.845 58.866 185.734 59.4179 186.594 cv
60.1439 187.725 57.8273 189.813 56.8763 191.006 cv
55.9254 192.199 63.9395 197.044 65.8253 194.737 cv
66.7883 193.56 67.8999 190.319 68.7579 187.429 cv
67.5276 187.22 65.3935 185.027 64.2607 182.987 cv
cp
.635294 .341176 .258824 rgb
f
56.9033 184.668 mo
56.9033 184.668 55.6643 206.825 57.7051 206.534 cv
59.7458 206.242 68.1991 203.896 69.9498 200.411 cv
71.7004 196.926 68.2005 189.041 68.2005 189.041 cv
56.9033 184.668 li
cp
.956863 .956863 .956863 rgb
f
69.3114 187.368 mo
67.7181 188.382 61.8091 181.176 63.9824 179.734 cv
79.6435 153.546 75.2674 150.703 69.2587 132.251 cv
70.46 125.121 65.5743 114.772 67.8557 114.117 cv
67.838 109.812 li
76.145 114.625 76.2908 119.929 79.4248 128.182 cv
84.1905 140.732 87.6244 164.26 69.3114 187.368 cv
cp
.866667 .866667 .866667 rgb
f
20.9221 201.286 mo
22.1599 189.733 29.2014 166.04 29.2885 156.969 cv
29.3854 146.875 22.0312 117.817 22.0312 117.817 cv
22.0312 114.437 25.0894 110.044 28.2437 108.829 cv
38.2787 104.965 li
49.5134 149.304 li
48.3761 212.564 li
48.3761 212.564 20.0475 209.449 20.9221 201.286 cv
f
34.205 110.868 mo
34.8783 106.716 li
27.7137 109.59 li
24.6448 110.772 34.205 110.868 34.205 110.868 cv
cp
.956863 .956863 .956863 rgb
f
33.451 122.076 mo
35.6147 118.737 li
34.4393 115.309 li
35.8114 105.915 li
38.2787 104.965 li
49.5133 149.305 li
33.451 122.076 li
cp
f
28.2275 192.143 mo
28.0721 192.143 27.9314 192.107 27.8097 192.029 cv
26.3051 190.131 24.9534 188.238 23.7181 186.354 cv
24.5653 182.54 25.4864 178.572 26.3322 174.764 cv
27.8151 177.982 29.7101 181.531 32.1008 185.528 cv
34.1079 186.861 30.1061 192.143 28.2275 192.143 cv
.74902 .760784 .764706 rgb
f
30.4012 182.987 mo
32.1728 183.845 35.7959 185.734 35.244 186.594 cv
34.518 187.725 36.8346 189.813 37.7856 191.006 cv
38.7365 192.199 30.7224 197.044 28.8366 194.737 cv
27.8736 193.56 26.762 190.319 25.904 187.429 cv
27.1343 187.22 29.2684 185.027 30.4012 182.987 cv
cp
.635294 .341176 .258824 rgb
f
37.7586 184.668 mo
37.7586 184.668 38.9976 206.825 36.9568 206.534 cv
34.916 206.242 26.4628 203.896 24.7121 200.411 cv
22.9615 196.926 26.4614 189.041 26.4614 189.041 cv
37.7586 184.668 li
cp
.956863 .956863 .956863 rgb
f
25.3505 187.368 mo
26.9438 188.382 32.8528 181.176 30.6795 179.734 cv
15.0184 153.546 19.3945 150.703 25.4032 132.251 cv
24.2019 125.121 29.0876 114.772 26.8062 114.117 cv
26.8239 109.812 li
18.5169 114.625 18.3711 119.929 15.2371 128.182 cv
10.4714 140.732 7.0375 164.26 25.3505 187.368 cv
cp
.866667 .866667 .866667 rgb
f
473.485 306.575 mo
456.447 306.575 442.634 303.525 442.634 299.764 cv
442.634 296.002 456.447 292.953 473.485 292.953 cv
490.523 292.953 504.336 296.002 504.336 299.764 cv
504.336 303.525 490.523 306.575 473.485 306.575 cv
.698039 .698039 .698039 rgb
f
505.541 142.829 mo
505.541 110.701 li
505.541 106.92 502.365 102.753 498.448 101.395 cv
482.234 96.0963 li
482.234 73.8124 li
465.21 73.8124 li
465.21 96.0963 li
448.996 101.394 li
445.078 102.753 441.903 106.92 441.903 110.701 cv
441.903 142.829 li
505.541 142.829 li
cp
.6 .301961 .235294 rgb
f
487.904 69.2751 mo
487.904 88.5175 479.053 92.366 473.833 92.366 cv
468.612 92.366 459.761 88.5175 459.761 69.2751 cv
459.761 59.5925 466.061 53.6674 473.833 53.6674 cv
481.604 53.6674 487.904 59.5925 487.904 69.2751 cv
cp
.678431 .364706 .294118 rgb
f
462.323 73.0345 mo
462.894 76.0791 462.22 78.7608 460.817 79.0242 cv
459.414 79.2877 457.813 77.0331 457.241 73.9885 cv
456.67 70.944 457.344 68.2623 458.747 67.9988 cv
460.15 67.7354 461.751 69.99 462.323 73.0345 cv
cp
f
485.127 73.0345 mo
484.555 76.0791 485.229 78.7608 486.633 79.0242 cv
488.036 79.2877 489.637 77.0331 490.208 73.9885 cv
490.78 70.9439 490.106 68.2623 488.703 67.9988 cv
487.299 67.7354 485.699 69.9899 485.127 73.0345 cv
cp
f
490.501 177.767 mo
505.627 110.701 li
505.627 106.897 502.421 102.689 498.479 101.321 cv
482.285 95.9943 li
473.922 101.229 li
465.16 95.9935 li
448.965 101.321 li
445.023 102.688 441.816 106.896 441.816 110.7 cv
453.831 180.146 li
490.501 177.767 li
cp
.905882 .917647 .882353 rgb
f
465.21 76.6082 mo
465.21 88.9663 li
467.81 93.3128 471.317 95.1397 473.722 95.5693 cv
476.126 95.9988 479.633 95.696 482.234 92.4381 cv
482.234 79.6493 li
473.721 75.9872 li
465.21 76.6082 li
cp
.537255 .239216 .188235 rgb
f
486.45 75.2616 mo
473.721 72.4165 li
460.993 75.2616 li
461.423 79.3699 462.602 85.3008 462.602 85.3008 cv
465.634 90.89 470.523 92.5184 473.722 92.5184 cv
476.921 92.5184 481.809 91.2592 484.842 85.8084 cv
484.842 85.8084 486.026 79.3149 486.45 75.2616 cv
cp
.905882 .917647 .882353 rgb
f
473.721 73.0226 mo
473.721 78.5455 li
473.721 78.5455 463.353 81.0469 461.727 75.8252 cv
473.721 73.0226 li
cp
.964706 .968627 .960784 rgb
f
476.966 101.268 mo
470.953 101.268 li
470.953 105.015 li
472.443 106.414 li
471.338 138.443 li
473.954 140.439 li
476.57 138.443 li
475.465 106.403 li
476.966 105.015 li
476.966 101.268 li
cp
0 .243137 .301961 rgb
f
473.922 101.229 mo
469.15 107.454 li
462.05 97.1995 li
465.21 94.1446 li
473.922 101.229 li
cp
.964706 .968627 .960784 rgb
f
473.922 101.229 mo
478.881 107.454 li
485.397 97.2013 li
482.219 94.1446 li
473.922 101.229 li
cp
f
486.183 64.029 mo
486.471 63.9206 486.775 63.8527 487.089 63.8162 cv
485.141 57.5438 479.943 53.8688 473.82 53.8688 cv
466.734 53.8688 460.887 58.7836 459.885 66.9584 cv
459.932 67.4305 459.961 67.9148 459.961 68.4163 cv
459.961 68.4163 461.609 65.0667 461.541 61.9467 cv
461.506 60.3237 465.993 56.9157 473.667 60.98 cv
481.803 59.1096 485.516 62.468 486.183 64.029 cv
cp
.6 .301961 .235294 rgb
f
462.112 53.1875 mo
456.905 60.0524 459.961 63.1303 459.961 68.328 cv
459.961 68.328 461.609 64.8148 461.541 61.7016 cv
461.506 60.082 465.993 56.229 473.667 59.5322 cv
482.712 56.5556 486.304 60.5911 486.304 61.7803 cv
486.304 64.1561 485.565 63.4816 487.525 68.7611 cv
489.202 62.1044 489.877 58.0474 485.129 52.3105 cv
480.426 46.6286 468.454 44.8254 462.112 53.1875 cv
cp
.227451 .227451 .227451 rgb
f
459.889 66.9265 mo
459.25 68.0827 li
461.161 76.6802 li
461.584 75.2414 li
459.889 66.9265 li
cp
.905882 .917647 .882353 rgb
f
487.501 66.9265 mo
488.141 68.0827 li
486.23 76.6802 li
485.807 75.2414 li
487.501 66.9265 li
cp
f
479.054 52.001 mo
467.27 52.518 462.928 58.6329 462.928 55.3156 cv
462.928 51.9983 467.163 48.8679 472.387 48.3236 cv
477.61 47.7794 482.368 51.8556 479.054 52.001 cv
cp
.286275 .286275 .286275 rgb
f
493.004 170.3 mo
473.939 170.874 li
455.288 171.079 li
455.288 171.079 454.017 183.129 454.017 195.145 cv
454.017 201.15 459.562 292.103 459.562 292.103 cv
468.911 291.868 li
472.746 195.552 li
472.8 195.502 li
474.755 195.489 li
479.236 293.076 li
489.14 293.241 li
489.14 293.241 494.311 198.332 494.656 194.019 cv
495.133 188.04 493.004 170.3 493.004 170.3 cv
cp
.00784314 .411765 .686275 rgb
f
500.875 209.515 mo
500.875 176.959 505.119 111.091 505.119 111.091 cv
505.119 106.878 501.921 102.219 497.99 100.705 cv
484.44 95.4497 li
484.44 95.4497 478.218 171.19 490.65 178.483 cv
491.994 215.195 500.875 214.943 500.875 209.515 cv
cp
.866667 .866667 .866667 rgb
f
490.526 115.922 mo
488.299 108.987 li
490.05 107.867 li
488.883 96.8925 li
488.883 96.8925 484.624 93.9814 484.44 95.1595 cv
480.629 119.553 483.245 149.454 483.245 149.454 cv
490.526 115.922 li
cp
.956863 .956863 .956863 rgb
f
498.245 101.227 mo
489.778 98.2171 li
490.681 102.977 li
494.921 102.683 500.437 102.137 498.245 101.227 cv
cp
.964706 .968627 .960784 rgb
f
488.377 124.597 mo
488.377 119.359 li
498.829 119.359 li
498.829 124.597 li
488.377 124.597 li
cp
0 .243137 .301961 rgb
f
498.547 124.315 mo
488.658 124.315 li
488.658 119.64 li
498.547 119.64 li
498.547 124.315 li
cp
.956863 .956863 .956863 rgb
f
494.288 119.953 mo
492.917 119.953 li
492.917 118.801 li
494.288 118.801 li
494.288 119.953 li
cp
.717647 .741176 .741176 rgb
f
492.452 123.949 mo
489.32 123.949 li
489.32 120.097 li
492.452 120.097 li
492.452 123.949 li
cp
f
469.491 299.012 mo
469.491 300.688 467.558 302.047 465.173 302.047 cv
462.294 302.047 li
459.91 302.047 457.976 300.688 457.976 299.012 cv
457.976 292.535 li
457.976 290.859 459.91 290.586 462.294 290.586 cv
465.173 290.586 li
467.558 290.586 469.491 290.859 469.491 292.535 cv
469.491 299.012 li
cp
0 .243137 .380392 rgb
f
469.491 297.264 mo
469.491 298.52 467.558 299.538 465.173 299.538 cv
462.294 299.538 li
459.91 299.538 457.976 298.52 457.976 297.264 cv
457.976 292.412 li
457.976 291.156 459.91 288.456 462.294 288.456 cv
465.173 288.456 li
467.558 288.456 469.491 291.156 469.491 292.412 cv
469.491 297.264 li
cp
.247059 .368627 .466667 rgb
f
489.93 299.012 mo
489.93 300.688 487.996 302.047 485.611 302.047 cv
482.733 302.047 li
480.348 302.047 478.415 300.688 478.415 299.012 cv
478.415 292.535 li
478.415 290.859 480.348 290.586 482.733 290.586 cv
485.611 290.586 li
487.996 290.586 489.93 290.859 489.93 292.535 cv
489.93 299.012 li
cp
0 .243137 .380392 rgb
f
489.93 297.264 mo
489.93 298.52 487.996 299.538 485.611 299.538 cv
482.733 299.538 li
480.348 299.538 478.415 298.52 478.415 297.264 cv
478.415 292.412 li
478.415 291.156 480.348 288.456 482.733 288.456 cv
485.611 288.456 li
487.996 288.456 489.93 291.156 489.93 292.412 cv
489.93 297.264 li
cp
.247059 .368627 .466667 rgb
f
498.134 129.052 mo
500.315 147.21 497.087 151.271 489.449 176.861 cv
489.338 176.933 489.242 177.043 489.153 177.169 cv
489.62 177.722 490.116 178.17 490.65 178.483 cv
490.857 184.127 491.242 188.894 491.745 192.906 cv
495.597 188.924 498.82 185.022 501.509 181.217 cv
502.176 162.926 503.238 142.979 504.038 129.052 cv
498.134 129.052 li
cp
.717647 .741176 .741176 rgb
f
497.762 183.716 mo
495.967 184.841 488.724 175.434 491.176 173.838 cv
501.694 148.291 503.596 147.675 498.086 128.64 cv
499.799 121.141 496.584 105.898 499.109 105.121 cv
499.297 101.343 li
508.085 106.033 507.98 110.85 510.932 119.344 cv
515.42 132.262 521.922 153.549 497.762 183.716 cv
cp
.866667 .866667 .866667 rgb
f
483.435 185.512 mo
486.064 187.189 488.683 188.894 491.453 190.366 cv
492.33 188.726 495.374 184.693 496.159 182.514 cv
494.829 182.345 492.625 180.142 491.505 178.056 cv
489.524 179.025 485.908 180.087 485.379 180.978 cv
484.333 182.737 484.028 184.729 483.435 185.512 cv
cp
.917647 .717647 .580392 rgb
f
445.91 209.515 mo
445.91 176.959 441.666 111.091 441.666 111.091 cv
441.666 106.878 444.864 102.219 448.795 100.705 cv
462.345 95.4497 li
462.345 95.4497 468.567 171.19 456.135 178.483 cv
454.791 215.195 445.91 214.943 445.91 209.515 cv
cp
.866667 .866667 .866667 rgb
f
456.259 115.922 mo
458.486 108.987 li
456.735 107.867 li
457.902 96.8925 li
457.902 96.8925 462.161 93.9814 462.345 95.1595 cv
466.156 119.553 463.54 149.454 463.54 149.454 cv
456.259 115.922 li
cp
.956863 .956863 .956863 rgb
f
448.54 101.227 mo
457.007 98.2171 li
456.104 102.977 li
451.864 102.683 446.348 102.137 448.54 101.227 cv
cp
.964706 .968627 .960784 rgb
f
448.651 129.052 mo
446.47 147.21 449.698 151.271 457.336 176.861 cv
457.447 176.933 457.543 177.043 457.632 177.169 cv
457.165 177.722 456.669 178.17 456.135 178.483 cv
455.928 184.127 455.543 188.894 455.04 192.906 cv
451.188 188.924 447.965 185.022 445.276 181.217 cv
444.609 162.926 443.547 142.979 442.747 129.052 cv
448.651 129.052 li
cp
.717647 .741176 .741176 rgb
f
449.023 183.716 mo
450.818 184.841 458.061 175.434 455.609 173.838 cv
445.091 148.291 443.189 147.675 448.699 128.64 cv
446.986 121.141 450.201 105.898 447.676 105.121 cv
447.488 101.343 li
438.7 106.033 438.805 110.85 435.853 119.344 cv
431.365 132.262 424.863 153.549 449.023 183.716 cv
cp
.866667 .866667 .866667 rgb
f
463.35 185.512 mo
460.721 187.189 458.102 188.894 455.332 190.366 cv
454.455 188.726 451.411 184.693 450.626 182.514 cv
451.956 182.345 454.16 180.142 455.28 178.056 cv
457.261 179.025 460.877 180.087 461.406 180.978 cv
462.452 182.737 462.757 184.729 463.35 185.512 cv
cp
.917647 .717647 .580392 rgb
f
412.61 313.935 mo
395.571 313.935 381.759 310.885 381.759 307.123 cv
381.759 303.362 395.571 300.312 412.61 300.312 cv
429.648 300.312 443.46 303.362 443.46 307.123 cv
443.46 310.885 429.648 313.935 412.61 313.935 cv
.698039 .698039 .698039 rgb
f
428.422 74.26 mo
398.675 75.5288 li
398.675 82.8641 398.88 90.3266 397.442 95.4893 cv
402.517 101.269 421.072 101.47 429.954 95.4074 cv
427.126 86.0519 428.422 74.26 428.422 74.26 cv
cp
.286275 .286275 .286275 rgb
f
423.28 98.4039 mo
425.784 94.995 427.627 89.5475 427.627 80.9946 cv
427.627 78.5117 427.182 76.2879 426.398 74.3463 cv
399.924 75.4755 li
399.396 77.1396 399.093 78.9783 399.093 80.9946 cv
399.093 89.9411 401.107 95.4942 403.789 98.8653 cv
409.356 100.35 416.984 100.23 423.28 98.4039 cv
cp
.227451 .227451 .227451 rgb
f
413.909 123.448 mo
432.261 105.096 li
419.732 100.272 li
419.732 81.9317 li
406.386 81.9318 li
406.386 100.272 li
395.084 104.624 li
413.909 123.448 li
cp
.886275 .603922 .34902 rgb
f
418.284 130.968 mo
439.429 114.156 li
439.429 110.677 436.797 106.843 433.551 105.593 cv
424.005 101.917 li
420.917 106.919 416.494 108.244 413.36 108.244 cv
410.188 108.244 405.695 106.883 402.603 101.728 cv
392.567 105.593 li
389.32 106.843 386.688 110.677 386.688 114.156 cv
407.326 129.784 li
418.284 130.968 li
cp
.866667 .866667 .866667 rgb
f
434.403 201.134 mo
434.403 201.134 439.54 173.843 434.751 162.224 cv
424.84 138.172 439.852 114.156 439.852 114.156 cv
439.852 110.523 437.094 106.504 433.703 105.198 cv
422.915 101.044 li
413.303 127.269 li
403.203 101.044 li
392.415 105.198 li
389.024 106.504 386.266 110.522 386.266 114.156 cv
386.266 114.156 401.4 141.092 392.147 163.359 cv
386.954 175.858 391.445 201.786 391.445 201.786 cv
434.403 201.134 li
cp
.00392157 .490196 .882353 rgb
f
421.519 109.017 mo
423.817 102.408 li
434.132 106.545 li
437.431 107.816 421.519 109.017 421.519 109.017 cv
cp
.192157 .67451 1 rgb
f
406.386 95.3336 mo
409.089 98.5133 412.37 99.4331 414.815 99.4331 cv
416.259 99.4331 417.995 99.1097 419.732 98.1933 cv
419.732 84.8924 li
406.386 84.8924 li
406.386 95.3336 li
cp
.839216 .498039 .262745 rgb
f
427.627 73.5931 mo
427.627 92.4831 418.652 96.2611 413.36 96.2611 cv
408.068 96.2611 399.093 92.4831 399.093 73.5931 cv
399.093 64.0878 405.481 58.2712 413.36 58.2712 cv
421.239 58.2712 427.627 64.0878 427.627 73.5931 cv
cp
.937255 .686275 .415686 rgb
f
413.36 58.2712 mo
405.745 58.2712 399.541 63.7154 399.133 72.6608 cv
409.891 71.8304 414.796 69.8631 416.96 66.0348 cv
419.292 69.5108 422.783 71.2522 427.528 71.6614 cv
426.72 63.3086 420.689 58.2712 413.36 58.2712 cv
cp
.886275 .603922 .34902 rgb
f
430.85 71.7438 mo
432.632 59.4282 425.044 48.6255 416.088 51.0515 cv
409.594 46.3729 394.133 46.7531 395.273 72.9037 cv
408.772 72.2563 414.552 67.4171 416.96 63.156 cv
419.806 67.3989 424.377 71.9396 430.85 71.7438 cv
cp
.286275 .286275 .286275 rgb
f
400.701 76.3797 mo
401.318 79.6659 400.591 82.5603 399.076 82.8446 cv
397.562 83.129 395.834 80.6955 395.217 77.4094 cv
394.6 74.1233 395.328 71.2289 396.842 70.9445 cv
398.357 70.6602 400.084 73.0936 400.701 76.3797 cv
cp
.937255 .686275 .415686 rgb
f
425.315 76.3797 mo
424.698 79.6659 425.425 82.5603 426.94 82.8446 cv
428.454 83.129 430.182 80.6955 430.799 77.4094 cv
431.416 74.1233 430.689 71.2289 429.174 70.9445 cv
427.66 70.6602 425.932 73.0936 425.315 76.3797 cv
cp
f
401.495 53.3948 mo
400.831 54.1086 398.523 58.049 398.156 61.1879 cv
397.989 62.6245 416.685 52.9014 414.183 51.703 cv
412.699 50.9923 406.182 48.3547 401.495 53.3948 cv
cp
.376471 .376471 .376471 rgb
f
418.87 130.452 mo
418.87 124.798 li
430.151 124.798 li
430.151 130.452 li
418.87 130.452 li
cp
0 .243137 .301961 rgb
f
429.847 130.148 mo
419.174 130.148 li
419.174 125.101 li
429.847 125.101 li
429.847 130.148 li
cp
.956863 .956863 .956863 rgb
f
425.25 125.44 mo
423.771 125.44 li
423.771 124.196 li
425.25 124.196 li
425.25 125.44 li
cp
.717647 .741176 .741176 rgb
f
423.269 129.753 mo
419.888 129.753 li
419.888 125.595 li
423.269 125.595 li
423.269 129.753 li
cp
f
436.717 180.4 mo
429.953 183.035 422.362 184.516 413.242 184.516 cv
404.432 184.516 396.286 183.053 389.644 180.578 cv
389.645 191.371 391.441 201.764 391.444 201.785 cv
404.632 304.17 li
412.116 304.17 li
411.718 201.478 li
414.045 201.443 li
413.647 304.17 li
421.132 304.17 li
435.808 193.561 li
436.351 189.819 436.821 185.106 436.717 180.4 cv
cp
.00784314 .411765 .686275 rgb
f
412.62 306.34 mo
412.62 307.667 411.09 308.742 409.202 308.742 cv
406.924 308.742 li
405.036 308.742 403.506 307.667 403.506 306.34 cv
403.506 301.213 li
403.506 299.886 405.036 299.67 406.924 299.67 cv
409.202 299.67 li
411.09 299.67 412.62 299.886 412.62 301.213 cv
412.62 306.34 li
cp
0 .243137 .380392 rgb
f
412.62 304.956 mo
412.62 305.95 411.09 306.756 409.202 306.756 cv
406.924 306.756 li
405.036 306.756 403.506 305.95 403.506 304.956 cv
403.506 301.116 li
403.506 300.122 405.036 297.985 406.924 297.985 cv
409.202 297.985 li
411.09 297.985 412.62 300.122 412.62 301.116 cv
412.62 304.956 li
cp
.866667 .866667 .866667 rgb
f
422.314 306.34 mo
422.314 307.667 420.784 308.742 418.896 308.742 cv
416.617 308.742 li
414.73 308.742 413.199 307.667 413.199 306.34 cv
413.199 301.213 li
413.199 299.886 414.73 299.67 416.617 299.67 cv
418.896 299.67 li
420.784 299.67 422.314 299.886 422.314 301.213 cv
422.314 306.34 li
cp
0 .243137 .380392 rgb
f
422.314 304.956 mo
422.314 305.95 420.784 306.756 418.896 306.756 cv
416.617 306.756 li
414.73 306.756 413.199 305.95 413.199 304.956 cv
413.199 301.116 li
413.199 300.122 414.73 297.985 416.617 297.985 cv
418.896 297.985 li
420.784 297.985 422.314 300.122 422.314 301.116 cv
422.314 304.956 li
cp
.866667 .866667 .866667 rgb
f
424.701 174.528 mo
402.468 174.537 li
399.214 136.939 li
427.925 136.928 li
424.701 174.528 li
cp
.956863 .956863 .956863 rgb
f
405.513 151.53 mo
404.088 151.593 401.397 151.592 400.737 150.573 cv
400.077 149.553 392.792 152.351 392.792 152.351 cv
392.696 157.526 li
392.696 157.526 398.49 158.919 401.275 158.88 cv
411.435 158.736 419.246 150.93 405.513 151.53 cv
cp
.917647 .717647 .580392 rgb
f
391.97 158.462 mo
394.097 158.356 396.143 150.168 393.203 150.262 cv
387.841 148.325 384.507 146.357 383.635 143.843 cv
382.426 140.355 389.842 130.624 394.302 125.231 cv
398.181 115.873 390.452 107.037 390.452 107.037 cv
384.244 110.978 369.691 141.21 372.078 150.313 cv
373.065 154.074 382.03 155.94 391.97 158.462 cv
cp
.00392157 .490196 .882353 rgb
f
421.76 151.53 mo
423.185 151.593 425.878 151.592 426.539 150.573 cv
427.2 149.553 434.489 152.351 434.489 152.351 cv
434.585 157.526 li
434.585 157.526 428.787 158.919 426 158.88 cv
415.835 158.736 408.019 150.93 421.76 151.53 cv
cp
.917647 .717647 .580392 rgb
f
435.311 158.462 mo
433.183 158.356 431.136 150.168 434.078 150.262 cv
439.443 148.325 442.779 146.357 443.652 143.843 cv
444.862 140.355 437.441 130.624 432.978 125.231 cv
429.097 115.873 435.401 106.869 435.401 106.869 cv
441.613 110.81 457.605 141.21 455.216 150.313 cv
454.229 154.074 445.258 155.94 435.311 158.462 cv
cp
.00392157 .490196 .882353 rgb
f
391.514 106.497 mo
402.047 102.412 li
405.493 110.267 li
405.493 110.267 382.487 111.25 391.514 106.497 cv
cp
.192157 .67451 1 rgb
f
427.785 138.56 mo
427.925 136.928 li
399.214 136.939 li
399.355 138.56 li
427.785 138.56 li
cp
.717647 .741176 .741176 rgb
f
116.337 315.467 mo
95.464 315.467 78.5434 311.732 78.5434 307.123 cv
78.5434 302.515 95.464 298.779 116.337 298.779 cv
137.209 298.779 154.13 302.515 154.13 307.123 cv
154.13 311.732 137.209 315.467 116.337 315.467 cv
.698039 .698039 .698039 rgb
f
145.037 116.334 mo
145.037 111.217 li
145.037 107.379 142.133 103.149 138.551 101.769 cv
124.582 96.3897 li
124.582 73.7649 li
107.298 73.7649 li
107.298 96.3897 li
93.3285 101.769 li
89.7462 103.148 86.8422 107.379 86.8422 111.217 cv
86.8422 116.334 li
145.037 116.334 li
cp
.886275 .603922 .34902 rgb
f
107.298 76.6035 mo
107.298 89.1506 li
109.938 93.5636 113.498 95.4185 115.94 95.8546 cv
118.381 96.2907 121.942 95.9832 124.582 92.6755 cv
124.582 79.6911 li
115.939 75.973 li
107.298 76.6035 li
cp
.839216 .498039 .262745 rgb
f
130.258 69.3129 mo
130.258 88.8497 121.251 92.757 115.94 92.757 cv
110.628 92.757 101.622 88.8497 101.622 69.3129 cv
101.622 59.4822 108.032 53.4665 115.94 53.4665 cv
123.847 53.4665 130.258 59.4822 130.258 69.3129 cv
cp
.937255 .686275 .415686 rgb
f
104.366 72.9752 mo
104.947 76.0663 104.262 78.789 102.838 79.0565 cv
101.413 79.324 99.7878 77.0349 99.2074 73.9437 cv
98.627 70.8526 99.3114 68.1299 100.736 67.8624 cv
102.161 67.5949 103.786 69.884 104.366 72.9752 cv
cp
f
127.52 72.9752 mo
126.939 76.0663 127.624 78.789 129.048 79.0565 cv
130.473 79.3239 132.098 77.0349 132.678 73.9437 cv
133.259 70.8526 132.574 68.1299 131.15 67.8624 cv
129.725 67.5949 128.1 69.884 127.52 72.9752 cv
cp
f
130.19 67.6634 mo
124.522 60.0305 107.762 58.4496 101.685 67.7672 cv
101.684 67.7983 li
101.684 67.7983 113.333 57.189 130.19 67.6634 cv
cp
.886275 .603922 .34902 rgb
f
129.301 63.2176 mo
128.654 81.1707 125.071 90.078 115.94 90.078 cv
106.77 90.078 103.226 81.1708 102.578 63.2176 cv
101.969 65.0372 101.622 67.0701 101.622 69.3129 cv
101.622 88.8497 110.628 93.6586 115.94 93.6586 cv
121.251 93.6586 130.258 88.8497 130.258 69.3129 cv
130.258 67.0701 129.91 65.0372 129.301 63.2176 cv
cp
.278431 .278431 .278431 rgb
f
101.627 55.3083 mo
101.627 67.85 li
107.662 58.429 124.535 60.0094 130.206 67.6828 cv
130.206 54.8995 li
127.302 50.9605 121.463 44.8996 115.645 44.8883 cv
110.099 44.8775 104.572 50.7107 101.627 55.3083 cv
cp
.00392157 .490196 .882353 rgb
f
115.687 45.6896 mo
112.027 45.6495 105.364 50.8867 102.619 55.8206 cv
102.619 55.8206 102.619 58.5073 102.619 60.478 cv
113.147 54.3841 115.687 45.6896 115.687 45.6896 cv
cp
.192157 .67451 1 rgb
f
114.289 87.7903 mo
112.101 89.9785 li
114.189 92.0672 li
117.889 92.0672 li
119.978 89.9785 li
117.79 87.7903 li
114.289 87.7903 li
cp
.278431 .278431 .278431 rgb
f
110.848 82.121 mo
109.354 83.6155 110.848 90.5753 110.848 90.5753 cv
111.89 90.5753 li
111.89 90.5753 110.694 85.0075 111.89 83.8118 cv
113.344 82.3573 118.663 82.3573 120.118 83.8118 cv
121.313 85.0075 120.118 90.5753 120.118 90.5753 cv
121.159 90.5753 li
121.159 90.5753 122.654 83.6155 121.159 82.121 cv
119.336 80.2982 112.671 80.2982 110.848 82.121 cv
cp
f
94.7265 229.039 mo
94.0284 229.025 93.3288 229.011 92.6296 228.998 cv
94.4529 248.447 95.9656 264.021 97.3633 278.278 cv
97.4881 279.551 97.8412 285.395 97.9519 286.522 cv
98.0528 287.549 96.2138 293.057 96.3016 293.95 cv
96.7506 298.514 98.8941 299.932 98.8941 299.932 cv
110.956 300.722 li
112.156 295.046 li
111.202 288.866 li
112.435 229.382 li
106.531 229.276 100.627 229.162 94.7265 229.039 cv
cp
.00784314 .411765 .686275 rgb
f
117.697 229.472 mo
120.452 289.452 li
119.235 294.847 li
120.955 300.409 li
131.789 300.589 li
131.789 300.589 133.834 298.874 134.249 294.28 cv
134.36 293.04 132.654 286.953 132.789 285.459 cv
134.054 271.435 136.296 250.646 138.183 229.751 cv
131.355 229.687 124.526 229.586 117.697 229.472 cv
cp
f
141.475 242.173 mo
141.475 225.824 141.355 187.735 143.574 156.779 cv
145.375 131.664 149.601 111.199 149.601 111.199 cv
149.601 107.038 146.21 102.435 142.042 100.939 cv
125.916 95.1117 li
115.61 116.143 li
105.81 95.1109 li
89.6831 100.939 li
85.5147 102.434 82.1236 107.037 82.1236 111.199 cv
82.1236 111.199 85.8701 127.431 87.8118 157.285 cv
89.5915 184.65 89.5807 225.007 89.5807 242.087 cv
89.5807 249.607 141.475 249.409 141.475 242.173 cv
cp
.00392157 .490196 .882353 rgb
f
123.973 102.931 mo
126.473 96.2324 li
141.709 101.738 li
145.298 103.026 123.973 102.931 123.973 102.931 cv
cp
.192157 .67451 1 rgb
f
90.0137 101.739 mo
105.24 96.2365 li
110.222 106.818 li
110.222 106.818 76.964 108.141 90.0137 101.739 cv
cp
f
125.37 124.391 mo
125.37 118.661 li
136.803 118.661 li
136.803 124.391 li
125.37 124.391 li
cp
0 .243137 .301961 rgb
f
136.495 124.083 mo
125.678 124.083 li
125.678 118.968 li
136.495 118.968 li
136.495 124.083 li
cp
.956863 .956863 .956863 rgb
f
131.836 119.311 mo
130.337 119.311 li
130.337 118.051 li
131.836 118.051 li
131.836 119.311 li
cp
.717647 .741176 .741176 rgb
f
129.828 123.682 mo
126.402 123.682 li
126.402 119.469 li
129.828 119.469 li
129.828 123.682 li
cp
f
110.956 307.942 mo
110.956 309.776 108.842 311.263 106.233 311.263 cv
103.084 311.263 li
100.475 311.263 98.36 309.776 98.36 307.942 cv
98.36 300.857 li
98.36 299.023 100.475 298.725 103.084 298.725 cv
106.233 298.725 li
108.842 298.725 110.956 299.023 110.956 300.857 cv
110.956 307.942 li
cp
0 .243137 .380392 rgb
f
110.956 306.03 mo
110.956 307.404 108.842 308.518 106.233 308.518 cv
103.084 308.518 li
100.475 308.518 98.36 307.404 98.36 306.03 cv
98.36 300.722 li
98.36 299.348 100.475 296.395 103.084 296.395 cv
106.233 296.395 li
108.842 296.395 110.956 299.348 110.956 300.722 cv
110.956 306.03 li
cp
.247059 .368627 .466667 rgb
f
132.71 307.942 mo
132.71 309.776 130.595 311.263 127.986 311.263 cv
124.837 311.263 li
122.228 311.263 120.114 309.776 120.114 307.942 cv
120.114 300.857 li
120.114 299.023 122.228 298.725 124.837 298.725 cv
127.986 298.725 li
130.595 298.725 132.71 299.023 132.71 300.857 cv
132.71 307.942 li
cp
0 .243137 .380392 rgb
f
132.71 306.03 mo
132.71 307.404 130.595 308.518 127.986 308.518 cv
124.837 308.518 li
122.228 308.518 120.114 307.404 120.114 306.03 cv
120.114 300.722 li
120.114 299.348 122.228 296.395 124.837 296.395 cv
127.986 296.395 li
130.595 296.395 132.71 299.348 132.71 300.722 cv
132.71 306.03 li
cp
.247059 .368627 .466667 rgb
f
141.474 129.479 mo
143.708 148.075 140.402 152.234 132.579 178.443 cv
132.466 178.517 128.592 182.417 128.5 182.546 cv
131.537 184.4 134.117 188.166 134.632 192.275 cv
136.658 190.541 139.349 190.943 142.103 187.046 cv
142.786 168.313 146.702 143.742 147.521 129.479 cv
141.474 129.479 li
cp
.00784314 .411765 .686275 rgb
f
141.093 185.464 mo
139.255 186.616 131.837 176.982 134.348 175.347 cv
145.12 149.182 147.069 148.551 141.425 129.057 cv
143.18 121.376 139.887 105.765 142.473 104.969 cv
142.666 101.099 li
151.666 105.903 151.559 110.836 154.582 119.536 cv
159.178 132.766 165.838 154.567 141.093 185.464 cv
cp
.00392157 .490196 .882353 rgb
f
126.421 187.303 mo
129.113 189.02 131.795 190.767 134.632 192.275 cv
135.53 190.594 139.066 187.51 139.87 185.278 cv
138.88 184.806 135.873 181.388 134.726 179.252 cv
132.697 180.244 128.953 181.747 128.411 182.659 cv
127.339 184.46 127.028 186.501 126.421 187.303 cv
cp
.917647 .717647 .580392 rgb
f
90.7955 129.479 mo
87.5563 149.251 92.2737 157.064 104.365 183.636 cv
104.478 183.71 98.1532 188.166 97.6378 192.275 cv
95.5905 192.517 91.7694 190.365 89.0156 186.468 cv
88.3326 167.735 85.5683 143.742 84.7491 129.479 cv
90.7955 129.479 li
cp
.00784314 .411765 .686275 rgb
f
91.1767 185.464 mo
93.0152 186.616 100.433 176.982 97.9217 175.347 cv
87.1497 149.182 85.2012 148.551 90.8448 129.057 cv
89.0903 121.376 92.3832 105.765 89.797 104.969 cv
89.6042 101.099 li
80.6038 105.903 80.7112 110.836 77.6882 119.536 cv
73.0913 132.766 66.4321 154.567 91.1767 185.464 cv
cp
.00392157 .490196 .882353 rgb
f
105.849 187.303 mo
103.157 189.02 100.475 190.767 97.6378 192.275 cv
96.7396 190.594 93.2222 187.499 92.419 185.267 cv
94.3258 183.925 96.3025 181.045 97.5394 179.265 cv
99.568 180.257 103.317 181.747 103.859 182.659 cv
104.93 184.46 105.242 186.501 105.849 187.303 cv
cp
.917647 .717647 .580392 rgb
f
104.833 205.269 mo
106.06 199.273 105.836 189.356 105.836 178.586 cv
102.593 182.272 90.9469 187.874 90.9469 187.874 cv
90.9469 196.395 91.537 201.82 92.62 205.269 cv
104.833 205.269 li
cp
.192157 .67451 1 rgb
f
127.051 205.269 mo
125.824 199.273 126.048 189.356 126.048 178.586 cv
129.291 182.272 140.937 187.874 140.937 187.874 cv
140.937 196.395 140.347 201.82 139.264 205.269 cv
127.051 205.269 li
cp
f
262.194 340.983 mo
234.503 340.983 212.056 336.027 212.056 329.913 cv
212.056 323.8 234.503 318.844 262.194 318.844 cv
289.885 318.844 312.333 323.8 312.333 329.913 cv
312.333 336.027 289.885 340.983 262.194 340.983 cv
.698039 .698039 .698039 rgb
f
188.614 325.234 mo
167.741 325.234 150.821 321.499 150.821 316.89 cv
150.821 312.72 164.68 309.264 182.785 308.645 cv
182.857 309.225 li
187.77 311.286 li
187.787 308.548 li
188.062 308.547 188.338 308.547 188.614 308.547 cv
189.339 308.547 190.06 308.551 190.775 308.56 cv
190.747 311.445 li
194.971 308.664 li
212.816 309.332 226.408 312.761 226.408 316.89 cv
226.408 321.499 209.487 325.234 188.614 325.234 cv
f
335.448 325.234 mo
314.576 325.234 297.655 321.499 297.655 316.89 cv
297.655 312.282 314.576 308.547 335.448 308.547 cv
356.321 308.547 373.242 312.282 373.242 316.89 cv
373.242 321.499 356.321 325.234 335.448 325.234 cv
f
172.954 170.121 mo
189.158 176.61 li
205.01 170.913 li
205.01 170.913 209.217 183.18 209.217 195.413 cv
209.217 201.526 203.071 250.085 203.071 250.456 cv
195.68 308.198 li
190.747 311.445 li
191.069 277.172 li
191.298 242.67 li
191.298 242.67 190.69 213.433 190.974 205.796 cv
191.066 203.296 191.82 195.827 191.82 195.827 cv
190.126 195.776 li
187.052 195.763 li
187.052 195.763 187.883 203.15 187.985 205.624 cv
188.302 213.271 187.631 242.542 187.631 242.542 cv
187.985 276.827 li
187.77 311.286 li
182.857 309.225 li
175.65 251.314 li
175.65 248.794 169.61 199.668 169.317 195.277 cv
168.911 189.191 172.954 170.121 172.954 170.121 cv
.917647 .717647 .580392 rgb
f
207.174 170.407 mo
206.908 163.382 li
170.911 163.382 li
170.74 169.805 li
170.534 170.489 165.528 187.189 165.714 192.995 cv
165.785 195.192 168.005 208.964 170.269 223.015 cv
171.296 229.388 173.298 238.055 173.298 242.008 cv
173.298 250.069 205.138 250.059 205.543 242.008 cv
206.247 228.009 213.037 197.51 212.83 193.068 cv
212.294 181.618 207.224 170.515 207.174 170.407 cv
.0196078 .411765 .709804 rgb
f
176.563 230.825 mo
173.577 218.833 169.981 204.393 169.567 201.781 cv
168.747 196.592 169.29 181.873 169.7 173.406 cv
168.199 178.761 165.579 188.787 165.714 192.995 cv
165.785 195.192 167.368 208.803 169.632 222.854 cv
170.659 229.227 171.768 235.982 172.637 241.778 cv
173.247 245.846 179.764 246.977 179.764 246.977 cv
178.958 243.698 177.547 234.777 176.563 230.825 cv
cp
.027451 .4 .627451 rgb
f
208.405 173.416 mo
209.117 179.948 210.025 191.596 208.958 201.869 cv
208.366 207.57 200.977 235.503 197.951 247.184 cv
197.951 247.184 202.938 246.295 204.841 243.825 cv
207.481 240.398 213.037 197.511 212.83 193.068 cv
212.461 185.187 209.945 177.474 208.405 173.416 cv
f
181.309 306.063 mo
181.309 306.063 178.329 310.961 178.087 312.605 cv
177.845 314.249 177.313 318.864 178.667 319.444 cv
180.021 320.025 185.677 320.121 186.45 319.638 cv
187.224 319.154 188.868 315.893 189.013 314.055 cv
189.158 312.218 188.051 304.866 188.051 304.866 cv
181.309 306.063 li
cp
.0156863 .407843 .705882 rgb
f
181.443 305.464 mo
181.443 305.464 178.371 311.598 180.368 314.023 cv
181.171 314.999 188.347 313.139 188.043 304.922 cv
187.739 296.704 181.443 305.464 181.443 305.464 cv
cp
.917647 .717647 .580392 rgb
f
197.218 306.063 mo
197.218 306.063 200.199 310.961 200.441 312.605 cv
200.683 314.249 201.215 318.864 199.861 319.444 cv
198.507 320.025 192.851 320.121 192.077 319.638 cv
191.304 319.154 189.66 315.893 189.515 314.055 cv
189.37 312.218 190.477 304.866 190.477 304.866 cv
197.218 306.063 li
cp
.0156863 .407843 .705882 rgb
f
197.085 305.464 mo
197.085 305.464 200.157 311.598 198.16 314.023 cv
197.356 314.999 190.18 313.139 190.485 304.922 cv
190.789 296.704 197.085 305.464 197.085 305.464 cv
cp
.917647 .717647 .580392 rgb
f
197.821 48.3205 mo
190.817 42.5284 168.411 47.2383 168.411 75.0392 cv
168.411 96.1358 176.609 98.1317 165.817 111.218 cv
173.517 117.796 196.066 120.668 201.361 116.337 cv
206.655 112.005 211.173 97.2988 211.758 82.6543 cv
212.383 67.0445 208.42 50.9423 197.821 48.3205 cv
cp
1 .690196 .282353 rgb
f
207.145 80.041 mo
207.145 69.4882 199.452 63.0307 189.962 63.0307 cv
180.472 63.0307 172.778 69.4882 172.778 80.041 cv
172.778 101.013 183.587 105.207 189.962 105.207 cv
196.336 105.207 207.145 101.012 207.145 80.041 cv
cp
.937255 .603922 .2 rgb
f
205.878 152.981 mo
217.041 113.552 li
217.041 109.939 214.307 105.956 210.935 104.658 cv
196.581 99.1299 li
196.581 80.0794 li
182.717 80.0794 li
182.717 99.1299 li
168.363 104.658 li
164.99 105.956 162.257 109.938 162.257 113.552 cv
173.42 152.981 li
205.878 152.981 li
cp
.917647 .717647 .580392 rgb
f
206.792 165.661 mo
217.041 114.868 li
217.041 110.925 214.307 106.579 210.935 105.162 cv
196.581 99.1299 li
193.373 104.799 189.592 107.412 189.592 107.412 cv
189.592 107.412 185.829 104.627 182.717 99.1299 cv
168.363 105.162 li
164.99 106.579 162.257 110.925 162.257 114.868 cv
173.343 165.661 li
206.792 165.661 li
.192157 .67451 1 rgb
f
187.038 220.52 mo
179.411 99.9323 li
168.205 104.247 li
164.682 105.604 161.817 109.778 161.817 113.552 cv
161.817 113.552 168.43 146.64 168.43 157.669 cv
168.43 167.706 160.688 191.1 160.015 204.567 cv
159.515 214.573 187.038 220.52 187.038 220.52 cv
.866667 .866667 .866667 rgb
f
219.27 207.497 mo
217.887 194.596 210.024 168.137 209.926 158.007 cv
209.818 146.735 218.031 114.284 218.031 114.284 cv
218.031 110.51 214.616 105.604 211.093 104.247 cv
199.887 99.9323 li
193.875 220.195 li
193.875 220.195 220.246 216.614 219.27 207.497 cv
f
182.717 94.0006 mo
185.525 97.3035 188.933 98.259 191.473 98.259 cv
192.973 98.259 194.777 97.923 196.581 96.9711 cv
196.581 83.1547 li
182.717 83.1548 li
182.717 94.0006 li
cp
.819608 .603922 .458824 rgb
f
204.436 106.525 mo
203.684 101.888 li
211.685 105.097 li
215.112 106.417 204.436 106.525 204.436 106.525 cv
cp
.956863 .956863 .956863 rgb
f
204.781 71.4175 mo
204.781 91.0396 195.459 94.964 189.962 94.964 cv
184.464 94.964 175.142 91.0396 175.142 71.4175 cv
175.142 61.5438 181.777 55.5018 189.962 55.5018 cv
198.146 55.5018 204.781 61.5438 204.781 71.4175 cv
cp
.956863 .764706 .635294 rgb
f
202.38 74.3122 mo
201.739 77.7256 202.495 80.7322 204.068 81.0276 cv
205.641 81.323 207.436 78.7952 208.077 75.3818 cv
208.718 71.9683 207.962 68.9617 206.389 68.6663 cv
204.816 68.371 203.021 70.8987 202.38 74.3122 cv
cp
f
184.541 181.049 mo
179.411 99.9323 li
176.611 101.01 li
175.008 110.889 li
177.161 114.982 li
173.756 118.607 li
184.541 181.049 li
.956863 .956863 .956863 rgb
f
205.278 119.041 mo
202.862 115.312 li
204.174 111.484 li
202.642 100.993 li
199.887 99.9322 li
195.921 179.262 li
205.278 119.041 li
cp
f
202.38 74.3122 mo
201.739 77.7256 202.495 80.7322 204.068 81.0276 cv
205.641 81.323 207.436 78.7952 208.077 75.3818 cv
208.718 71.9683 207.962 68.9617 206.389 68.6663 cv
204.816 68.371 203.021 70.8987 202.38 74.3122 cv
cp
.956863 .764706 .635294 rgb
f
189.66 107.412 mo
188.273 108.848 180.494 111.665 181.133 99.2649 cv
182.45 98.6036 182.662 98.3556 182.662 98.3556 cv
189.66 107.412 li
cp
.423529 .796078 1 rgb
f
189.592 107.412 mo
190.979 108.848 198.758 111.665 198.119 99.2649 cv
196.802 98.6036 196.59 98.3556 196.59 98.3556 cv
189.592 107.412 li
cp
f
189.962 52.8287 mo
181.777 52.8287 173.557 64.0904 173.557 70.6342 cv
180.717 72.0445 197.235 75.0233 200.5 61.2673 cv
200.659 60.597 203.434 63.7953 204.678 69.3508 cv
211.612 66.6186 196.338 52.8287 189.962 52.8287 cv
cp
.937255 .603922 .2 rgb
f
176.813 74.3122 mo
177.454 77.7256 176.698 80.7322 175.125 81.0276 cv
173.551 81.323 171.757 78.7952 171.116 75.3818 cv
170.475 71.9683 171.231 68.9617 172.804 68.6663 cv
174.377 68.371 176.172 70.8987 176.813 74.3122 cv
cp
.956863 .764706 .635294 rgb
f
207.649 78.8467 mo
210.333 78.8467 li
213.542 72.3933 209.072 64.5688 199.427 49.9355 cv
197.566 48.6952 178.639 43.3547 172.345 59.8586 cv
168.647 69.558 170.461 69.9136 170.461 69.9136 cv
170.461 69.9136 195.503 77.3823 199.427 59.0317 cv
199.766 57.4455 207.998 69.5458 207.649 78.8467 cv
cp
1 .690196 .282353 rgb
f
179.812 50.7293 mo
178.923 51.4708 172.521 59.6962 175.752 60.3556 cv
182.928 61.82 198.169 49.4785 194.817 48.2337 cv
192.829 47.4954 186.09 45.4939 179.812 50.7293 cv
cp
1 .756863 .462745 rgb
f
201.628 130.48 mo
201.628 124.607 li
213.346 124.607 li
213.346 130.48 li
201.628 130.48 li
cp
0 .243137 .301961 rgb
f
213.031 130.164 mo
201.944 130.164 li
201.944 124.922 li
213.031 124.922 li
213.031 130.164 li
cp
.956863 .956863 .956863 rgb
f
208.256 125.274 mo
206.719 125.274 li
206.719 123.982 li
208.256 123.982 li
208.256 125.274 li
cp
.717647 .741176 .741176 rgb
f
206.197 129.754 mo
202.686 129.754 li
202.686 125.435 li
206.197 125.435 li
206.197 129.754 li
cp
f
196.784 135.035 mo
194.22 132.043 192.487 126.492 192.473 120.114 cv
192.997 120.114 li
193.01 126.025 194.521 131.196 196.784 134.142 cv
196.784 135.035 li
cp
f
205.571 133.987 mo
207.767 131.015 209.221 125.917 209.234 120.114 cv
209.758 120.114 li
209.744 126.388 208.067 131.858 205.571 134.884 cv
205.571 133.987 li
cp
f
204.995 134.993 mo
204.995 135.199 205.162 135.366 205.368 135.366 cv
205.574 135.366 205.742 135.199 205.742 134.993 cv
205.742 133.873 li
205.742 133.667 205.574 133.5 205.368 133.5 cv
205.162 133.5 204.995 133.667 204.995 133.873 cv
204.995 134.993 li
cp
f
196.598 134.993 mo
196.598 135.199 196.765 135.366 196.971 135.366 cv
197.177 135.366 197.345 135.199 197.345 134.993 cv
197.345 133.873 li
197.345 133.667 197.177 133.5 196.971 133.5 cv
196.765 133.5 196.598 133.667 196.598 133.873 cv
196.598 134.993 li
cp
f
203.689 134.549 mo
203.689 134.923 203.992 135.226 204.365 135.226 cv
204.459 135.226 li
204.832 135.226 205.135 134.923 205.135 134.549 cv
205.135 134.176 204.832 133.873 204.459 133.873 cv
204.365 133.873 li
203.992 133.873 203.689 134.176 203.689 134.549 cv
cp
f
197.158 134.549 mo
197.158 134.923 197.461 135.226 197.834 135.226 cv
197.928 135.226 li
198.301 135.226 198.604 134.923 198.604 134.549 cv
198.604 134.176 198.301 133.873 197.928 133.873 cv
197.834 133.873 li
197.461 133.873 197.158 134.176 197.158 134.549 cv
cp
f
193.259 120.497 mo
193.26 120.234 li
193.281 111.216 196.805 103.878 201.116 103.878 cv
205.427 103.878 208.95 111.216 208.971 120.234 cv
208.971 120.497 li
210.022 120.497 li
210.022 120.233 li
210 110.564 206.005 102.697 201.116 102.697 cv
196.226 102.697 192.231 110.564 192.209 120.233 cv
192.208 120.497 li
193.259 120.497 li
cp
0 .243137 .301961 rgb
f
196.571 97.3778 mo
198.907 98.9635 200.685 101.112 201.593 103.587 cv
200.722 103.587 li
199.904 101.571 198.453 99.7961 196.571 98.4173 cv
196.571 97.3778 li
cp
f
177.9 130.459 mo
178.868 130.455 li
177.56 118.134 180.857 99.8348 182.73 98.4578 cv
182.73 97.4167 li
180.402 99.0015 176.992 113.552 177.9 130.459 cv
cp
f
178.411 141.35 mo
181.523 141.35 184.055 138.819 184.055 135.707 cv
184.055 132.596 181.523 130.064 178.411 130.064 cv
175.3 130.064 172.769 132.596 172.769 135.707 cv
172.769 138.819 175.3 141.35 178.411 141.35 cv
cp
f
183.685 135.707 mo
183.685 132.795 181.324 130.434 178.412 130.434 cv
175.499 130.434 173.138 132.795 173.138 135.707 cv
173.138 138.62 175.499 140.981 178.412 140.981 cv
181.324 140.981 183.685 138.62 183.685 135.707 cv
cp
.717647 .741176 .741176 rgb
f
179.692 135.707 mo
179.692 135 179.119 134.427 178.412 134.427 cv
177.704 134.427 177.131 135 177.131 135.707 cv
177.131 136.415 177.704 136.988 178.412 136.988 cv
179.119 136.988 179.692 136.415 179.692 135.707 cv
cp
.415686 .407843 .419608 rgb
f
176.21 136.676 mo
176.719 137.336 177.513 137.764 178.411 137.764 cv
179.31 137.764 180.104 137.336 180.613 136.676 cv
182.295 136.676 li
182.146 138.692 180.466 140.283 178.411 140.283 cv
176.357 140.283 174.677 138.692 174.527 136.676 cv
176.21 136.676 li
cp
.866667 .866667 .866667 rgb
f
192.585 81.1105 mo
192.132 81.7614 191.211 82.2081 190.145 82.2081 cv
189.078 82.2081 188.157 81.7614 187.704 81.1105 cv
192.585 81.1105 li
cp
.819608 .603922 .458824 rgb
f
168.43 157.669 mo
168.43 157.572 168.425 157.46 168.424 157.359 cv
168.428 157.359 li
168.429 157.464 168.43 157.568 168.43 157.669 cv
168.43 157.669 li
.854902 .866667 .870588 rgb
f
167.163 169.731 mo
167.91 164.871 168.43 160.482 168.43 157.669 cv
168.43 157.669 li
168.43 157.669 li
168.43 157.568 168.429 157.464 168.428 157.359 cv
180.433 157.265 li
181.453 163.171 li
181.713 169.713 li
167.163 169.731 li
.74902 .760784 .764706 rgb
f
181.453 163.171 mo
180.433 157.265 li
181.219 157.259 li
181.453 163.171 li
.823529 .831372 .835294 rgb
f
199.038 178.773 mo
172.648 182.917 li
166.589 144.334 li
192.979 140.189 li
199.038 178.773 li
cp
.411765 .270588 .168627 rgb
f
196.154 153.615 mo
194.572 154.249 191.596 156.057 190.619 154.917 cv
189.642 153.778 184.433 159.801 184.433 159.801 cv
182.48 165.01 li
182.48 165.01 194.2 165.661 197.273 164.384 cv
200.345 163.108 197.735 152.981 196.154 153.615 cv
cp
.917647 .717647 .580392 rgb
f
185.084 166.882 mo
187.148 166.447 186.236 156.08 183.375 156.626 cv
151.224 160.615 159.084 146.222 165.794 125.616 cv
166.766 122.632 170.008 105.312 167.46 104.581 cv
156.164 111.575 153.569 121.942 151.062 131.476 cv
145.502 152.614 142.271 169.568 185.084 166.882 cv
cp
.866667 .866667 .866667 rgb
f
167.269 105.597 mo
175.323 102.473 li
174.085 110.259 li
174.085 110.259 159.917 109.6 167.269 105.597 cv
cp
.956863 .956863 .956863 rgb
f
180.51 188.614 mo
180.51 188.614 182.138 213.358 179.859 213.032 cv
177.58 212.707 168.14 210.087 166.185 206.195 cv
164.23 202.303 168.139 193.498 168.139 193.498 cv
180.51 188.614 li
cp
f
211.111 197.287 mo
209.013 197.287 204.544 191.388 206.786 189.9 cv
209.456 185.436 211.572 181.473 213.228 177.88 cv
214.172 182.132 215.201 186.563 216.147 190.822 cv
214.768 192.926 213.258 195.04 211.578 197.161 cv
211.442 197.247 211.285 197.287 211.111 197.287 cv
.74902 .760784 .764706 rgb
f
208.684 187.062 mo
206.705 188.021 202.659 190.13 203.276 191.091 cv
204.086 192.354 201.499 194.685 200.437 196.018 cv
199.376 197.35 208.325 202.76 210.431 200.185 cv
211.507 198.869 212.748 195.251 213.706 192.023 cv
212.332 191.79 209.949 189.341 208.684 187.062 cv
cp
.917647 .717647 .580392 rgb
f
200.468 188.94 mo
200.468 188.94 199.084 213.683 201.363 213.358 cv
203.642 213.032 213.082 210.413 215.037 206.521 cv
216.992 202.629 213.084 193.823 213.084 193.823 cv
200.468 188.94 li
cp
.956863 .956863 .956863 rgb
f
214.324 191.955 mo
212.545 193.088 205.946 185.041 208.373 183.43 cv
225.862 154.185 220.975 151.01 214.265 130.404 cv
215.607 122.441 210.151 110.884 212.699 110.153 cv
212.679 105.345 li
221.956 110.72 222.118 116.643 225.618 125.86 cv
230.94 139.874 234.775 166.15 214.324 191.955 cv
cp
.866667 .866667 .866667 rgb
f
356.478 172.129 mo
334.916 179.339 li
313.823 173.01 li
313.823 173.01 312.385 186.638 312.385 200.228 cv
312.385 207.019 318.656 309.884 318.656 309.884 cv
329.23 309.618 li
333.567 200.688 li
333.628 200.631 li
335.839 200.617 li
340.908 310.984 li
352.108 311.171 li
352.108 311.171 357.957 203.832 358.346 198.955 cv
358.886 192.193 356.478 172.129 356.478 172.129 cv
cp
.247059 .368627 .466667 rgb
f
357.512 159.502 mo
370.767 108.03 li
370.767 103.368 367.185 98.2316 362.766 96.5566 cv
345.536 90.0246 li
345.536 62.5521 li
324.217 62.5521 li
324.217 90.0246 li
306.988 96.5564 li
302.569 98.2315 298.987 103.368 298.987 108.029 cv
312.241 159.502 li
357.512 159.502 li
cp
.917647 .717647 .580392 rgb
f
355.63 187.184 mo
370.168 107.744 li
370.168 103.011 366.621 97.7762 362.261 96.0752 cv
345.394 89.4479 li
334.613 113.365 li
324.362 89.447 li
307.493 96.0752 li
303.132 97.7757 299.585 103.01 299.585 107.743 cv
314.124 187.184 li
355.63 187.184 li
cp
.192157 .67451 1 rgb
f
335.051 76.1673 mo
333.403 76.1673 331.85 75.9197 330.424 75.5323 cv
331.061 74.6317 332.415 74.3727 335.154 74.3727 cv
337.84 74.3727 339.194 74.6246 339.846 75.4816 cv
338.36 75.8982 336.746 76.1673 335.051 76.1673 cv
cp
1 .690196 .282353 rgb
f
350.423 57.4552 mo
350.423 78.9444 340.818 82.4571 335.153 82.4571 cv
329.489 82.4571 319.884 78.2901 319.884 57.4552 cv
319.884 46.9712 326.72 40.5557 335.153 40.5557 cv
343.586 40.5557 350.423 46.9712 350.423 57.4552 cv
cp
.996078 .819608 .666667 rgb
f
321.735 61.3607 mo
322.354 64.6573 321.625 67.5609 320.105 67.8462 cv
318.586 68.1314 316.853 65.6903 316.234 62.3937 cv
315.615 59.0971 316.345 56.1935 317.864 55.9083 cv
319.383 55.623 321.117 58.0642 321.735 61.3607 cv
cp
f
348.308 61.3607 mo
347.689 64.6573 348.419 67.5609 349.939 67.8462 cv
351.458 68.1314 353.191 65.6903 353.81 62.3937 cv
354.429 59.0971 353.699 56.1935 352.18 55.9083 cv
350.661 55.623 348.927 58.0642 348.308 61.3607 cv
cp
f
324.325 80.237 mo
325.221 86.8329 330.052 90.0745 336.462 90.0745 cv
340.537 90.0745 343.408 88.9358 345.536 86.8539 cv
345.536 81.3329 li
324.325 80.237 li
cp
.819608 .603922 .458824 rgb
f
335.051 76.4126 mo
333.403 76.4126 331.85 76.165 330.424 75.7777 cv
331.061 74.877 332.415 74.618 335.154 74.618 cv
337.84 74.618 339.194 74.8699 339.846 75.7269 cv
338.36 76.1435 336.746 76.4126 335.051 76.4126 cv
cp
341.978 75.0028 mo
341.659 72.8245 340.221 71.5441 335.154 71.5441 cv
330.031 71.5441 328.619 72.8543 328.322 75.0784 cv
322.42 75.0784 319.726 59.0109 319.726 59.0109 cv
319.639 75.4185 322.222 86.7213 335.153 86.7213 cv
348.654 86.7213 351.699 71.6564 350.423 57.7005 cv
350.423 57.7005 348.509 75.0028 341.978 75.0028 cv
cp
.278431 .278431 .278431 rgb
f
348.971 50.9559 mo
349.085 50.8309 349.174 50.7003 349.281 50.5736 cv
347 44.238 341.538 40.5557 335.153 40.5557 cv
329.181 40.5557 324.023 43.7856 321.514 49.3873 cv
321.732 49.7057 321.985 49.9925 322.301 50.2091 cv
325.586 52.4619 342.476 58.0724 348.971 50.9559 cv
cp
.917647 .717647 .580392 rgb
f
321.531 49.3174 mo
318.198 47.2347 320.046 39.6102 328.496 37.5547 cv
339.169 34.9587 348.57 40.996 348.425 34.5059 cv
351.598 36.525 354.851 44.2565 349.077 50.0202 cv
342.368 56.7165 324.924 51.4372 321.531 49.3174 cv
cp
.278431 .278431 .278431 rgb
f
366.064 218.532 mo
366.064 181.713 370.865 107.218 370.865 107.218 cv
370.865 102.454 367.247 97.1842 362.801 95.4719 cv
347.477 89.5282 li
347.477 89.5282 340.44 175.188 354.5 183.436 cv
356.02 224.956 366.064 224.671 366.064 218.532 cv
cp
.866667 .866667 .866667 rgb
f
354.36 112.681 mo
351.841 104.838 li
353.821 103.572 li
352.502 91.16 li
352.502 91.16 347.685 87.8676 347.477 89.2001 cv
343.166 116.788 346.126 150.605 346.126 150.605 cv
354.36 112.681 li
cp
.956863 .956863 .956863 rgb
f
339.199 41.8956 mo
325.871 42.4804 320.961 49.3961 320.961 45.6443 cv
320.961 41.8926 325.751 38.3522 331.658 37.7367 cv
337.566 37.1211 342.947 41.7312 339.199 41.8956 cv
cp
.376471 .376471 .376471 rgb
f
363.09 96.0619 mo
353.514 92.6581 li
354.535 98.0416 li
359.331 97.7088 365.569 97.0908 363.09 96.0619 cv
cp
.964706 .968627 .960784 rgb
f
351.93 122.493 mo
351.93 116.568 li
363.75 116.568 li
363.75 122.493 li
351.93 122.493 li
cp
0 .243137 .301961 rgb
f
363.432 122.174 mo
352.248 122.174 li
352.248 116.886 li
363.432 116.886 li
363.432 122.174 li
cp
.956863 .956863 .956863 rgb
f
358.615 117.241 mo
357.065 117.241 li
357.065 115.938 li
358.615 115.938 li
358.615 117.241 li
cp
.717647 .741176 .741176 rgb
f
356.538 121.76 mo
352.996 121.76 li
352.996 117.404 li
356.538 117.404 li
356.538 121.76 li
cp
f
330.57 319.75 mo
330.57 321.646 328.384 323.183 325.687 323.183 cv
322.431 323.183 li
319.734 323.183 317.547 321.646 317.547 319.75 cv
317.547 312.425 li
317.547 310.529 319.734 310.22 322.431 310.22 cv
325.687 310.22 li
328.384 310.22 330.57 310.529 330.57 312.425 cv
330.57 319.75 li
cp
0 .243137 .380392 rgb
f
330.57 317.773 mo
330.57 319.193 328.384 320.345 325.687 320.345 cv
322.431 320.345 li
319.734 320.345 317.547 319.193 317.547 317.773 cv
317.547 312.286 li
317.547 310.865 319.734 307.812 322.431 307.812 cv
325.687 307.812 li
328.384 307.812 330.57 310.865 330.57 312.286 cv
330.57 317.773 li
cp
.866667 .866667 .866667 rgb
f
353.061 319.75 mo
353.061 321.646 350.874 323.183 348.177 323.183 cv
344.921 323.183 li
342.224 323.183 340.038 321.646 340.038 319.75 cv
340.038 312.425 li
340.038 310.529 342.224 310.22 344.921 310.22 cv
348.177 310.22 li
350.874 310.22 353.061 310.529 353.061 312.425 cv
353.061 319.75 li
cp
0 .243137 .380392 rgb
f
353.061 317.773 mo
353.061 319.193 350.874 320.345 348.177 320.345 cv
344.921 320.345 li
342.224 320.345 340.038 319.193 340.038 317.773 cv
340.038 312.286 li
340.038 310.865 342.224 307.812 344.921 307.812 cv
348.177 307.812 li
350.874 307.812 353.061 310.865 353.061 312.286 cv
353.061 317.773 li
cp
.866667 .866667 .866667 rgb
f
362.964 127.532 mo
365.431 148.067 361.78 152.66 353.141 181.602 cv
353.016 181.683 352.908 181.807 352.807 181.949 cv
353.335 182.576 353.897 183.082 354.5 183.436 cv
354.734 189.819 355.17 195.211 355.739 199.748 cv
360.095 195.245 363.74 190.832 366.781 186.528 cv
367.535 165.842 368.736 143.282 369.641 127.532 cv
362.964 127.532 li
cp
.717647 .741176 .741176 rgb
f
362.543 189.354 mo
360.513 190.627 352.322 179.988 355.095 178.183 cv
366.99 149.289 369.142 148.593 362.91 127.066 cv
364.847 118.584 361.211 101.345 364.067 100.466 cv
364.28 96.1935 li
374.219 101.498 374.1 106.945 377.438 116.552 cv
382.514 131.162 389.868 155.236 362.543 189.354 cv
cp
.866667 .866667 .866667 rgb
f
346.341 191.385 mo
349.314 193.282 352.275 195.21 355.408 196.876 cv
356.4 195.02 359.843 190.46 360.73 187.995 cv
359.226 187.804 356.734 185.312 355.467 182.953 cv
353.227 184.049 349.137 185.25 348.538 186.257 cv
347.355 188.247 347.012 190.5 346.341 191.385 cv
cp
.917647 .717647 .580392 rgb
f
303.901 218.532 mo
303.901 181.713 299.101 107.218 299.101 107.218 cv
299.101 102.454 302.718 97.1842 307.164 95.4719 cv
322.489 89.5282 li
322.489 89.5282 329.525 175.188 315.465 183.436 cv
313.945 224.956 303.901 224.671 303.901 218.532 cv
cp
.866667 .866667 .866667 rgb
f
315.606 112.681 mo
318.124 104.838 li
316.144 103.572 li
317.463 91.16 li
317.463 91.16 322.28 87.8676 322.489 89.2001 cv
326.799 116.788 323.84 150.605 323.84 150.605 cv
315.606 112.681 li
cp
.956863 .956863 .956863 rgb
f
306.875 96.0619 mo
316.451 92.6581 li
315.43 98.0416 li
310.634 97.7088 304.397 97.0908 306.875 96.0619 cv
cp
.964706 .968627 .960784 rgb
f
307.001 127.532 mo
304.534 148.067 308.185 152.66 316.824 181.602 cv
316.949 181.683 317.057 181.807 317.158 181.949 cv
316.63 182.576 316.069 183.082 315.465 183.436 cv
315.231 189.819 314.796 195.211 314.227 199.748 cv
309.871 195.245 306.225 190.832 303.184 186.528 cv
302.43 165.842 301.229 143.282 300.324 127.532 cv
307.001 127.532 li
cp
.717647 .741176 .741176 rgb
f
307.422 189.354 mo
309.452 190.627 317.643 179.988 314.87 178.183 cv
302.975 149.289 300.823 148.593 307.055 127.066 cv
305.118 118.584 308.754 101.345 305.898 100.466 cv
305.685 96.1935 li
295.747 101.498 295.865 106.945 292.527 116.552 cv
287.451 131.162 280.097 155.236 307.422 189.354 cv
cp
.866667 .866667 .866667 rgb
f
323.624 191.385 mo
320.652 193.282 317.69 195.21 314.557 196.876 cv
313.565 195.02 310.122 190.46 309.235 187.995 cv
310.739 187.804 313.231 185.312 314.498 182.953 cv
316.738 184.049 320.828 185.25 321.427 186.257 cv
322.61 188.247 322.954 190.5 323.624 191.385 cv
cp
.917647 .717647 .580392 rgb
f
323.98 129.188 mo
326.844 125.846 328.78 119.646 328.796 112.522 cv
328.21 112.522 li
328.195 119.124 326.508 124.901 323.98 128.191 cv
323.98 129.188 li
cp
.717647 .741176 .741176 rgb
f
314.165 128.018 mo
311.713 124.698 310.088 119.004 310.073 112.522 cv
309.488 112.522 li
309.504 119.529 311.378 125.64 314.165 129.019 cv
314.165 128.018 li
cp
f
314.809 129.141 mo
314.809 129.371 314.622 129.558 314.392 129.558 cv
314.162 129.558 313.975 129.371 313.975 129.141 cv
313.975 127.89 li
313.975 127.66 314.162 127.473 314.392 127.473 cv
314.622 127.473 314.809 127.66 314.809 127.89 cv
314.809 129.141 li
cp
f
324.188 129.141 mo
324.188 129.371 324.001 129.558 323.771 129.558 cv
323.541 129.558 323.354 129.371 323.354 129.141 cv
323.354 127.89 li
323.354 127.66 323.541 127.473 323.771 127.473 cv
324.001 127.473 324.188 127.66 324.188 127.89 cv
324.188 129.141 li
cp
f
316.268 128.646 mo
316.268 129.063 315.929 129.401 315.512 129.401 cv
315.408 129.401 li
314.991 129.401 314.652 129.063 314.652 128.646 cv
314.652 128.229 314.991 127.89 315.408 127.89 cv
315.512 127.89 li
315.929 127.89 316.268 128.229 316.268 128.646 cv
cp
f
323.562 128.646 mo
323.562 129.063 323.224 129.401 322.807 129.401 cv
322.703 129.401 li
322.285 129.401 321.947 129.063 321.947 128.646 cv
321.947 128.229 322.285 127.89 322.703 127.89 cv
322.807 127.89 li
323.224 127.89 323.562 128.229 323.562 128.646 cv
cp
f
327.917 112.95 mo
327.916 112.656 li
327.893 102.583 323.957 94.3877 319.142 94.3877 cv
314.327 94.3877 310.391 102.583 310.368 112.656 cv
310.367 112.95 li
309.193 112.95 li
309.194 112.655 li
309.218 101.855 313.681 93.0679 319.142 93.0679 cv
324.603 93.0679 329.066 101.855 329.09 112.655 cv
329.091 112.95 li
327.917 112.95 li
cp
0 .243137 .301961 rgb
f
345.536 87.1396 mo
345.536 88.3024 li
347.628 89.8405 351.311 110.28 349.849 124.042 cv
350.931 124.046 li
351.945 105.162 348.136 88.9096 345.536 87.1396 cv
cp
324.217 88.2878 mo
322.116 89.8279 320.495 91.8101 319.581 94.0619 cv
318.608 94.0619 li
319.623 91.2972 321.608 88.898 324.217 87.1267 cv
324.217 88.2878 li
cp
f
350.359 136.211 mo
346.884 136.211 344.056 133.384 344.056 129.909 cv
344.056 126.433 346.884 123.606 350.359 123.606 cv
353.835 123.606 356.662 126.433 356.662 129.909 cv
356.662 133.384 353.835 136.211 350.359 136.211 cv
cp
f
344.469 129.909 mo
344.469 126.655 347.106 124.018 350.359 124.018 cv
353.612 124.018 356.25 126.655 356.25 129.909 cv
356.25 133.162 353.612 135.799 350.359 135.799 cv
347.106 135.799 344.469 133.162 344.469 129.909 cv
cp
.717647 .741176 .741176 rgb
f
348.929 129.909 mo
348.929 129.119 349.569 128.478 350.359 128.478 cv
351.149 128.478 351.79 129.119 351.79 129.909 cv
351.79 130.699 351.149 131.339 350.359 131.339 cv
349.569 131.339 348.929 130.699 348.929 129.909 cv
cp
.415686 .407843 .419608 rgb
f
352.818 130.99 mo
352.25 131.728 351.362 132.206 350.359 132.206 cv
349.356 132.206 348.468 131.728 347.901 130.99 cv
346.021 130.99 li
346.188 133.243 348.064 135.019 350.359 135.019 cv
352.654 135.019 354.531 133.243 354.698 130.99 cv
352.818 130.99 li
cp
.866667 .866667 .866667 rgb
f
239.508 241.723 mo
238.737 241.707 237.964 241.693 237.192 241.677 cv
239.206 263.154 240.876 280.352 242.42 296.096 cv
242.557 297.502 242.947 303.955 243.07 305.199 cv
243.181 306.334 241.15 312.416 241.247 313.402 cv
241.743 318.443 244.11 320.008 244.11 320.008 cv
257.43 320.881 li
258.754 314.613 li
257.702 307.788 li
259.063 242.102 li
252.543 241.984 246.024 241.858 239.508 241.723 cv
cp
f
264.874 242.201 mo
267.916 308.436 li
266.572 314.393 li
268.471 320.535 li
280.435 320.734 li
280.435 320.734 282.693 318.84 283.151 313.766 cv
283.275 312.398 281.39 305.675 281.539 304.026 cv
282.936 288.539 285.411 265.583 287.496 242.509 cv
279.955 242.439 272.414 242.327 264.874 242.201 cv
cp
f
296.295 106.778 mo
294.932 103.912 292.514 101.419 289.75 100.354 cv
273.13 93.9541 li
273.13 67.0356 li
252.565 67.0356 li
252.565 93.9541 li
235.945 100.354 li
233.181 101.419 230.763 103.912 229.4 106.778 cv
262.479 120.745 li
296.295 106.778 li
cp
.886275 .603922 .34902 rgb
f
279.883 61.7387 mo
279.883 84.9832 269.167 89.6321 262.848 89.6321 cv
256.528 89.6321 245.812 84.9832 245.812 61.7387 cv
245.812 50.0422 253.439 42.8849 262.848 42.8849 cv
272.256 42.8849 279.883 50.0422 279.883 61.7387 cv
.937255 .686275 .415686 rgb
f
249.078 66.0959 mo
249.768 69.7738 248.954 73.0131 247.259 73.3315 cv
245.564 73.6496 243.63 70.9262 242.94 67.2484 cv
242.249 63.5705 243.063 60.3311 244.758 60.0129 cv
246.453 59.6947 248.387 62.4182 249.078 66.0959 cv
f
276.625 66.096 mo
275.935 69.7738 276.749 73.0132 278.444 73.3314 cv
280.139 73.6496 282.073 70.9262 282.763 67.2484 cv
283.454 63.5706 282.639 60.3311 280.944 60.0129 cv
279.249 59.6947 277.316 62.4181 276.625 66.096 cv
cp
f
245.819 39.7246 mo
245.819 59.9982 li
252.999 48.7892 273.074 50.6695 279.821 59.7992 cv
279.821 39.2382 li
273.072 30.0834 252.998 28.5168 245.819 39.7246 cv
.0862745 .768627 .701961 rgb
f
291.131 256.227 mo
291.131 238.173 290.999 196.113 293.449 161.928 cv
295.437 134.195 300.104 111.596 300.104 111.596 cv
300.104 107.001 296.36 101.918 291.757 100.266 cv
273.95 93.8309 li
262.569 117.055 li
251.747 93.83 li
233.939 100.266 li
229.336 101.917 225.591 107 225.591 111.596 cv
225.591 111.596 229.728 129.52 231.872 162.488 cv
233.837 192.705 233.826 237.27 233.826 256.131 cv
233.826 264.436 291.131 264.217 291.131 256.227 cv
cp
f
262.547 33.6321 mo
256.397 33.6146 250.264 35.7271 246.999 40.5103 cv
246.999 46.0516 li
262.547 33.6321 li
cp
.160784 .839216 .756863 rgb
f
271.804 102.466 mo
274.564 95.0684 li
291.39 101.148 li
295.353 102.571 271.804 102.466 271.804 102.466 cv
cp
f
234.304 101.149 mo
251.118 95.073 li
256.619 106.758 li
256.619 106.758 219.893 108.219 234.304 101.149 cv
cp
f
279.802 59.7762 mo
273.059 50.6946 253.117 48.8138 245.888 59.8996 cv
245.886 59.9367 li
245.886 59.9367 259.746 47.3139 279.802 59.7762 cv
.886275 .603922 .34902 rgb
f
252.565 70.4129 mo
252.565 85.3412 li
255.707 90.5918 259.943 92.7986 262.848 93.3175 cv
265.752 93.8364 269.989 93.4705 273.13 89.5351 cv
273.13 74.0864 li
262.847 69.6627 li
252.565 70.4129 li
cp
.839216 .498039 .262745 rgb
f
245.819 59.1879 mo
245.076 59.9884 li
247.674 70.4999 li
248.185 68.7618 li
245.819 59.1879 li
cp
.905882 .917647 .882353 rgb
f
279.82 59.1879 mo
280.563 59.9884 li
277.965 70.4999 li
277.454 68.7618 li
279.82 59.1879 li
cp
f
275.016 65.9444 mo
274.362 65.9444 267.859 65.9326 267.087 65.9326 cv
266.315 65.9326 262.186 59.2682 266.985 59.2682 cv
267.817 59.2682 276.01 59.2682 276.01 59.2682 cv
277.734 59.2682 275.669 65.9444 275.016 65.9444 cv
258.346 65.9326 mo
257.573 65.9326 251.071 65.9444 250.417 65.9444 cv
249.764 65.9444 247.699 59.2682 249.423 59.2682 cv
249.423 59.2682 257.616 59.2682 258.448 59.2682 cv
263.246 59.2682 259.118 65.9326 258.346 65.9326 cv
277.556 58.9491 mo
277.471 58.6593 277.295 58.4747 276.975 58.4747 cv
276.975 58.4747 267.265 58.4747 266.22 58.4747 cv
265.312 58.4747 263.937 59.0689 262.716 59.0689 cv
261.496 59.0689 260.121 58.4747 259.213 58.4747 cv
258.168 58.4747 248.458 58.4747 248.458 58.4747 cv
248.137 58.4747 247.962 58.6593 247.877 58.9491 cv
244.898 58.9491 li
244.898 59.9292 li
247.865 59.9292 li
248.211 62.1737 249.397 66.2339 249.992 66.2339 cv
258.317 66.2339 li
259.288 66.2339 260.707 64.2718 261.23 63.0231 cv
261.553 62.2507 262.227 61.9143 262.716 61.9143 cv
263.205 61.9143 263.88 62.2507 264.203 63.0231 cv
264.726 64.2718 266.145 66.2339 267.116 66.2339 cv
275.441 66.2339 li
276.036 66.2339 277.222 62.1737 277.568 59.9292 cv
280.534 59.9292 li
280.534 58.9491 li
277.556 58.9491 li
0 .243137 .301961 rgb
f
250.417 65.9444 mo
249.948 65.9444 248.752 62.5048 248.752 60.5634 cv
248.752 59.8 248.936 59.2682 249.423 59.2682 cv
249.423 59.2682 257.616 59.2682 258.448 59.2682 cv
260.153 59.2682 260.731 60.1103 260.733 61.1958 cv
260.735 63.1641 258.843 65.9326 258.346 65.9326 cv
257.573 65.9326 251.071 65.9444 250.417 65.9444 cv
.929412 .756863 .556863 rgb
f
275.016 65.9444 mo
274.362 65.9444 267.859 65.9326 267.087 65.9326 cv
266.589 65.9326 264.697 63.1641 264.7 61.1958 cv
264.701 60.1103 265.279 59.2682 266.985 59.2682 cv
267.817 59.2682 276.01 59.2682 276.01 59.2682 cv
276.496 59.2682 276.681 59.8 276.681 60.5634 cv
276.681 62.5048 275.485 65.9444 275.016 65.9444 cv
f
278.224 68.7862 mo
262.846 65.3493 li
247.472 68.7862 li
247.991 73.749 249.415 80.9133 249.415 80.9133 cv
253.078 87.665 258.984 89.6321 262.848 89.6321 cv
266.712 89.6321 272.617 88.111 276.28 81.5266 cv
276.28 81.5266 277.711 73.6825 278.224 68.7862 cv
cp
.905882 .917647 .882353 rgb
f
262.846 66.0816 mo
262.846 72.7531 li
262.846 72.7531 250.323 75.7747 248.359 69.467 cv
262.846 66.0816 li
cp
.964706 .968627 .960784 rgb
f
273.347 126.163 mo
273.347 119.835 li
285.972 119.835 li
285.972 126.163 li
273.347 126.163 li
cp
0 .243137 .301961 rgb
f
285.632 125.823 mo
273.687 125.823 li
273.687 120.175 li
285.632 120.175 li
285.632 125.823 li
cp
.956863 .956863 .956863 rgb
f
280.487 120.553 mo
278.831 120.553 li
278.831 119.162 li
280.487 119.162 li
280.487 120.553 li
cp
.717647 .741176 .741176 rgb
f
278.269 125.381 mo
274.486 125.381 li
274.486 120.727 li
278.269 120.727 li
278.269 125.381 li
cp
f
257.43 328.853 mo
257.43 330.879 255.095 332.52 252.214 332.52 cv
248.737 332.52 li
245.856 332.52 243.52 330.879 243.52 328.853 cv
243.52 321.03 li
243.52 319.005 245.856 318.675 248.737 318.675 cv
252.214 318.675 li
255.095 318.675 257.43 319.005 257.43 321.03 cv
257.43 328.853 li
cp
0 .243137 .380392 rgb
f
257.43 326.742 mo
257.43 328.259 255.095 329.489 252.214 329.489 cv
248.737 329.489 li
245.856 329.489 243.52 328.259 243.52 326.742 cv
243.52 320.881 li
243.52 319.364 245.856 316.102 248.737 316.102 cv
252.214 316.102 li
255.095 316.102 257.43 319.364 257.43 320.881 cv
257.43 326.742 li
cp
.247059 .368627 .466667 rgb
f
281.452 328.853 mo
281.452 330.879 279.117 332.52 276.236 332.52 cv
272.758 332.52 li
269.878 332.52 267.542 330.879 267.542 328.853 cv
267.542 321.03 li
267.542 319.005 269.878 318.675 272.758 318.675 cv
276.236 318.675 li
279.117 318.675 281.452 319.005 281.452 321.03 cv
281.452 328.853 li
cp
0 .243137 .380392 rgb
f
281.452 326.742 mo
281.452 328.259 279.117 329.489 276.236 329.489 cv
272.758 329.489 li
269.878 329.489 267.542 328.259 267.542 326.742 cv
267.542 320.881 li
267.542 319.364 269.878 316.102 272.758 316.102 cv
276.236 316.102 li
279.117 316.102 281.452 319.364 281.452 320.881 cv
281.452 326.742 li
cp
.247059 .368627 .466667 rgb
f
225.875 112.434 mo
225.843 112.539 225.81 112.653 225.777 112.76 cv
226.608 118.012 230.031 140.416 232.137 165.515 cv
248.054 163.402 283.44 153.382 288.271 151.918 cv
287.047 145.999 275.367 140.89 275.367 140.89 cv
275.367 140.89 236.554 144.494 236.758 141.432 cv
236.962 138.371 238.948 121.775 238.948 121.775 cv
225.875 112.434 li
cp
.054902 .686275 .611765 rgb
f
225.875 109.372 mo
220.927 125.736 212.56 158.186 219.09 162.268 cv
225.621 166.349 275.76 152.667 282.495 150.626 cv
281.271 144.708 275.153 142.785 275.153 142.785 cv
275.153 142.785 233.172 148.594 233.376 145.532 cv
233.581 142.471 239.295 120.429 239.295 120.429 cv
225.875 109.372 li
cp
.0862745 .768627 .701961 rgb
f
299.744 112.434 mo
299.776 112.539 299.81 112.653 299.842 112.76 cv
299.012 118.012 295.097 143.798 292.991 168.897 cv
277.074 166.784 250.118 151.091 245.287 149.627 cv
246.511 143.708 248.47 141.554 248.47 141.554 cv
248.47 141.554 290.406 151.451 290.202 148.39 cv
289.998 145.328 286.671 121.775 286.671 121.775 cv
299.744 112.434 li
cp
.054902 .686275 .611765 rgb
f
299.744 109.372 mo
304.693 125.736 313.06 158.186 306.529 162.268 cv
299.999 166.349 253.717 150.363 246.982 148.323 cv
248.206 142.404 249.467 137.241 249.467 137.241 cv
249.467 137.241 289.919 145.759 292.224 146.231 cv
294.898 146.779 292.126 142.806 286.325 120.429 cv
299.744 109.372 li
cp
.0862745 .768627 .701961 rgb
f
250.259 138.987 mo
251.099 139.557 286.755 145.845 293.461 146.54 cv
314.151 156.277 267.852 148.507 250.259 138.987 cv
cp
.160784 .839216 .756863 rgb
f
301.942 142.047 mo
296.428 137.357 290.612 137.165 290.612 137.165 cv
290.229 135.608 li
288.236 135.474 275.153 142.785 275.153 142.785 cv
275.153 142.785 294.449 145.845 298.622 148.192 cv
300.51 149.254 305.042 144.683 301.942 142.047 cv
cp
.956863 .956863 .956863 rgb
f
290.879 137.687 mo
296.461 140.057 302.326 145.03 302.196 143.498 cv
302.065 141.966 296.92 138.069 290.879 137.687 cv
cp
1 1 1 rgb
f
243.454 134.258 mo
238.973 135.33 li
238.973 135.33 238.079 134.849 235.497 135.446 cv
234.603 139.229 233.905 142.43 233.836 143.464 cv
233.828 143.588 233.893 143.698 234.019 143.794 cv
239.371 143.419 247.58 145.504 247.58 145.504 cv
249.467 137.241 li
249.467 137.241 245.408 134.671 243.454 134.258 cv
cp
.956863 .956863 .956863 rgb
f
235.246 136.256 mo
235.106 136.852 234.972 137.43 234.845 137.986 cv
237.055 137.343 239.681 136.624 242.148 136.311 cv
239.735 135.791 237.313 135.879 235.246 136.256 cv
cp
1 1 1 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.0.0
%%For: (Anton) ()
%%Title: (1604.m00.i125.n014.S.c12.400488715 Medical team. Hospital staff vector illustration.eps)
%%CreationDate: 4/21/2016 12:52 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj27oehI#N^9?l#LH)&jf[X9X"/(eX'Epe<H,,LELh&8nqfk:e^\qG*Fa%s@6F53:aNiI/#V4F_Xa/HseT^Eqg4NG6hE!*m
%s1=fC3drD+/Lr&opn4_gr84&,cg#kbhG>^UVo!WLO^".*PsMb-lL/oNQ!1@mCcC)(hK#LgZeW]>QVZP/EoqePd:iQF.5]241O(7]
%W=ClPNS6k6gFW(TDU'H!F%?hVm_MiK!IcB*GIZ</d!i+SLWMg=2"'5LJiP)Al+_q5T0->*ns'$nP;`?)n6:>34MecIrj2+ckPNn+
%IadCepM6=?\(n0r>;4EE7_jK]n7AIr4"_$^I@a4]D?V-ZpG:I@@V2NjO<-RH_B]9_BBfHk0B#EOn@u'?s2WAR5N-6:j('ErZb'GY
%0l1ac![\V/D<hGFa8cKKTLn/2*n6XL7_)kNFP8W\&:OU'j,[V9^^]>ZZZE:=agtC3!]QljqGROlQYmb;^\4F/qeJ4`XB)LT\f/cf
%DL]G#5JX.J0cXb=nD9g8lb78eqljYe;8>`TDHCT_=CV4'7\`X*2c`I6Fc1lmpS?@F>&?2&LkFfJDh[)^*&P.I5ANfL64^BNWO35i
%DePkJ+^ji__B$]'cOVc3+A\cS#EVadqSH"4#CJ`%fgF!M!dX3UlR2AVEn1Jk]!ftMqm9S2`e<[2)4uE*)KNR^0*qUBWPZOLrE:_A
%]<Dg(gBJ$f\a=ebHG*<1[[W)(*r]<@_'FOa)XS4:D>XWe#@.a!H7]7ZI+a5Zl7MAt5QCJ@^[ht[)[#m+Bt$7hCpoAYs7sE`I'nB%
%bIjfSqX#on[$oZ.q?DH)cRaHaD#9FV>+Zc@s'3D?Pf5?76jG^!;)Wlqi@h")^C]pf')tu4=5:geT^QR,>e/_%J&12RcapLmIgaTN
%TCD^pJ#@Q5GTB1MgqbAYZ?\Vn0@,O=V?AM>l:&L,f7D9;c]]77CVBD9enB8Hr:"3ngo=uCQFi\EF4kDp>NKaW^A,[Hgk:GkT05[h
%a$>sRAJc<[#<kPsM6M+97c(0FJD$0<6;gMs\=s'bUPGdB["Jf+(gj*XWn]fBSPj6'Hb[9\_W(l8A+6r7gIHV+6`$4(rm0_(]2A#S
%BjO-P`S>g/JrJsM[5IPXd@@`tpdhKL1&+0+eE@d(?\hD"En%/7/T?hM_it=gM'eO/J,?WkCT#,jh&Z,_1C*;jj4?6EG%(bC]:fNb
%g]aEEUd/M1gZB(p5UGoQrZ*MF)ZSCA$S?We>>q3>';Q-$Ze)N:Q5bh[8[mJ8X]Ku?!c16\L,.@81oSoF%qUn0jmg:.SMT/&!inYX
%1;$3k;Rdm\k\lM`N#ICO*"!Z'at(.O>5*B;E3aa*:_\lt3E$UAU*m9RXb6RmN[gROB)f&T^N,drWZQB,h0SGi`IgR,>]52XS_5+7
%q_^:T6ulLBW8.'3YkF._"_oOZS7q`NnV5G24:QE=k+ucUB!W9lQGVW7pYS(:&$V+T_SbSYAf:So\%VGI]E%e5W`RQG06_nPnC:-C
%iP3W,$bjj%Sp'EiK748gJgG)tmrlmlD(;IV7^ZH9;%#JWE3n)U^Vh5mT4kaNQOC[9mbH,NgkSX/-cnhBb)LsiF]ti<SG(9Cf.&_i
%)9a4>\2;aZq5[ihT;G_MDKf*=8[FYR.@0MqlB]dD+3Fkr>eHe@iYD$U;lhRuqPmSah`M%,Bn`";AWF,-`Pnm[=&UX_)bi+#Sqg<e
%%KDDO>Vsc@'9W5ZpLjQ@;5JI+:@M0uDFW.OPq:"jGTEnPF/RG>s/;dQ6*p*HO_N*=(GG*QgoG:6CYoAIbqtT)W;T^J%Opo,`H>t0
%5pMAP%NAa)Ea%l/IN<7>MjMqgFr7DW6\gNL.>?#l.hInFE3TnR*F'jHN/:?M_j-m.^HLd]C/<O98tj4-Bs^uXg,Z+g3_qRZf3r%B
%6I+D$@i=Z/X]l!j/&b]OVH:tp`HJT:mZD"GJmJB&/BF-iGQJCK[H#KRgp<Kejifm"\S(Y4G]n,qg!,%[GMFd&hpQc&Y4lPI[nB#S
%f?h!"&P/>%G&u8Qmb5ok]=D]9GO9"u[8U*1dp:BRH7tP62;6>=MEgQ,%&H>50SRY5eE?OkcMJ/6#:*!<#kN"?h<)0g10mC3^0>B]
%J#'=,JH-VQkbN3PJW>[kZ)rs]nC,Oq^D6MP^K3*`pYn'Ya#)Q_2S?&4p,\1Z.g=?Nj[KFFVGf#pDL,<@lIJ"UEghWtEj])k7*lXK
%MORoi8Qt9hPd-tJ+H9AfXfcCZ(F_`c5N0[:C%<&b.G=^#<`j8;<W8CqH/L(DbMAC(-+CNBmm"d3NbTr@r"RuTlFc.6!j>k.%%7:2
%ac_DHN5er^\5[7ap"&pSIY.&M[;s$H8lcdGYLJ7T\*D4;fU,i\5Mt[pQ=n"b5AH]]37flgQ>S]]IurTbM=sqB[3'P&=dU\oB/[Na
%pr1_QT\$62>D;[R2;L#1-(.Iho3XOt3V=!!8f/H#)4W(WY+o*g#;W2S$=&VDY)+u+D:i)D=cai'GAW"!MRAs7.Fs'0VKiVb#jgmb
%kps_u_:a+U",SnVl!D8Q\4Whg>hp=@h0T+.=mMt?@K+eLni@g[>Z-Ab7`es_::G#pP8\?$<M&.>/EUTdo/#J')=m5[6V_VGCjq*Y
%Oj!Bh+VSqW.C*fmUh'+5F)Hr7`oRp)XSKEsr7lOGDEL-BSt?s_V7ZQ6nbh0eIVsNrA#f-Aj)\6W5<#1+)ilPF>!G1lUq,E-D>6?g
%MPa\_Uo;tp)g%.W2;/9_/WF2&CjoCMqFMF<04%lc0@`FBC^&!LVc_gF"'=X=V.HR3GY>E8i`0^L/%/[?hmCg&MifAblD82n#;[)<
%@g64!l.0UO'i9"[(%=]X-gd0@old+]?g6.A/+%5bFmb+(4ENIlSc),OUh1inQ:f!<j(IuYffX^AO.Qk+j;Q(bKV.8JXo,q[F-*D.
%<RgT>B['8VS6?$o8f=T_g0ScdVGnqLHn/JC[&#uI&b6UD[)TbEA3V:^,CE2n#l!b'jlMD'NOFAD2Tqe[1hb>@]Dg[tfK-"K&u1Lm
%f`G+9Q>j:!LqAU01(V$&IGdPL=ZGoFUG*C3R0R'\JX:Z?AKH)a#@?PDQ[.M#*dIJq\MjU<j7<9!4FhOqM<o#5k?:B;/er]#qEWK1
%h,9li^t?;-`AC2==Y!IB5&5*5jZoTtVcTbAO:Xr]>[Z7n<MWd8]MQRHj:TZF<Qp`g59bWU?8#X5ikIC_EF-Uu\s26fMUQYqa*ADt
%J!"caNp#er&E*-e:@eff=%/uQc.38/;_@1$]\kXtk-'#(Q&.=d`O(l1CLjt\2[bOX.2T^_P,iD-&M7_gD_.obFN#j#4NmI[SN!F@
%f\(]qm&WXGk@H<DOjd4@U3Br;@Xa*kQaQSXENdq`/9G[XPUFi07MP@OrZ/kKRRZOBs#]%P87UpcIpT\Tg6k?1dk/"+k4r=&(/MK4
%WTWd27_;sf/F;Jn7_*QJP$q2!;m+XI5F8KW.Z<4t\dMZrmY]\2!uEr?>VqYuru.E0c*U?s4"XOgIhcTam`gs\VGY(PLiYAUkr6;7
%5HD9;s#NksiTL'o1Jc1go9+R/;UUUsml/#Zj(bgbUl[Y/gJUr]*hJhT;Y+oj;e+(sk,kAg*HY$CTM(NE\XrJ;d]`,s=Dhb`DNN1]
%U:EuT^Hm=nD56n9o'9]Lc%Fj$-jaK;T5T12I&_n9r!)upP2,s>q>?E2oh^\?)ru(r3*l)kg3)HR!r6s%`q]f/J!"W]NY1?eQ[G3-
%a^-9&06`V-g+`,2N1T?fO$>[`CIo,Yh/]?!DS0f;df`_H\I7XGlM`htN2PI@:NIN1)DlX<Ma(+Q%)Qh.<K#"&.F.(9b.ZLu\+Y5H
%CK8g<T,MHo<GOZ5FH6V8QpV40\i0O\X1dDopFGDIPU:;5@(V&;,8Dp[>$nNa\I`c0/]jJnkUo;`MJFBQ0>g1V0>a?ue%H&J:=i>c
%LlA21)tte5>eFPBQpt&.%BnQnCUC_.PB^rU`PcRq7l,H+DI+Pt\s_d.`AXl03BOQpXY`*I2(#UXr2"\$M.s9VAs2D^_;QP,hJlEV
%6-PE)RqLAJUHH%+Yt_o&0UJ!_>3*)"*g'*:)/3tbcP>d7ihCY;[I-MtqhH@ZfC;\I?Tq)7h.mUnZnj-@ASAnudRL\YXfkiqC^aL4
%]k]&dAr4TL?H1.33gi.%PM&s"R@&D2<k-T=&9;d[b4@p.h!,oXGltquder4.R]/6o/q#\D=p.$6<I`<`S;0;jTas;98pST=)KQGP
%mkWf``U_?N=T5!3bgah"r^H:a&Y=HLNRY/7_=uZZ0R5<Mi8cqVWu9.ZXo.<_f$+kWJ(pNj1_KLuRdaOLV5'3'.a`HT0fA9+^KYK^
%J#!YNTYSm[m>(=]j!r$*QU5i&djVBmPRGOlDS);@+4TYW<mmqUC?6-U3@j2\A\4MQUG/-CeY9X_:8==+&\VGOf),,]R4D-//o#]4
%X&A+PD)7q<c"SrB\uK>;Yo-4LKqlDY"^I"aAG`E2A\%>4q.C%fJb@ACG>m35h"'_=NE-s`W`02I6)0qs8=!q:<QhDOWjUl5.ohF.
%&1k50^QaVtN4(/EO$=9^.C\Te<7pteJXGbP;(InH3pg8=XOUmP+#<a[Nh*/r.0UH'Hlk9Go/Nu<3M.;Ck'(9-Kl>Ia\:Nu8bHgZ1
%Zjp$i7@83&FFL]5c?'"6c_UmZbW=(HfRc-0c$A`)SjQQL/EShAie'(a,2PDbFPX]f`Fc7)EXJ%SbLQG3:%1A`GZAOYegEisY.9+u
%h<oG]gPtnuMA*>,jSS>-c^d_C=d+4^:caqjF3-A!P#"X7cGd_B>"eUeSuCUJ;1H1=r)KqtH39CLG?'RCg1_=d-?&#RF(JI]JkB$$
%BB=E98l_s54n"IqqsXth*i@'GReA\'V8H]0;C):Uk/P9>'[B;E!n(kJr&##0:A;lhN4eU;Xq1O#igm'P16lG\o-.+S/l2FHRb<#1
%@IalPb:-d$h<Y)7pNC=iG?'Qje^nri?YB?+I[tU^=Ra(@ml4r[W`>j=*j<]g::6&\V-(b;Y2%%LD:drhXo>6#KrMP.Ah>fZp?];7
%Y3.W6J6=s']S&\BH5SDd,NlW'R(ndT(GA"M=Mt&rS:>tso/C]e<0#SX$,0*OI5]7]9cHRaDrU\IZ^BnXc-&L\3[s0Ok*oUGV(kcr
%Qt#e9`?!r`WlFrJp\,Pc1\bRdH-4,8VJKL-:&B.ECc:+$BuA.:$qakKUs+7plenfMB7>'bgso[&h$p&U/8!%';#\/EJDXTiFG`Y/
%Iei($pgu;td7A9EFro%u7l9??N<tO7B-<q2Ae"?f`ft8mGsl.G`V;Qi0op!QQ\^AR>7liobIJr3N>\Z`nLof5:fU2j[NYFPEoIpk
%lZ,9AchlOpr2,c>B04Ph^SjQ3q0j$(lGCf%3hKHVi#9<DbF77r@Nbp#OD"Mf]bfuaD<Pd7?A3J82t[3O=h?mX^MPq(pZDJ3gu"Uu
%HW01tV6E5Jrnc0%HSbFPk7j>df?iPNZ)Y@P2g>&Z%c?(#Rlc"=LMt0Q^)8F[04r;abGN/$guY"DQVVTeI<>)M\!/q%)?6:blM:&L
%jk7d`Su'BK2#*G]"r"N]pDi=65+2OGoTF,VRPllY$c6\F660d1kdg2O$a7,19$&V_0>(3X"4p%hc%L-oYN%>HbWUU!BW9Wog'(N7
%6gAH3(7;sJ\Ya"j7qmpel_7edWKY,s`RO?/F>uM1S6\^WMOp^F%.bmd24//(^sXcGl7M'2CZqUC1"k*kOY!-a=KQgODRF5=rE>ss
%8a"ul5&sZhgIlN[F8>Kg5'"WrVH!#,)WaSn=_m]>bFNFJEggS'0#aOJp$d(OLq0M:T.'gBf15A,=No8F*\.p'QPoTI&g&c5/:C4P
%)h\[(=N2*G7Ann(KZ%uU[o<JiocbPJo],e(KNYg'OQMh/s$3QhC#cY^DQWWI'QMU^HD?TT\#OFj3)2c;rH9*KW'/[QHJE?re)5hH
%?.CtSoiA2bUA,`'Fd;?;RMnF\e#QYO[mof'`N(IiX7^r?8"*Gs9s9LmcEhE4K<-mE&@p=k/L,uE2DGmUrfZDn0q+9mYA03]`a@i"
%.I[L!6bhDNBjG]$.l5aT/E`sTP02q9mB11QX`c4SE2Z_?c,#'LOTaJXNN^j<.(AKd<)[-";_sepJugcdgJhc6'.(n4VV\f(cKhZ/
%"*;dr-;#c]R!+$,;FL>`@4KD.(F#p(F&B)3/kR$Uc#ZbEZMM&Ye+Dgt<+[Qq--]nrhF:7K,0t=-k.)o3>a0_T/kRTJ2td#gQ?#jN
%/8"/^cNOV'o3@M/Q>``.E9]m//ENV%=j5BRKIP#3\IPMof.j0M'ocNdC0W&;YP3s];J!#U0ld0WLKkohr6\YPjU>b$WZdX;Eth^5
%VG_6eT6e,tFjt)Sn-+KoH84g@e=ER]cPK%MY-Kj)62,/H0#cSXkCW,J$+^g!SI<$>T_hrFmS840=GQ4EC*`9SV@[kEZJF5g?M`#G
%2QPd?9[5N1q9T)Sm/66`!rah0mI0e!2JPCjdu.9(Y87(jaBJB6aV3MY:UulhT'O/sM1<<*q!>j6dXodPrkWO!r<t3sght"(I_FEK
%e=s+IbRXUX,IR=(].u_Hi())!/RO?nQ#f)Yg+IbL^?[0h5'VY?\bJHMSui]UY_@*"qOhA\H'cQhK^S]m:]0N=I/4&O^G<[KChGq\
%[PHD5^mBD(@2QN^'AP1WFs%PoF9K+5`eIa2Zb,<gXl$>Pic^B%21`!.-ZSRgkLqn,<s67t_2#giY,A1T]5%f2:hfO`9%Zg5nF(=+
%V1O]G'u'PeUEo4os7sFcb.(/QpuGRdF$QOVL_X@a?c*'ADL:0NX2uS@_F!c)hus%mLOUru$-Ub(lk\UZNct)9,eR.Gp&>6LNhW+,
%qO;j94AB2Ns(iaa)q`^@BCbm1oXke.dRroL!"V%^jZ[MKS\p4+!4`I:9]urd(lDnKfB:=jBH0V.J#]!q1s1*lr6F7hI<apoiGP]?
%pnQX3X^%e>TeV"9Tph$SdnB[cmC2AZ:?COiNk@_`f[B_%5L$kaRZZ9NBdsmfl5C#:CU>U)[0nR4RRu0(G7qluDo>%rkK[Ks>h@.h
%.2"7Q)JQF&jiG3L:g!^Z?7]L=kob"OB4]HU\!p;=rr+=&0)*M%NM6md6'Im<rs?Em^\FtO5<YXl@ccJ:?W05If0GMn)YM8>LiGpf
%R>6-sEautDe%K:K-=OQ!l0?lt^oP+]D5lC%7!"1A\TIKpb=_)0Zs=O/TaCXeQ6eOtmUC9DR,5e<R$'=XYUQs6PLag)mXnrQ<BKX;
%FR(BYT$q4>+.=)eJqP?R\*;.@dpYXpDOZN/1i*&1's+In0U^jc-Zc>g6R8XEc=fqF8Gj/?[9=;ZnVtr,ZDHsS)<Nl19Y&nBC6uQ_
%9Ec(e1NqoV>Dnef@H27d&@tIolMRM'EtlqdSD.q;H*KZM>Aj*pjXsk0KZVcFR9oiAWE3Sg3[/)SPgo>=[8YE9<`4RCK5``/)t%C;
%>cl#XbQ=SCm[XdpQ!UBE+)Y.te.%Tl^R<1SqX)L5\_"$-irqlro:&'W6Hj&e>2Xe;#CY6Tp7O4q2TU!_SQZi<L'gA&.=gUT=7<Q%
%Scik*NIi?gOa%1[Rrfo\a*48t@0!N6DZ)!Xp>a,M`+4)([9g!4UR!p=rO8D%YL`U4UO&]l&(RBf.pAIYcCj'G%15%Y2BfD.K7seo
%r=CIKcuuO8HI3rF+1H%9qOhPMo@[MFRVNVd"Qs:Aa_\cTp1l6F#VDdC0g\5OVUs3#\&th:62@=Bfkkq,4<"]Wd-`1S3W/G^UO?*Z
%m+".L7PB=Bj4QRP!R7N:nusmidBnJSY^06F%pL,nKCEn^cHK*LbAV8,)NA\BDe`Pt(qq#Cc>fELqVCjJU^*_^9R?_XPZNJmi]OPI
%qb_-^C\FN7mD>Ne=p:rS4U'MX81RsFDa,"m',mW^9XHZilt,kqSIV<rQ[*p]#@?*Z;<rBZ`#\;PLe%>]+#oijh:pJ"S*M!Y0=UfN
%%'6Ja)iLKnfaoKr7U;4Rc*1Pj4=g.,%pSEn\Uh-=UB]a1N2SVX^=M*k-/+gF+.tQP6XPAi:<9C$E/2;aH*N#n4OGI8bPn/M=;`79
%1>TI23(g#EmsoAn0Z\`0%\:Ca`:=W9YL;i>CXk-YQ?i82h+rJAlBa)i7pZS+c-j,X*qO?(XbX/5pTO^pP5D;^.p""'SCt!qDrdq+
%j78kjmrYSIkTB%CiNpL^2r#Xu^_.ZJN/ZS445IuE+rAnlL;p+`-:jgMS$O7_"Y/]*qgdp`9lA'YGE%k^Sk<H*`pQj^CBHOW?-@]/
%1BC;(:?1S*,ag/ipuD^.S#aT_2,`r`?1BkfiK\jBo*ql@DEs19*Cmn`Ri@+H3Qf!c1-A.G'V%EX$+_*H*Rp$!XW\(rD"OiXPU#lc
%df..ph-nKAX]I`$%G;rgpXqa52em%FQ?u-pI^@gta;*>g\M^-TD?*&2>9L6JBWb'5%Q8/NjSILUOn_"QPUgC1)L&6mG..s-kG%@[
%QH(-C:>=V)`<q*21O@0RBsdpi@UbZ3,j$;QanSTJY,BB9l-(gTo/SW3ef8"^KmmB86ts$,PMBl@7c=r2Yg.)T=0/1R/o:=CJmI_C
%3fV;.#qXD^.]qPq5(Q1O0L@"Bq>=4o0f7#nF'b%LSk^-2F4*1oJ_LG+GbU/;Aj&9UT?&#%N-0]nFLa@X2prUT+e!5EW12-mE*pB:
%T?,=-mKh(.M]-_'>1[!!m>K[u]'[d3D:!)!X7IO<j8RDo4">H$'55BbkK*G+mNcVhCBf'3Z)UF'm^G^!Jb'h);csQU`eKk&cgA;H
%m[j*+At>Z=4R3]@bup+^m,M,2=)D1bLUg9[He`L5'^=8Q2`Q\^h&/]e4]lUgFc</]?ER9i.7_?]c`ngC\YD4>PEU=pD:GInqoOhd
%jHNn7_(^"_:!:oc`sY^WfK1ZdCYd^?h834#52,!J(cl!ff`$VoH/fUiIlk1aX'^i*(Rgn:L]-a&CbsSJ44<bkL0Es`cL!Tm`=:Kt
%S_PSRFl_#j]&C:s6(^s@X53#G0Nu(eR3W?C7<L<#Q@fr9mG@hrhJL30BK+QfBtg=05bD%'2H?S^j*I#"gX>9Vlj4O'!kYO<mIjHA
%3bih#BN6BV,<+%'A42R?B1?a]X]BeSjJ6Ao7r"a,pU$%8>VEZ4E8@Ud'Be%H9ouo_SNGC2Bptp]37L5%'\rB4,iYZ*fIa9`Inhgi
%j-K*3Br&Qlk`&=PB@s]oO(a-OV*9nk02c3bcSL:G8@0HhK+m&OHF6Y_6K+4u:mStYQr][eT?J,QOGb:bkPHH:`.3&S1(!QWLXTpA
%d&_FlmspVLRY4aYf*1itmF?05h$][GTc[;PT!XY7c?ku0K[5V7lK@Q09sF(Aj!.8aVU^\/9::*a@R0/C7)pSi`b4[4IWJsl2ArL3
%fK=oPng!-VC.(3#0d9WI&ZNH36u&ObNfJDQ-Xr[uH-Hh.eRZ\HW""N_+26^l=^a:7Q>!ld*0El-b[02_^Vk"ul\i30qb4P-h"]k<
%9=?opa1,!h/^limn!Q27MBhi,p&ES]]=%'H/Z)bDFFc19'^s7Ro5^n3NuQ(W1s)Z(E(TjX5=O`WP><t+e1Ws%5F,og^N4-U%h&^!
%oCR#=:_8>i$h[>lk4ae'S%^A'=KU"/N'$UPcJ=P>X)B*9>:I<kHLBSEaVNI=:Re9*-`n?62f:/ugagt!\__2tos8f8f(.P\ViS=K
%PNAoBpU8\bK8R.CDK#DrKTrqsX&o-u3a&b+YH<2o4]koolL`YR0C4HJbhC4jNGdD6H,"=hm+'\@WiYS(l]3)g9"E`jPEE,YWpa@]
%YI&:^g&(9G?i'K,+?sD'o$-l/0>G'T5@&['hAU3pjR'F1DiK*^@@5KJp&&K>Dn!F<fR*5Tj/;f@1&'i.;9a:-T@[,i2En;rpN"Nt
%daF]&`kp3i0apGH[INp/B2CYgr73ATef+"CNshlaii2Z<,^/87h,6[XI:$3,EpkT("I&6g^RT[c_l(-(9:OJV)hkBnm<3qCH`P,L
%GZV$X@$om,_I@)iU0]Dc:Z^QXCAs67GHpXXl0I>4n_WSk@VtVmnXJ^N:0/p1nelnV0<QC8Sat.EH<BmPp"Ni?lX-5b$]R5DmUa"g
%T*G+nrO^s,!Vb2HStA%tN4\ZCo3/k.\^t)6[(Z%WCOUS/pUl9p@jg09Cl63<AJ'&f.6[.5JXuE#e\&AO<F)aD+-lrL@f+P>G,\MU
%Ge6[V_u$PtCW4QK>Ar,[!eiRE8t-pY>E?I,qoe!aS*J%*qrlUDlM#;a%P6kLqqr6ajeM_(IFZ3:H<`GAmq+G.^8Z!Qiq';>d_kY@
%h2NA3+1aFjMdLk*?Dn/=@iaC\Pk<#Uj,I(;C%^li$Z9<V>5uaYg$e<&T\t%FioA)F96TRAaWoWhgIJ:peSd+U&2p:$6[q0$'b1>J
%$I>IrI#b*I(*;jOX-t<$\ksjrdWUsl]dM8,i-q`f%nb^p9?.QMHs\Onn(fV+8$?8']6E,FcL2GT];=QdqY.DdT9i>]R"B^8E6'!p
%_6&/g589#o$M%JOB;>+dm:!:!c$d*Bgq7^6;*9:M?k4?/ot7tQ4!)c+s5&-chq<>F@\\%[qLWo=ghUL&,_:ClpM06?S+:c0dUUl^
%YH8f:DrqS%pBRIO)qnP,-UM@VleVoZg'8,A.H5K<oafS7-hc0B-REQge!`XGYkiKbUBEFE?tlmm%_`A3/%N2;E^O@kq)g\)%;;AQ
%2<Iq&hg1_UHnL4m<YmhJ?T/a\?f^e/lG3`&rp;A>4Hnid\:_Jf[]se\F2)tbm[^I5DWNccH3HKWh^2d<^Ks>q>m'M0hM&r)\mIQ[
%?13%hQ.LA.mt:R^(_=7))K-7ZhgE#,>ri>4Td;\!]dU`Oq1J)"+pa[Y6)h*]rbUA;WN";5l$Mk9QtP6`m&+lNP^N>>)u"Oq.iTf-
%_-VNeoIF5rMO+P5WZ5rYQ]tQjZTE(rp>j/u2bPuBl/C7>K>P*H[971MhR)kZVseLj+"nD)%Q`oKm?dOdh5p?*^NY'O%j(Uq\)8lV
%SSHPt^N=klR1&V'T<_!mJ+N)2.+)IV(S;5.NO=s?mnhkj/KMs^\,"X"._TB)]D9-mNt)+n,J-Rr/_1:h9\c<>gfc;"/Tg7sX&$]d
%+mM;Y4XcfS!kQ>^h822kX=l^4r\i=i6f0(R0D)pkQsac\Uk/PgEFlJ#%._#N9,5C<nM.fYom'Da)s"c:XZe8tTZPeE+:kpK(;u!E
%@=E]F+QIC>1!2>'1tT=(jh$I,P>U3o=$F)]_t.3!Di(7<B7$A9D*APs3tF6NkO0Jrn7QACrd;+,._0mPrU'!9`rLGmNUPXNdO,ld
%*\sA3h(FFVZVTQ#ZX*Ek^9sQ)<D1o$qn]H7+he]M7l:fA:($Kc]OniZGkY>?H,$RZ0O,'2I_3.&%RUojRD4!C8'Ubu1r4.HX]=Sj
%SCbG+I!bu[WWi?<IqKLb]RBoH53Cm6BM#i?#7#Pl>"J&rY5[9=I(E1*+)_\^JCHRQiH<cRmLi;#^YgFqcWC"VBs]hb46FhB@tcGO
%&SPIipt:W0*cR])$1%DBHS>3"UQ]#@7ce&*:7ikqfIuI$=%J:#5B8DaR8"<PUL=f$)d1sO)dD9b82n2b31Y<YJ6*Y$K_fS9A$Y0(
%@Oe16oZY5/J$kVfS>K)1@-8[>L@`@(N4%YUTtctfj4/gDlN-$S7O`b=8nn<bXua3k1^lT?pjHT;n)*2g`&89!52-NJ'@%CSR9>8f
%Ng?*O^-ODu:*p.b:W/_&9mAP*[$Z(kgk([]"%AZs^dDVDE-u!:33%l"d27eM+C7G,8c1ud_b]unpIQFq%PMpcdbsl/YX(C15s`!a
%1#:Wq>tXJBGsn58-qquZ3fb.$K`E$c9g]si;@!QXTX5;FS.Ohi?eDQeq_@*<'L4\M.;>M?a</'?d=Pdbf'_&u^b\!Z9oTqL>G0;<
%[Pkj;^L,j-nK<$jeW,soclgHe#4nj:[eBFGl]YfVbMh0$jm;kM<jd\(U\_T5\=`j[c2f`'UW'_&*&*grkp1WU$(Im*S+f.d3]Q(>
%>,XU9hV;<@MPl*?&#C'q^),!>'b5$T]iJi[D?!9'#i)qe8.MssT$Hn"X)YY<rOUAtrq><qq]EXmIY7C+f.0K!%h%fgSMcpC;)gTc
%eK1eV1Q9,%kCXo6)f7-Tnop&#RYD<^e*)htNK#jmT',b9:;W4Jp;?:2:O/I7(0h7?iG\QjA>]m)gOI#*$AZ1!01Ce/5<n,2IlWE-
%._h,35)TlKf6>NI+ntDMJSac8<pAIi_%.H($I<pMI`2g9LRW?i+`dTM#OpEEdYi^(%n='Y<-YhEnNl-aS^2_igo]a8Kr=/mgaDYU
%PKjgr^gm+-Y-e#L.hD$;7R=c]b^7gk3lpd&IK;89CcX\BU^I=C`*O#Dl=8Fo&@'+$6Gkt^3971M9blengF59K]2JeYHaSaYQjS4E
%l9F[k4:6\Z(&="U!i+YTF1eO'HSfJd^Tk3QO.Ue9Q+\P,p=egOJbH5W*n4T4cK)K;73#)JVYG+RX*FL*`\L6an1Z,=cT,*HmR?)N
%HP-1Qh.%<WatgO_?OCH>UDr_>&^=P'eRl]c<'<b!C&7O@@:OHY;_I@Vg\C@8_6&^if&3TW-YW?M?V@jMIe:=rf(6bZh6gPcrqkhN
%4jUtA48Dr2pYTA3+T16d2^`bUgNP7<CiHasD09lYVnJX)pGWSA0(,+S`ss,1nA\Y@HhpnuDng]e,HP!C<kb:m>-s<Bihiu`SPJ-H
%5n45;C<ra.]c.8?I/K-<<aK=30+R(;>WiVTXtQo"Da&ZZn_jD0"OZlXr3<)5$ZsqU`l@!9)lL2HB5R>*95Eq^X2V]oVi1Fpd"]@q
%(ksH1`:Z.,QY5""oBq77A*("EA,S-kMqC#:Q"FOU2j68TG4Tpc<kO6JSN(FH`5[V&,UXOp5u%Xa[=);]pZcY\3;X;(XS)&$Te97H
%-SX*hp\X4[kjsn"*V$N3U-YoIKn&.E`r5YDrVVTJU<8:>o\sGi<,Dh4+UKdV/03Vp@[2hsDR#kY[Vn:R;>^Kl!:-_qO484;leS#d
%Wb8pS$]Wr5J:@5sYq<9Zo!SLCrUA"$O"gNr)f+==?PXh#FrF4"#[mE#*S?3V'6Ol+e(0R$I]+VG)\V*O.HmF)pso`_eok[jWQ_oD
%\*C'Hf"^Pk*J1i-K!OS7rd&/'qNR<S_(-(NDgfP5R0\*GcE4M)-a3!)2OjB#"nh"`0)t4QmR_lr?ub5kSYr*n_O7?G9`p+bbbKri
%c&Z'>ciVmq-6T?jpZ&f"K'$eC#Bt+TD]IWFqn@.\>?5G4\!K_5([`rp-BC&<:@=VQ=TgZbNc4BYNYtiK>2AMH00X?98`.Lq!2?Q9
%=ST2qk'"K]%D;q45.TYG[l3pel6)EfHu\V0[JB@WWpV"X[hNH2rcW\%>eg#J)[sD+F?DHRn"2`[LRU\1[CGe<rUJ@4->srM0.SP7
%6VUTr?gaP[>/Nnho#m5^qYF+eK)dX*7"/K[I"'f95IcJC^Tk!\TqtsVcn4"MClgc!h`WR*/A?Bb6m-Rc"2d6LgqE4iXQo8$JEaK1
%L?5@\ZZ<:lD``'21Bn@M@+6!qqe5$eZdhr`9?#Je7c]n?2`TCa[9]lk]WH_&j\EP_GdBPnQC./bg6GF;IJcq&GF$ifXK<0tVHL&L
%[^r]obm"97ctdpqF7ggg'7>5<rh7oX41)')\*gp3YQ_bRcaQ\o*ge8ec8)c$kg*&poO1Kj2@WQ0r5a"i8kT^fE0aiqaEt`ER?WK'
%j&`o1*;.hQI<KD$R/_Q>;-Z39HZo:KfZXR2cgp+cj<&aoa5^R6]WkZ*)`%Q+I-]qKo%Vm?Rc!?N)Sst6O*1@!"2Yl$ddHA\[>%<-
%YlBk,XZgT<2]!Q_:S4b;s02&X6BqXNF1m>V%^1CJ^>3(AF*oYq3e-K[+-^emea2#\bATquL@Ga<%c!NmXeJ!QMYQmlhVK_=5p%FM
%E3Jg$[.`Ts\CWTPDTB)S60['h?E^_X["4*Bp&=>?YCS+ZIkNX&*ii/LH$'cWg=_7ufnrl3M'qbB!I+%;FF;F=J'^5o)Q^I%qu$-O
%SW+RAf"/?)oLm6lDN9MgV*KWM"43ejp[PcYh+$r0M)3:DT08,[5:='Yj7^*'Fj!fuVkp;Pn'o/@#[@ib=5J>g7@gU.0UpV%k^\+K
%JaomB>Q'/f`*dRe?oef6mea#rneR1\Vr.&,U>UP\ro@m4ol9/\acrK5"J;\)P9,;*>Pd8AIP'1C.f83?8e!L;$oO`XIbCq9`bMHA
%)dBH;MJBuSg"cP"F&0KVH[0OZHNWd,IQ-00+-25-*!UTdKg4'WeA22'<S#:_p7_Z#p#,7t`"CicY"cb!$0mS3&Ze1cnj+dEfhXM4
%!F:,]egp4$k^/WHSoqc&m?cO?la]\c:Z&?5kWkA+Nl=N75<Lk_#^"GV6Gm$>9qI)'T69[s`-X1'\ZrW64^RLoX%@sp[\)Bb$B7O<
%l`dESWlL1OO0$lYVM2.]cfHhNNH,Jh=DmZ^g+=hifA>eZQ?KuD6NcUi&C!>g2`/b7ou^#'1O(r>\f9u7hQpVujSQ9s/TRajNgk7]
%Jp77>7?\s)+q7ZYgE=8_F6DLE1,N%gXtT4u>D,0;Or`/7%u[FOj)*_p(UmiFNSMIGhla(>2X[%=qXCH\_q^RiS]K+6M_E\7YH2+Q
%pHA_bXJ@.*>'P2i4aJe8+4b?^YA.9#CpJ'5Gj'apF;o#P]9Dp#s0UCuF8[X]J`k]F7IdtB>H'43D8O0am[HR.rnc-?k*&Ch.67]Z
%s/:!JBF'd7+'t5)JJ$PC<fREm/kP#t!S)WqH>#DT7;@X'h!ZH>#@i.2@q4m/."-Sa:n:;"oGDknW7GoDcr&F"14!_gS[,hthd9Oh
%gmgK?%FOBcAT75pmq6]#d8"e=L^]MHX&b<peZ/N/p#e9JpS@ScGl"[kP9'AiRqo(.S1g]T033!\-fMs=Y&'?kY-4sTILYG<pM/*]
%QbHNdk^PPo2143$mkrVL=<rM]0#(WVh1'XTo]!E6;3(SRX[6ZjJ.9s?G!C3VLP$AL.m>GR./2lhdbn'[IJj&[3k.`l^2L)j<&@$5
%Jgup\T4/,/AQhn,*4pD2+0BfI99^IuPPJJUp8dT2Vk)RLZA&`bX]>ptmIGnc66dujT"b*kXp)?"(ZO?p2gP4Q%O=!IING"g:<>Y>
%T!GJp"$(sSX']It*'_Z]"mj!1aL@1)HBF^R]%m)W`GUi2N71=*Qt3sM^omVkJ3A:0#=R@J61Wd>q1I;U6+hW^g"Nne=F'LT,0Ynu
%r:MWiXH(iS>H:^Qdg2btIMM:Q*g@_q+')F/hS1K"rM<6Tnnrls-61`f6_,o_[,&2$2HHM<0(+X1GS5Dp*]Lu39^C5':`$O#/*48-
%Dl&6ThsP<^#OVBaQZo@262"jHO(nOBID,7BRhdnd)kX'AU9r=n2t$EAg?TLJ^+*sV^L-_=S$*St_q;0.(>.KR#?6-K_g;$iIo;AH
%SZG*Yoe/rcq1DT6!G4QDIo1[c#X%;SE55LCEknWK#EMoGQHpV;51e]L1<;'4LtmL,6-ZYTT]:$)_g,6E?)qR1RuQF^+Z$p>?[]Mn
%Z1+LGkBB-A[>iF*7*oE];+D^.XWJRbX&qh8hjC0g5^VKnPp5$m0]bYe&K&Y[9#bM0f?7O9/`g24DX;7g?2/4\7sldL^N"'-Z]"DY
%%_o)]mQB6FQf#J?K%8@/[.st1Va\XIlNHUiq_5l71W]#;htiieM2Lqb$4[m([hf-S^r7U-Vh<iPjmb.jmIf;\mGR[6a4nGPgFg_;
%)$]_S?h+H"Ps3Las#lB@HYlIAc0TO+JZtIi;-fGtT'(&ni-q^hHlj/GItnXG469Lb*@Jf`m?+4*HL%Z[lfTbb6'OJRjs"`Pc8&MN
%ekAI)I,?^nC<]0bALePgN<u(-5Mu]<:M01Jp/*EJ>M?mYE,C&=3%`hME.!9)IecKNHdM!.4,mEm.#n(t*MBGQGhZ.m0"UT;ng.d7
%'@(DP)?[PbfC!8GlLLRW1HI-Y*&eosk`?2&e0h-"LM_7Y-ah4;FhlD*!Ju79-=.&gRr4I;rO9202tbm3.9c2j::B]T60_&.)0agN
%pgPj]n$Y!1*o(:-)>CpHnj3dEPjp&>\kPAI4)+"]e=FSR_^>`e.O<.51lKdOLARk<]bo.ge<bOOZc`kh)pc^kM-2Q-7@2Lm6r0/D
%TcCEP(JI0C=SMLFd3U%eNK3XBHMZX\q(61Mom4<01h1&$cS:M)L#/?h[Z_&B;/_0t)]K23Xmgd=GjjMsB8pDV![;sZL)jcZqb&%k
%6tf[rJ0&\=)NbrSas;V99ItmbC@hY(d:j=XYDfaN11$L(PU8lcEAUQl:!.T6a[ub7^C_)F<(1(q`[me%AuenkBjr4d66!$SP[sRD
%%I%:<TdDpj3$fhGU3[J-&Xdt*\^03_#gq:[["n@<-o?..\3s&AJc\nqV-EDU8bWld:f6*P"f7;a$5G2),Sa'c^L(kY6.;V@Ka6F[
%o5_-U/&">tc5\*HLVBB<Gn)aYU"nm#/LTr>Gr9uhmr5&X/]8I@a58rf>ApuTmE0.Ph5lmqJ$ldkn)u?\8W$5L_D?ESCL.%P'[%N"
%Hr[@E]Ms6g,!4uU-5Y+Ii]sXF0&K_u4hfZge>!'PP:;oH.(3>[ZQdABe.6=HVm@:rT1I1C1=lM$@g'KD\#QE>\&X1)I_NJQZ@#&Q
%<,cCNa8u)-YBK[,@\U?,q%`/FEGp)-EpONTPQ'QqD.8Kor)*@3U`5aWj\[0$jPg9:6Dcf!Q.&c.qkNnA,J,P-'ZTmsOpILM#K?Hf
%]g2qeTI4;"Wq#i9_dT0\b<IA1LWbh0hM"rNcJcgg.WBS0\6eKujVVL*F?R)%I^4B^+<%TA&Xnr``9F,&P`V^:9"04JmVeA?efl8$
%H,;r.@:[BE6W!,pUd<=_^eGt)FR.1P"a!4+3I#Ni^.E[0-p<n80"3u8CLeXH%,kdGV8cqHQ*Mt%,rN;#M70ulcl<%GN-N1K=sKnI
%#BNQQ\t%un1+j)r,,sO"kLB)@2Vd/Xjjb\0AI.tK(/2$Y?MA31?Ok;[8J<N].C7g5*LmV.8$-gF&Wu0CqeL\#K]L[$p%K$<.7s>R
%?ka\%6KgH$\u=b$>4+64PcSC2?k0:'MG]`eqJnCsA@rXnkXA0hn5W4#<VqjI3[g/Vr/NM*?V,u:]c\P95=;Wuas_p\*W>1$()kj%
%IV,WLd3rDgE@(6aDjE0%RBS8ugT3bUr&UjfLm's>(Oa]#d,+_T'?GAE]Q5[tbL32IV9>hbHh0K%a+_b%YH@"A7=XNUM*H*oj7?:f
%:-7k?dWk1\c@O<MT"Q@iJTU6Per`8DF5`O!!pDsPb0JX7cLIT@JB48B!\OP#FdXp+'j-XA#q(h_J7aM)o.8)ObQR/rn_"bZCg<-e
%0tL:5-XGsT_hJ_I1nItYN)pSa27h/W`EPD`s8NT66nfXWPnG9,9',pE[^RAu!el!i>FnWoI<,L!"o+?mM87)3_c`9=fQMo]PFdGk
%;p'm7#j(2bC]tXf.d'CYOU*@c7"jqO7-9^cHkTuP*/>)gJD%g$k:G4nL_V=a:'QR['L4<:/k($3cWNU0ge=\4AH2edVAKru5-SRZ
%F"PEe+G^Df'.Rr1TP`kf/Ssk4FZmcu=?.N-4dU\%0P>u>Jg".p7QWp.h`e-<8>s"Na"Srj,ZIP>0+bp!Y0>N28A\@2"@iPl<0h#P
%o5QUW\+FaU%p1S08=?^Zpg=L5PZU+,Z]lIQ6itL_kR'4IH8\-DV.`5i=Wi-ZJX-H8F'tQe_mrE%k6lO]J-`qGdqAe2*7u*]3!)$.
%,(hE6b#0/;gU&bs5dW;f[XsG?S*)9fa+4DO+9D#*#quSo(B`K`E#faa!Pom-3!s??[kl[E78j8j!rA':*]ths0$nTYa9!7S/L99V
%^@N?[Qk5BYY,>sO(^M*jj3BnkSqV6pK:FMF*mo,8F4`uaq2QLn\ATi#iuf]45o1gQOF/["J]_JQ6DT>de1e[uO'Mkb+=R;9GrE$L
%O?YnE&E/Ir#"'=$W0ta&!A5]c$p\(Ulm0M=hFc]:pr2h+U)6T3^f*ilZ^>2%,(8*[VAN$0^nI>AQkTk4deAGe[/q0.%FHTF'$gWN
%NQGH+M`ZqQ\0?U1*7`7H2%/)1^eRE4ZQT1JOS=[%F,<ZnLa3eC1'2h^(kR9;9QIcG1:DaKA(b:ABQ7GeZ%r]0'p;9p&k1&9>'\m<
%X>:W+!d122q\`$j!(u=T=?6N%nJmsMfLi*<&@Gmc(N:7M@gg71CjR_@6O5j]Pi<um_8)(!<jK@XW$VcAREsXm?2GK&Ko$!o#P=h?
%j*B(p!($cHOSkVhJTl*+Np@Po(sdn).,GdM<&l>qBTJi;>JfYk%4\RtGk5b1dFQC/%GFsGB\UUIYYaTZ7TTYW/<l><0oJr][XAgZ
%787:(Jqn:jdTm7oaDR0^D$VUCr@G,m5miI25`V^6J-_Z"5S]5n1K5hXR/uBLJE@7_a%)_BE!.Hq&<88lIXEe&)nJ9mQ=L&>JN-=/
%m#Ioune+1mbu'/H(5Y0S8UMH[Jh.Wr$j*FOU]T%h*@WfZg!bX$"@8\&om@\-LB3V?_GNU*poa(S%=s[-nCoK$CmHD&#j;G(a&Z1K
%%=jh5ekc@X%!'I/6Mbn^LM`]2&J/GbEPD[>*C,l8c32T?+Cq.l"*.%b5i]0d0nBgr\4[KcDdAt=0:5.\-m1VVJSMGT`>A>QjTrh%
%.;2nX1Du5r.RcU#&WAosF'2'?"Znuq3iF)&6X;$4S,cED6^gg[JUF9?$9oIrOk=Bs*8!iW'F2l*&^YP]c^(Zq/2V!Q>gOd7i#,>o
%q3$CWW)r4468WXEcUic]2?uFn!C2:Qp<5Z'AaOc7T)c^MPc'90)/TCNA/PJb?rqlL)49UkO9;p"NuQII5Qf1c8Otlj@/L-5QDco#
%6rdV63Q/I%Uh"H>B[k]Y2+n%i4;<sld1CSU+dVRFPD9_1=MEo@Ml;:N7F-]Kda>b]@)sW;Npd**k;"joons"SMZL,'JIX7W8<t%r
%KZ-n==/'lCoMK:d-);5?/255SPR>AI66/H)$U"q":N$Nu.VZsn"N$["+L.jkM?c'F4UE^(V#`l7K1'ok!*QsM?bp`7:^d'R]`UkK
%B,`?/Ckg4J.hm'C=RR(OZ?fCQOB#EHSY4FJ.68<m;f#COl4BNh_[jDD:h)t4cA4D9a_eq>K\5JkS$*,I'_7O3TXiZL<'/\QhLjFp
%YHQj9<KL@nT6^0S@\;juJqd6kmaGX#<S9WQ%Q^\!L'@>^EmI#i`Xa37,l4Ju\>d?)U'C_5gmg5QOp5"skaMXSg5[k;aDA$-#.,mT
%!."^\+0d'n_3K%,koqJT]oX@'k7l/T?j"T[2,+:++QX+Z$f6Q_5T`EZC1E1o-9uAN>qgs;j!\/#'^fWAQQm44Nh^RhO&>[trk=^:
%p@n5lJ\NjI>?(b+FlN-Wr6g,RL]L]36`m`QNXucD"S'/2'"SOFa!D+(csbjK.$uH_8^KY/>^6OlTUQdsWJet@g;/jN8*Q87`_['K
%kh?baDLj#(KkFoB`ZmPIN?B&)!r)udoDjMZ@(ZdVUH#^QI4tY_+i$ncXH6[d#sO-jTWK=U`5R63kUs).5Y"^+%+l"\*ITc"9G)f*
%@6s0F+<N"+H@U8__gaBPS8AM+H<\Gk0'KIr4J;4h(9G6cjXJVK%RJK<E_1h;1I=prd6Kg2Ei4EjaJK60<ue\]%T:#9MQPe8)8g)Z
%;M`ThV=I/Rah[Wf3KB)M:9Y^$$55q($[d?Z"u7NIi=:uMJXRRH[Y[<oYh8dQ`W`R""*Y.:T34XX3U(.s<0AR2.GkUElDU,7$\ZmO
%C^EdCTG6T1K,V^+Pkl!cBPq=2iIn[,6Im;p(e+OdOAJ+%>IXhhbatUhOK]N4"?+IiL]\3HBK2*pm;_nU$jbT9,coA*"Yt"b0P"/g
%GoW^F"Bm][liVm?^2aWQ"h.M48XViNS.n!U@950O&'3=_L4QD`KB3Dc+E/>KN1qH+iW2CPU'-EJ0@;>BHdpU8$7d:qStg!c!rKd[
%QWLO@oo?tK"41Ek7Ya9u8/GtW*!/X'*X5[cFr.P=@+Pu)aOd-Gd<Moj%u*q>?jOUd!/8o0f0uQ,^Wn4e&Nq!>\/$4Feg^c"V!,/H
%MSK4dLLL#@K0Lci!QKcf/96Qih@APf_pATa?/QV4;PX=%)Ak_YGm"@(_QL[VE[go.5q'/B>!4R;JHdiRQAN_tViV$pH]Ck@/\r).
%)q&m0#UZ:ABC$QUm'(j`/DG\m-)&,:(jk)5JHFJ6=,qf:*Gff4h>jQ%)&,X41`WeH>WSVL"U4-W:_=M#JKGO2*I=AQ'\PAf&DS2E
%,E'`b_<V.8#$!7B*ruEaMQcbXC*`n01q4$G&eL6HC/l,+'df)#UdA+?E7k->5fBhm(d.o8=0.hM!Qgl[V^7iL&<Erh\T!'%MBo1+
%DU@<m&q4lW^ql%L8HXc*m)Zup=ep,r6i\/A/dAs%=>>=\?:S.RV(3G)J.!9IL.<bkM(kU=5fGGHk6&\j!.[Qp2?8RRY(]+U3Z\@A
%j@TNC7>K60[GV]8$,uB:"T`*E&VUcsU)b:FO>RUOIPB&,6661W:uZfkA4K\=Je'a]liV<D9`bYt\cr^5+Z`5hf8e6"7jY`6@Grs&
%0FSC4-]FA<[%N9EP'Im2.O925$>d$d)qYAU4X&%W*0k=eKPMc>F?.!-o^qX[8YUmGPjOUh#FH#QEc=hrJ>Ic<^s&!aJ;8l3P;kK1
%V='j7ArA_LQ91U9`1mMC.Uo\f>Q^pA)duho#)Gqc*O8:&_$Qgn&SPHOT=e;bmJmD`Gq1SOD!STpj*S6.%r@_`CERmumgaSKM??Ys
%#pgneKH=/Bhpu=mc`gcZ@un&.StTZ^8I]]W*Dlt"+UGI.+YdZ%7@"#pQKS\%r0ZdOT>QfL.Y3jYrZM&;i11)k8fR5$Sk#9*&G.g#
%K!g:r/-N/;kpkkA5$<:Dg:BQIGbjP-)F?_G$*<Pc*A2LT5-onOo<%MTd2-36K>-qG3$bH:$m)HP[N<fhfj"XqK0>8Bk+U%O5-r\^
%X8l6UYUeBCco6^DE'QYNgFCRp^tHRaK!0bk#G&]P#V\T<XWN,WOeJg!D)Rm!AX<FO%9s=Mo5i&TBTp&UOQhj:'PLPm7$Be]_1P(t
%f8otA,u2,"W"b7%,ClV`bokBk!A][sSi5%GC5_T_l0=9kO*!#d3UDkD5%$72cBd0RUVh&)VgO'=/;V\E%X9+X6gk<@7Y)X=;KSpP
%Kk0V%]<5-s^jJlR^p_b8Yr%*s>Q[VZ)PE/2D0"ER?T,LS$(o!:>B/:g@$VdT-:T#9Z$sgbY@WMtr'5M\2l'PGPE'q)d+,&M&fb;L
%ZfWAmHa"&O$KNb+J/DnHZ#D`5nF^4V#ODT;!C!;$*oUR/"4"h/4qj;]UP(fj':(g'"Z]2KHXn90^=Ys[8<F5q8COfbT_3H7cN+6G
%]u/lHRj.NM\k\F8-b_s0$f1X&25"G],^H>tPnjfEmSjrCYl%=$#kF+o/B29qOH/>A>o&uV005M`33Gbah\uMIKjdpj-&>q?-q4rR
%QOaNRotb'TeZsVZd.2$$+\!%EJK[I1#$M^k@4<+d0Bkh+i(cFF&.sI:7<L[X('R?.2P^@29$0tf#(!<OA]I\JBfTg1Y&B1p"PL5a
%`FoBpFO6/gW!5kiC)3Q_6L)Q%UOWB7PAjW_L=mH#*YtLl6NVB)=H5GR/!!U`=H7^dbb0HOUZ%#RoM9L,EDPL?b#jTpDPb]?1;kTD
%(Z]Hb7T$X!E_).`Lh++D'VcL5!eDGO;=#58Fcp2JI<(:,`a[Fal)1m*eKY9AP^jJU;EF799gMB0V^Y,EVQTQH"KB2-PGTH+)[SLJ
%'Vl5YqiYt66(!'8$W;cDcOclPE$KpILJlU@\01W@,4l7[%lVkU3&OoA$>#j5e$$P*#lW$K`rhf^cZT=5KgcN(f;:?]4A=148I?MY
%kQW4uJOBZU8C:cP%sp%e';LUH6QEoibEOKOFC(/h</6,Nfh;IQF]"U&L1__371G/_`$XerS-JC56L8Y[Xoc^!.VC-#2?@Q/n?=L4
%2DTrK$</.95f1A\3IJ&>AG/8R?b-ri*<%W1VSi$?6,%m2@,;VeI8F1RaUnS?Q:O*1aFaXuo8rZ3Sq@\C3?c0qQmfm>#:'@`=?.eJ
%./\m]P-UL:@6h'"5lcG`+dIs5#"V;T<'gj4?q<3W"H![K\VC5^LiK)(XV!6Fb,c%CGGWY(57/9>Ml>@;3'RR\!^n%_S+'!iL.`QC
%O\kMXJJDRS(r]f(Php6#+S6@Np\9S3s&"R]"1]Ot16`"hOI)FNhU!FE&@c9Q/Iu!MjpUgZpiq0;d!-PS#9guYV(k6f,3cX*O,jHr
%f^f!7.?+SPNuQ7^$]M!*bf!n!DjY"qq%>hg$]h(e]?b0G3+G/A_'.ILS3j&3PG?5`Zqjl]!iiQJaMo>HGm9SXacorP,BhaDU%CUD
%j)gl&\N6M0Zh[uLC^iG\6`UG&p>;PC"V/;B'7e/l)4eos]fbp]0aA-_%dXgh,3PU['s?$m=(R*K62JKt,:Lt,-Y[=Zl5/dm,-Cad
%?TumU@`38/EZu@(PZAP*>Go@ACkIOoXB)X'*)pG;3*:Td+UYPIJ=dgRS-o0(m0.)e8#O.Jp],Rp/k\W\5[&8E3],7+L[,c`Q:eZR
%3"Wk"+FE0kqNh`SZ?Xkk1'BKM<0^)^!5*ZCOD_rg\JPM+@f>D.9-5AY*%M/`Ff8`!*gt/=!/W`R%.,-+,71;hHqI`;kc!,,"&*MF
%8Vj8a>?_a$3PknRW'LMpF;5NOA^*:h:CWBFI'cEb6)Qt?F0Q"lk4F5k@;4]\&ku8.\Z?G6=jBs>A9[h@6[))MO^='D\tF+._$fiT
%Ad)^kM4k"SJjQng%,)6i&EpBln1jN'#k$'U]Hp5m`,dUNf1!%5#<#M&lqGllGc^5Im/4Z^<KMfZO3R='\6a4FBF$9mdDj.rYq]aB
%&&fLnceTS`B&Ytl/0.IdYQKf3_'IO.O:roifsZs&gXmlVFVnJo>eN8BHst@;=!W`@F<*r1N)J7(^TV1&%c.nG?7qG9KcJqpT^Ybn
%gNXFugUpJr'=-#))1hp:d&uAj5?R.gM?+L/h1A\d;dJ9.g-q&nB-<pP7gSHVT^su'ON5b\!k&,W_L,Q[T!g@HJ.-<+V)ZI(_.c6:
%?YXN*'0\SF@2p#'hU&GM1@T[^@MqI^%#"))5$&$.kb(FhVbcQJI_bA'5QWt<R#N^L)STV9UFkY=1:F53Aqj8/)+#Yt/e\((WNF$f
%,$VKMa_2<h:8rJZI<7#?Ae[$iNH@s!GYW/(iLN4<,,?`^-9@7uZ1"EKiZi-08;gCa_5cWGC6M[-/<0sY+G7K#FE(YR9/)bX#N7&+
%@*E?j&E`+riW^In;i\:<0sqe]e]3=W,$\676fC)E4laGWe@e+3$Dnr#qJ9+sb2FmGT:C*NHH"JEL5DZB&r/;X!t?qVS3bkjFQu6-
%>JR%C3?0503qZ@O&8?BRWJ3DcGU3S[5WAdJ!\b]^e*tb[EPhK<i!J*;+3[-c-\j%SUBmnag(Wts:U7;QAH;fG;rH?9&2p*<!D;jg
%N5D%$W*mQ<@\pCkg+;%B-4,(9l$=?"#Z*)UW4tW_Jft9!!+:pdK(uSs]CQl0U#\ud$*4Dj/7G0&J@Je'Kag9^bm8qjpun(]g#s/E
%pmCd]KS5XOk2t*lI/NC;)pCKTcLu6>>u+Du"bc>4@NL.J(`9]Dig=Jrq6;VjARlnTrkRMilt.8.gZV@,"h+[3b93/A#)L4%"_,Co
%Fb`WnZhcs>6*O6R&Dd`b3P?.`<#+6A_YcuiH0?OLR+F_[j]FQ9@0I,^AE22m9*S_B78K8U]bSO??-MU)_1MCU5n?n[.]C7LUeFbk
%dd^+`Nc78;"o0E/it+Uh3&/b=lXa`i@(n3E_EuHI?2J`q`Bir-6]"%Jm7Ka(M-i,RL(=./7)7.gNaiBh2]m],0dLL+AUu8G90.1b
%KJ),Tch<"X@@InQ*&I^B`MjT6Sjj=V"[!WqLcqn9@5\Q8-<kT0aMF5X70nXGnal2W`?F-ijm*cjo"q.A4Gf)S$]fhN5UAu0JE130
%FG7H+B:EE817YESPGCI!8M;bg$<,<"4"s24j^Nbf*L!;?*:qqg8V)>0<J%#s@_<;9OtK4:@ZnT%61X)1OrE/55=8>5-&:?a5uP5O
%G*8N6b&c>\8PfJBTdL;$63AtSari)uAoj-,0SA/SN=#u,A.h,IkNr-W9?SN=ARi_E=S_g=/(fK=eV<<'!L\uQ&-M2_2]0(7-s5Z\
%5quZf!cF\?YCQ"Z[dmS+E[$ki3nBV2F;UYuM^bFZmaAWaV;0a7#bs09Gb@Bl#:a^INJ2FVF`21hGroi@k^bat&(sk6dJPbA%7-(f
%k;B1@Lt9_jo`4V=2AL/Rf!rC#K)pHdP3'2uki/p<[.+,!pL!%Gnh5@mK],JQY%5'NbhWe#^%r^,\+"]NTYl=%V&TT?3J@Q6<qlg=
%,no+R4Z.a,fQ6<JUW(hE>RY+%P`cmicKWCEEZfI9MGMrknrL0lB&T/=c!pr1P6rYTGV0kQ2F_\CI-B>e-O^gnk9!/6=o+2Age!.J
%s*h`e,AN`]jl5.o@32&c!Ifar3D\)#WS's7b1D;bU\Ub8;a$-G&,#\rD^Bh['gk$hnE:FDE,Xe(02L&lk:jBlD+oi9JFNn/TVDU?
%%d-/-N0Pf7T?#t?OE:gG!+G^"l&ig2B<Ht;q425HFB]/E%]qcR9\X'MLH_:uZc6JV8"C"r+5\!g-a,0s(&e$jPSBd$?rF"\O2nBV
%5.4;\RD:Bf#]g5TeCAWlO,jG_O)nDuJ=fE%c#OMhT43tO7;4kljE!Y,R'Pb+\k[_t?9lIr=`6!cMb99uCWiHboanWu!+N[9`Io'm
%4r+u"5"&$,POa\t+/QS=Ym>u)+`PU-6>o%WDRRd0`r_7@7g4^F1%'W?iO!8A3M6\=R7g&qNpi_V6V.`Sjb1J#5RJae8[99'P6W-j
%"^W%h7+L<qKFEMj7\T<NL=2O;RntMI8T@RGaMI);+6NLu5!,)`Ajb%lB2<MTal.%*fK%bt6hePd$`;"o:p(;EOX.u["B&jmPla,/
%j`2e1X9$DY^dX@h=[5_2I\L'2!c8amcEZs8g@il3MrC6?0.2X*_!`c:kkHdTc6':[5rqsD4\e&R$e.nfI,Ipc!uC1^q$'_+025lJ
%OUhR`\@jAR@:9>R%Yel$LQfUEYKd%hB"``1+Bt9:$\C"fl"ekuAf'@EZfWAtGm<?>9([?oP@/chp`!^WStkbHj4U9t0MWA:j*8")
%E@-RH$-%S!4?Y4a6_3_,4^E"o+=1HY:J/G?Zk$tP6mI%Wr8lCa+npVpdN"9t\?6o#]OB`b@[Omd7%5/?KIDf!rEodZg"47E!0n2T
%KIC&%e6c*j"3D;YAiXj_)qp^%fR\U+^ujVX*lfk[(m\tIO3F\f&F[AAOb%S+YqOgU#OfJ!2&;[aYu''Q&$^Wf*K*K#Cj&KS7#IX:
%%ZH[JD2-^DGih=PZN0q:Zl]pP938YUM[L/j),5Q<8pad!Yatq;:jHHM@BQc8DnhL`k$\OQEZ^N(j+Q?@P!eIbCqoaijH&$5cafb*
%m\7aQf4Y7Ie8bZ8I^:gqklG.BoJ$*Z->#Qa-6W105lUtA`+gPUfl20HguV]R6^q)GFD>8pY[)ht:45Z,kfcq:OV]:Fj=DA<ka8`c
%PHtsf,N]FEAHW=>Zt!4\(]qY6L1)QEl'.L>D%'Y%KPG!7h$V9WlCkTomKX<61Lr,5Z06Q.O=c1n#Gg(+J523OZ^8"c/V0m;Z,&P7
%)h''g_I$`!]^Hdfb>+MJG`l_J:F5Dh/>gS%m*iq.1@>Qq9m1>%O6JI6WJmaGOpTL>O0]\-k?EguJW.&Npm.4S+QEd.n%2-n3B^E_
%N#u=bq@2!Y7ZDuKr1l?(V[C/6Li@$'A?"RF*uG2N((W7$O^V)EB%n$:M_#4.F,Q9.BM`+2!@=_4('RDYOF^h<:uMGd<$'^,=fe:U
%M]c_5A1>&lHA5F^jm@.!ZXV-fYLp"nK;1]d?a4$j)[k^$L1QLd&=3g-2mP"h=&$5)bJQ"dZIk-ZFV\-sI/h0Zo9.J75dK<1KnP#.
%k665UW=97u2Y&7.5-cjBSZYUg,,U3J348Rp,d];)-:)lK9/ZuS63uABNBsr`pfo+%1/M4:I&ml_).RjTGFKJ'-OT;]Ak!:*aq]Z!
%Oi>0V%LFB/d(hJ+hk@Gl9-[*o"LQ.AWBm@1GS,\4J^GQ.)4Qbn_9[iQ$a#DN$2uPm,>6"/aGr+$%7H.QI%I)"%6PAh*Z]H["p`_D
%i-Ho.`KA,;66nH5P9Yu$Rmgq<BQF`C#-ORT3fq6FIgX*]^uJg2PEQ_"*`OYBCHr`&#=/Z'VX8q%dtq(@I:Odob3DZi+#mn0I6l<\
%aPmep:%CA&5dGW\j-'0E/W_\+pj5_s9-e<N6L@(+&7usXal7q"e>8P*<0Vqcq7o3[!s.a]fOJJXd!-4Gj3<6L92Uk(d?t#l$NV/B
%j`$14kRAEU1C)G1Hn_-rfIEJBeCEbL-RIJO>^Xofn3IXY8l,TfDU\T3JhkW-IJ(kC3"Ue[POm4g^p^Hm)0l7[:&(5W(dhU"8LQ9&
%5[i=HC&j+LA\L^<CeT%m!/+3/b/qQ-c[ZO.--:.98An*X'%[ss9T[,cEX9YZ!8hB,%lJ\F<:S7p7O*g\@Tb2,=4+C:"Rpf&iab/s
%f*(UnH)<;Qgl\_Dqt-d>AP89F(8XV13fPDsaaiBe$7Z?2kqWP3N(q\#M0=dj<r$b13f-7E.VrfU,B78iAm[8@*#'KSTpVJj+HrM<
%j&0+s`35)jShXscW\BHe`MobD_fuVfGGC(eR$MpKle-d_U:9r$g2uLGB@U0fGTQBeUFAirX\F!D70X]W2N)`0])hdZl*Og\``k@Y
%KTHo-EHKXDNMkX]VW?qLh5ddL^6fUViCFdB$?V#]U_D6CkON(^<J:-Pj@s#s$)fNDT<#j9/4IP0H4f8AiX11NGaO,Eo@8!60S(Q,
%At^$;&n6\3jeppL$2,K'?fjhPOf25g,:/ePHo3&%8<CB6C!k^-Ks`+hBC7%;ot'9dU<Kk*FMus,XNBO#h@sfQi'UCn"-qM3WYWR_
%AW4l%%D]G@UWp_d<e7G-#uW4VdH1Aam7^Mu,;f&lp6F<aG!SR=fd.IE@XAn[WSe0K6cqhbd1"%a/Lm*;CKf^ej*T0E\TiQOmVT[G
%7r!^\?X[CjEZ+S,G7eX'QLM1?AJ!CJbI@#?XeR'ti_%hd2cM$1m7.h/87so6b\*@k+Q!1hHH=$hGd?_@2hbBnML->rOQaL?=3I,$
%=q`\Yft]M=+QB@_.W#WP%nkN%F3n-TkQ^V*0bn*i8=\FX#Z>p%MR818?<F^e54TVt&4M;WW"WoHf'?N>8;GO3%4KflP<jjKRo@Wf
%!SZ^8Pqf=rcCk1aBd1S$Hk_Wq#@0VeG^=V*%h2WN4CO7h?oHQN^io?%+ibl@W:4sMh/gDW$nUF%2P_m,I>J,$"\I;P\R$s2ZMH>]
%],F)LMeU*DMMW7o0E=`LK(2Gi$4="AogKn4O]:<4J`WkbRtJ=0B$"sXO&f/e49j]ZrDDq/U'!d[(`FbfQram0((_h]UTn=9XH@q,
%!k4E&K)=T/nG4*6E3(p5gXC3FUXd@ENTmf)0nAsJLU+;1Y,gm^fifrc;3Gr.i)UJH28D2Y-Fp:hY1*VIf+-PU(+!oGT#n!'$7YNr
%"1l.hjs7On*[)lX(=OA$N^6RmIk*N`Et6*'f_R1e*Klda[MrM#rf3[UOKK&$EYM#+V8jA`)G).obW\^eCQ.YIOaGB(&l2!-@[f*F
%`+'snZ&+aHKneUC,j(+$"9+bTK^@dr[_?NmE=NTNR)c[J*S+;jmVRul@fd)F.KZU=:9Ld=i/tn>dW_X(cmhCc.]&p/3;FDR-aT8F
%jb4h_cgVDlgX'@r.Z*WZR`0BL'<O77=1V-KBIeL5K0kuAZ/SbPMsYtmbC<r?*pG%;(`_KADMWLFnOb3(a<Q_Rf_!+^VWe'[i.b93
%HC7BQUKl:bF7=teYMMo%3:?'i8">g^&s"QmJe_p\6GZ9:DKo=;oeWAQ#\/"[BB+\Rbh"!?etP8?92_"knqeSV!(i3L%Xf2SL10%E
%^97k_/UYi;P]SIs)b[b5-MGX!i3G/GKoW8i([n$X99mU>oIr(BA-Ys8-8uJNMQqZp8ia=,/A/M5euDbQ!<Dl;kA"TGF2O`0-4$dh
%E(+"FMT&q.DJ6S.^"qY?)d:[UFrJ`gjsiKVdNk6bD"RQLfuRD?OpYE'fSJp"1?'iY=g?VnQ8[X:c3>nMNM..&noX5ONe[6mL2^!`
%`[?7sfh,K_kX*HLW@#5c<+1?]2e'0'D%u3FH"a/OQ8W+>SiE3#J-n^3f%>G\-9JcRc@Hq1p6Q=>(:f.]]^]hD*4die%6+N`.2\L4
%-Ep[$ph.ft[,9b%D`l@]<+.P%@>FZc#m7mW(7`F."=Ud&Y35;00e>ru&^n4U:%iao"f=dkAIsZC.qkGD0'E\=krO!L!%G;?3HARo
%l"2en2PtJgp^&X^fL&EP>Y:6p!OB;S:J(tZ"(MS'ZP]o,V[H6e?TtgYn8p2@9V6FC=X-NEPc!Y\83'Yc'2L9[dMSh+U=Mgn6ZPY>
%PbUs1:1:\-a`d`$]GIY$4A\lr6[_a74nP<Ib29Gn[].TM17mD25#oM+4QsAq+S7?A:[^fJ+Vn'IK0n#"6r$KI+lZ=h+%aEapf<d?
%*@E?CWDr+4GtQa6K'Li!>_ql9l\b"k+]N2D9]CI`b'V1(6]Wl&U)]r`AZSI\#FYd:0a3(_>VL^E#tX"i%QZ2XpNtgM%:#(5gJO!V
%Ts2<qb`(uQqm<'T?TE1i/logMHkj<E#[?.Z5k0gO=<.B@2Fd1Y:9oQt'=U)YinDdP7$jFH3U0MK(jp>.*#jU!'Y;%Oqg'm/%n&L?
%&p*'AQlS<#YDpIE.-RA/h?;f[VUo4;2kVG]3IQ`Ti5I?Zeef1<N5mZr9+bV4Q,>]or%!3n*h`D-"g#b<*(:%YH*)<o:3+0[&$Zb#
%Pi_[Fp=pr(jaH[odP^j\!T'_IDP4e$"k&^dgdGdIMChIP)be?Z6%INAZchQ+-].27DuR3:0RU$R!=T^S-_ZTT6pi?g=LT:]e9"AP
%p`W?8T#Y.JRf6QTK46K)Uj)n.lAEF[mh(KrA^["!AIlA$4oH0g_tPRWg66b6m=th>Te7ZUC74<qjGCrk4>cD5CM^b8-L2J'\%$%*
%7q"$l$U@ihk:7]t.fmWdQk#IH0R=QH21#$\WP9j\4j$3hK3&IG1g-_J:@JR`>=g6s]g@CX53u]?2""dC;5<=^'W'W1G\&aO_@?+I
%5'@4f8j_c:6[D@E&*'@'&!KW<VQMC5L?o((aMK.)a`2aC`FX]#Ue)s]FrtL#l0n]l8&F3u:J6?A[KqbF.,*TmfNW`*C29.9UU"5$
%mPY,\?dfDHG#/Ip<j\ZC:r_P:P,,@X0k*s=)<rr2g0@co.ga1b@p_=44G^B>0![4$&6._HLRrbseH&]W@J$q33T1eZaH"C_NS2:4
%1HZb\@<-$%.f>0t@>SJ=Y>DVS7#YbU:6lR9BK9<m-Bccr86C=B+2o0q4;>_4hKUpAA,7O`1aIo0%87rrH8aXHY^ZbN-Sg9(@..J?
%="%rc@,_Nsd?2HfcQr]?E>:eR\;Hk9[NHP7JLd0_EU40AOt$D`Y72Qg@u[NS%<5\_NOT%N=m>p+bWA_[JPWQm7M$Qo)e(sXBcY_\
%2BJcRaK@No$o1u3J/YM%5XVu9#DnfqSrLj<n]X_YMjG8DDJW*.L]K8UDfd*$'^lna)8'TI6f'M_UD_-TG0G?R%`QY)lt#m-]\VNH
%#0:2d"L]N:1S>n$`+)4%'@4X.^3J?Yo>Sn2*]Gu#*$g*;M#0[9n<2QCHHO!=EXWm](ssIIh@%[Ej#E!UDg\@ZE.@t*$u8a=1#94D
%kUs,9#KZh;5kN?L,I#2<44%R!6Y_QLl1A+O;@3TIl03@UQ7[(Oj]HW=:!mH3EjY(i)QP3q@JpRPN"8s"ZeV6Yc'ShdCemkh=L?DG
%XcMYHOtNZt1tr#RFjZtONm"n2Hn'T8+Z!/<c7Ytui\XmKDfPn'^?:$IJg8dA2cA9p^Gc:3Cs2oK_`pBk!DgL99T,^hp>HJta6n9]
%VruZQ)f]+D>bbtfLXH&ImfL8=P"Nhe`gKO]L0/ahiX$cG.G_#$$:V\("8%t!(f9u]^eB69e&a.M'VlcdlW2rJMMg*nWifgqB5K9R
%!Dn@9DfgfZ/?Y6Gk,qMM/%g4Fq>)Bp@9mT#EnO-.;__,U=k'3T"G[$I:^SAoO0[Rr.1nsVGbfl8Mr`q&l$7LtJdm.NI"V\#(dXhe
%:.j7L11PKG@U^R:e8Tu*]N\fA0h7PbNo5O2R'BB"&Ro(8Z/LMnQ!rQJeL.pJL"Y[`Q:4+)L3KbQmkYI^WhulnK[:_.Ppt2m+e&I7
%30k$gdEt.(]foFDUAS6>:-^RT'jl:)\><5*T(WL'kb&;7$'1>*:'h.>UdkoiL_ma+1_L'pG^IKJb:pF-WrG[e>'L*ELM\+,Nu8b*
%Nb2`mUTLF\<tZ(?CgTgAcR/TRZ:ud<nmCB@$Pu(F`JelWcm[1Ni>_[2fA/i7Xr&(r\aWUiI(1)L\HKV%eJS^8@1&5-1Ja`!(S5cu
%lN#s!(Y6lSPXpP>n.f@4jbQ<5Y'AAlQtpedIlbf-7lpPl4u:E:Bhpp2M@o!fF?PDr:M-!;VAe@[:m_WODd81a6t*7:#"E#RHJu'n
%QshV:mQ()1@BS"Grj-#c8tljOTeI9`,bZG+1X(Oe^ib@U0GhH&a)sKhb_7^(Q+ga_\OK(\`DOD)XMMM#MJl*+ArVN-h\="bbSicK
%4+q>!@+q<l2MY_l@-X6R9XDa9X(J53A(*0(4_3.%lc$@L<FjZWY+tI*B$CV-'c@H9&m/u$i3=-4-9a>'YaV"#Z>-ThTC5G%WhCUa
%8siY=7E$_:OAuBZJHb$BX2]1t#ZtWf=Ep:N(X*>hAouf-)68MKg.S8$9WJ@*oa+tD<XlbjQ84#$X+i69n:_+bWkfs9J53X"X2\%B
%XOOIhk`-F`Zt\&m!P\>!QrXYC5k:mbACY'*)NTh&e#KZ,_(s4P%':G+L'\9h`kn0HdPn6G#ESF8IEA^.S,a3TA9b!TXW#5MI6ec9
%Zt`'SDb@,MbefNo4(QlL!G@nN(IP6X?F=3'L/im!&;b=!X+h6]fFA4i)L=gjhqnpG)GH9th'&g'hfPreG=&>79+>mOb/gTV'1XMk
%@otU?C0m?0%;*LSmGlj!_#ur[q_tSp>OoH>_lCPjn&Y63X(HICIcjSGjT7o1q-U[d@jt\sa&-sNUb/G\MWHg+NBedl!DdZZ#7(\j
%Ft6>1M*]2skk!2;2WKNoC6K%+7GSh(4YGQDO.aR>+InGJ>cR^ub[EjMnR=>i&8J:5pGQWkQ*Fnt_?(Xj2&j@<kY:dhH@H&F9>Y#r
%ps=Sl!->F-(l5TVnX^sl*3S1X%#1%Y*JGE\f"&6;f/48He=s[iN6-Su\pTT,*kfQj@;^/%\<Qp:!ihj3OZph+CR%MYC:E[QVSb3=
%DqkQre`84#=-s8eN?a8a&T3D#eb(?Z'jpd:BF]W0PD<_r9G"p6K<)!i:eX!jll]Jp:M[H0HA;_unkipp$ip_S86>7!7Z\U\HV=Uq
%1a;jJ'59VRKm!b9qIMWg0acgXDLfsa(f8/85V1oAG!)=8/d&0diOVu!P;g=ue1-uJLC#,??t4En?YSPog>dKd\;^b4h8&6?.d/\1
%2mdFg,_HJJ"bi01ei29hIT2/"^M<rWZ<.il\3rh`nJROTHo'UcUoqEtq55'^^eI/G`t#kY/'I>l'LUmjgZ&bbU2ciXU&GVQliB(F
%ku\*qUss<C*M$>t%fZ21@/,t':\R?#fOk9k;gdpshrKG:qk:P36L"IsEX?tS624Vj*t:a`'s.,+UFJklViMRGfQ.a35)sg/$"#bZ
%pX)h$J\=De'$.n`)K[D"_ScL;1d=*E'I_9eC5/'&!hD::j(f-$,/AZk:l_Glc9$n]2P^(fAN,C*+le8e0O.:?G/MjV#nUq]^D>D>
%9');nk@(=mr;tHqN=E/SA!ITd3;3U5j03V\P,:Yj71h5A7_*fSWI\XHC(MT%#%ZDumKK#G=A[.+s$I*0AD9$"RO6LB'.J=$Mk]7<
%%\KTG>'(H$#%B/u>7lTiR/]M'&90=KV\Ha&72BT8KU53-:^3%5VWKtO=qnZ3B8\(DB0"76><L[Ui@C\&?]>k54+TCUB'ng_##-iZ
%,/bm!%,M5%G8VVG-l!KQXJYC$cn6."7_D?>=-?:gqB"o=4CG&PejqkdQ_b[SL=+IgZXT]Q71<uumri2/K<$42hh+=N&?5k,T(7#d
%%81ZB/n>nkK]sPNXoA@o^848^ABA^BR/`8;JRP4*^E6)tB*<ehBd"C@,qc0tOe?JZglY5$^R(R6bWS)JMlP(&bdr!`6Z993^PHhf
%J!lcH4/VBGi)&0O$FjBL4cFq)//CDT%-YqthbM7D$Ra2t@03/aM;s?6S$WPtQ9^og3+JGt*Xj,;:,sO\>[,t8nfr0]5&#Mm9iuP.
%<+?]^$8`lD+W(I>J7E0X:VVarkiq::q[XW0:@Ln#9H"-X[pM3ur4#U>IP*'0c';):Dp#Q;g%(JFT'P%f3Y@!Sod=JXF;2I2GqsH*
%(?K?&XFR.DI%8_!qkMaDZ_WEF2"hB&hI&%:!-c95$E&DX_&1_8s6M^qf?:V?gV.ttW<",s4"(juOXSHhI(855\@t!-YM-R'ls]qI
%d=q8!a1f9:4Z`6jWMo,hphjU"ddp8'*C0i\<mOE@cun,ba*`PPM5F:XG,/V3le%)jM"RhM1MfNSF`;jq0aA>F.V/%)fn744W]5[r
%;"^o&Gm9[&6%fV:?cC"oNKZ,eU/LopDhC;5f_3DLg420C6N#Oss7_Sa$c#mVPp\rs\>m]iT$=5<fKQRZ32\OR:O4hnWj1\B*DV+l
%&'I(24Z[$s46QqPaA9&g@O;TlJ8%e5U2#[ob)TCo(]-u>8PL>49B6A;(L,T`Jo.fSJ1=7G()!0L[73QNYWXqqogF*]NTA-_5$pQh
%hn=#gj".-Z'hK6heT=239s^!j"oRNp\NXg.P.QGVh$U8.<]pn7[u+M0("%<iN74@O.&0*dM@gS.L[a37b!Pbpil"iK[n2BZd-UlE
%>3H35^I`V\AmXZreX!Tli.uJY5Zq/1AA05PGLP<-bll$kZV^:scA"`ig37Zt"RpHgeVOnJ=(UC.QrD_'fjU]%;Jacn#O+jA(N"?j
%L:@I>D0@JVG1't-JKls#GAUfIbt8V>g-dumcFTjsa3O[o]^!')U-9iNDr^!9k\)&>:2[co@EX':`IFr'q;X3R5i5%,Q3%g6.'i(Z
%`F7kq;P\Z>;bB6[D6P/<%&LbEML1!#_^#tD&>/Km!<\tG'Seih@t-*ea3'PE>\>Z@<.5SVh@Ou2-nJIgJ*H1Q9nOO/)Vu".`OR[=
%J=qfib22:NP#fB6F=6>61[&0YcKAPPhtgiu[J5+`#BGH<Zd%'f)Z(\*3=4pS;h"T:r4V`I_8d[6Z';9ZM(;j0F5JAQnf6)EZP7)-
%@N:BJ)t'QC)_TTnNfVTso22hk\Dq+7D%jXRKXg/Vo2m!Yhb0"HHuJ`'qbqFs<U_2I-%W)!%W^Ao72$Ym>.EOuib-XS?Xt?^(->eG
%Y'%\6c9KO4]S?-kbTdOVe7@G_q][$b6)cp+E/PQ.h%#uem*l["Ke^g[UF:V"9m_=*2c$`@n62=jHutVlmjPi6n?883-PP?4Bj*hR
%o<CI9:`kSf#BhQ),I^3XMdY>%2TF36<B%?A-p<;VIHM1d\/C(bo0qlTE19^P@o:`Q1"u,7d]2;/Z/X3ikYF^N:q.aM\$@nbA1e_p
%0UME#b0NpMchTO36nHNe^2Z]F/^Kk<-:Ibeg?YVT>W!Hc!8@`Tp'UoZXX-nV<i<?O8i_d0HgC2h$0rh*?E>m-[lXEeBAiJ]`.M#R
%DO4s4.I7-=F1[+S^mO=@0IFIAb^B?8q#&,TZ*mmB`r"Q:"%1@;KNP[6_0%Z$e%h@71,(&g%*X*H;o8IRBjfS\k?Au+RGcHI%/n]K
%>#q,7:AM.lW#W[Z/o]V??,Ead0`LHTNQS5>_Um82"Q`5$Vkn`r[WSuL[tSrqO%I)ME\*4#RXJbLL@5N9khpd`:rE.LVO;:04_jL3
%]^3[3[tV4]kG7!iB!.)&BXW&k%F)>a[\6jIo$I/8]SC0)=f7rr95B`oBn$Q9=rbT0Chr>RRVcbU6Sk@ke1eXW)Oe(@*jtdF=Qamq
%Xg$-'F2hsaK5lSITuL&D8hEpC#cS0:2eFc/cj'59R)1P9MdLD[qDD[(h[hRZ`nC@SL.L6Oj1O$hXannKD7u>L&P>-GfOu6N&p`;d
%657?WG#^6b6\%sa!+,`]L5C^H)AmT+N'oY+@>!;MOU*5-R_-9IA_<*=J5&i;%]e/Ye3I",=hD5,(5!5Fnk'GM$j"qh^G2PZfY=WH
%O<Zngj,WiaJX@7Omtq#d'pt=BoH9-oWX8u^N`bZ=\8l&d""1//Fq4CLP=hmF,%?LFdulWB?q:lgG$'gc'K)?OnN+V#L7(X&R.#te
%oncZ3$C5nad`ZSNYH,6PPsB[5Fc8?:.oIP'S_l-naeMd2Q9/&0CIrrbWW3CG*&YXP!@,1^dCBNN*O#;["ES'p@q>7*YKfRT:^V_O
%80J[P;YbX)nd:g:@iJ*;2_+bU1^R7mmo&h.p3"u;$gH8cLGFsN[t;$Ug).ob:@#'*`!?6Ph#SD?-]1mh%WO)36;HjLO7?oJ]'c6h
%7UG5bmMZFT\o_5%oHffOh'#hXE@F'%h.-KajfH'(YF3/.]+3Z'T^l91*ETFl>'HP8rU%8c(d_#lD!R+3a%D]V>^(]eqFof0[dJgh
%p8<&bM6GQu>mH+Z?C+s<N2ZWRl_m8=-AUKG9+(pkUX9]4i>UtG5LpgJB:_6FgR846XTm#m>B<2`AnaMGmSTN>B$G`kfG3'?Sj$/Y
%NHGiNj&"($=uJQ,'_Bo(HSCJt@+D9f)`Hf_K0lpqaF&9tcQD:tlD0[-OJ@>;D_l]a2D)XZK`Kbh;r(dLEr4R7G^qsXS;50eM7R+:
%i4N>&`8kV$=94\[@U]>ANlJNV8<L,%@t&$qb&+FPj?_SXZq1aXg`_>/j&j:d9a0'6lMeIG):'>JR_l2oo2R`?Hp^rPQRT2s)t(A'
%"2^oW`DMM^O>&&o'XsrBZ[GE-Pr$GW$3#0<j?-B,)G5E5KZAcI[i+";%>TnZp#&N,fBNpAF</H1LTl:o[am)<\&X&R%P?#q#^1eN
%Q6]]lgG="$L8Vn'FP.r)SD`snd.HgJX.@u[o1a_L)g&?a#`PI>6Zr`F#JC[%@MSNZN-!Au30'#f7I)4T*l(kmE?l,6!Z%Oj=2Q$;
%(]nRTHOSSDBl^"mJ>'G,%4XD^)JDOi\f?k16o2!JY'c>O:4+2^U'F[!B,!LT3RA9[:u0dA!H6'%dc(5\FWnRt73rO?3+N"2M9g:X
%kE*p6NTUcp&cH3S_(LTRPe)[(a^+X>!o4Y\2:<g6>!?<dfYOcF;h$e?nT/sD98-cfJ#(E&)(H5S.MQOr>S=:slBo-$AsrfVE']aH
%L2=]#4XMLJ$n:W\T_ba05\/1KGJSm>j(CYWg;]dKp*OVHY"gV?Us]Ku2[<h:De#!NY>eF.]Q>2R']#%HLb`YJOYgK=RF$SFi]RFj
%)K@[n&WbcFf_@(,,sk\urH)Ej$I7tV;BPEmWb!=G_=/^,I9.M3I7PeMe^m+Fe,6(,J4!;L?rPqoWbCD?+,ZSoG4O''9Q=Pj4;?G!
%Kk,el<+#q3AFG9X++*df)Z6O$)WBC63U'BaLa.K9.4W"6f@I0TlV&]r&3M+M"1q<t3iFGhrN*-"WT4';18@!qfN]@3,qhhHNRf^!
%/[.RY2^,:2,Q5ulT,2mR!!`Un]E>4E@fe#NA>.i]iBsps`:XZ7fRnY:M--8J6hh=+?8-gDaMB<YEYmH7EU.N>N\/'tO-ZH;[`JM<
%%0V^V4d7p#]_ORe.2?jSB2oo)2YIIrA,gm[rB(\#6R*eS\a0b_$+B]j!&ENn+a(EIDaJ4Vihh0?qL^sZG5aS+aR!9)>`jguIbKKX
%JipatY/NHmOF,Vo,",-]Ht&JcBXl6_;-pK!eJef8!1KH3)uEADiOEr$C)Paj9Kh_>'m8e5#R:D*Wa9E1A<I!ZL-'F,Jcn?V[EI6C
%IHo,-c.h]OXD.lN-iF1*_LS;<c-+b0puSB3=3&it1$uV5S/mPieR@-an?<>mk`?qSE_PD`\J.[Lj`)1cn/1JH-N*F#9C[CA=)rk3
%7UfkHdCNMO1Ma<u)h*<N\cG]7&Y2ujpo7\3!Ublhdg_XBU@IAi?LC!0.rhYoW3Y:L(Btp[9If"p)TQ=X_dk`U"bN7*B(IZlH5):t
%'Y_Z0A'8#RIE\/?="G0G=dTfU@7p7DLuJS'mhXU_9*37u>.+[DcE/AjI/i`CX_EUYB>LI+VDVnBT=T1CbW7tWf">Q7",.NekVPVj
%<VX?Y\LMG_5JJ;YEAkQeJjsk@=8F1VIV&'s,SMA1;&?]R&f=*^@:dS)1IEWhSB)HXb=fn72Vq)u&a\P?9\<kNA>3dXEt<f-2YJRU
%$PjQH!8$D$pk=`IEpmPh:+F1D!O@9&J%09&+*Ual.+/,Vg5k0i"V^tZW=Um6b#X\S<Vp1FDK--EodnL$62s-M+3qN48Y9tGf:YYb
%<YCg#a5mqV"0tYAEI\p.:b2+YNaHu#%mY!:$-$;EBJ3NHm0"e4[5%/>^5U76B\\0,;@!LmfW'&G#!]f!$@n/e7hA4JN8,Th>%p.@
%lH'es9WmnT5.4]#hC-TKQG+/d9q`MHklSIihB->s!hf7T^D^=Z1!r&3IdG_tIuI4E`nCHHB(G""`KWe%%hC3N'#n=+jCF;r'ZG%E
%1^?5.$nm;jG[DTcM=+8$>r*MQ'hNMS/R6@T/Mg;/+#UEe0b`"0*N(?hFmt>u@ZPY6A__-#CbnHKUq=t+lJSq5%S4m9=Ap2s8N'S;
%FQ??9(;[<@6Q9J\pZA^P_\g>qgn]nGZmYG-]5Cj_#rXfhQ`Q[*`oX8MKPVpR[pgcBS>A2r4Mbh;:o1sA>2$!dJmZ+RQLVhrcZ^S`
%%'JJef=+W898RW=5#<"G$2`,gLP6k,ZeFq`SD[2e`$Jd>cp^4Dj>0$cLo"`>p=MRK^Dl]J't`s,dd`YP$oVNa5%Aik7gs5/@q+=(
%ijTj=j//G`S:%P<W<WlHQbe&T+U3#$Tn[`_::8`?6`u;k(F6M#GTP`jUO_dY30WE>B--b<9cQ?GWD&XU%=V3n=99]sE#9UQa$0@p
%\t?b&(4/7Gp2#omkY*n5ED",/p$!"gTj-UV@c^rsWk9"jLL2+[pL@%(*G6>?Qmu!HjHX2S?>Z2$AJ^Z@dL)&UDhZs+*ts>F]6T@!
%RKbJnq9Xkad14jQ8_0+?qJpoW<k+a8bSi`m7@[UK66bP,/.#ko9]=/I"R)o-Lcc`n'lK)IK6I7+J6Ude?P+<S`HoTd\5]'"[rOup
%*eZ:,<*$r78MVU'0dq*f$*is9T`OZ_nZ65tc[>QbVnW1)H`%aUY+`Agb96p;,Y1(Y\$Cqo9Uk_F.=('QDp=fh(E2AcRjgH\4PtXo
%M:dXI)dU]KrP@9RgNNuSX7XT.<+VUBrQ$N2\W=mtS47&s:SY4e4beN+?iRP]SB#30M;,O.6oDDm)>;T7g%KD?aa%,bGTIY7T#QKQ
%J$`4Jn+?9c69SZK;:KtR/Yj]?9^bN.aaRG$#b<jWoT!M$I-DQqbG^O--#Z+Ve`+$!2SiQhS*X6NLN$#_j6^nZ*0&U:e'Zrf3?>f%
%_V+>Pp8*LR.:%&gK,2o3b-?o6%s+0]Xe-![kiB1.%WuTGkg8#tSq_dah^$6/3fV9e8uGPFAD]kq(;r*\a(!alj]G42W0hNC'u#)8
%Q+<!ZqYF6Gj1CL.Y!HG6Zcl%X7AgmV83d2@IshPn9u9=+#ucT6$`GIJf6j47@nG4M3oH1SfGHE3_3CDG`&r^r"U*+F<hq!cl?LTC
%AKmd(0eS"\3>BK:lGl?hW?^"=Lp/G':!^32I&;f&IM5OiZ/c>Z)FDroj[,YU(Nl3f8[Jus_Zd>_"k9ZkRh9/:SAZJj4A4k69(l!P
%4PqXUCc6b*eW:*e9[?7!QHYjUU,dsj%MqriU*WfPAJ<Rm_?HA_(pFstU_<+*+;CXT6UrPOam*#_ent]u`-'mIJl,`+Ht/ToU?'.9
%!E:"r=LDW9.'stfe6X"9aMc0nq<[11`5'Qib:6^bp#Ip+d<HX[SD9(bTqPjG*SRT<:I[`P(Lii>r:ORm<[;K*p,#aqKLO#d?T`)l
%X3dWV(_[c\=-e2EJU82FYbUtiPcWo\,n"pS8-;^`#!;;@jDThXfhB_23aob`;Ts-Ba$2G'AWh?C97"GcagDO`"QTUbY/ZhL./b?Q
%qnY,+Zrk\7"aGd/IJH&5a$RX$i/tG/ojC5]9-hXu',jaZl)9,*5Bb6(8oXM58_3XOq_;spO/dJS\!%HtN9Lo-G;iLt;RU6tn(jAH
%4Se2.E0reI[jL/$/PulX8S3SPOm^NB]3+W7<TGK,JFVQ9[XfW(ZnhpN%&+5.8saGm<lBV56Lf^[UBX`GR>Bmn'qU%m.`Wp&W?[;<
%[OBLS-b=u?*U9oen(s^.iiHlra8Q3r*Da`:gn%W`-F@W:K"mQoZ@.'l/<3rDh$NbV*H<HJErr%=@SZO'3C-AF=d6?RJROoSI;<U"
%&uaFR`g"BBd(\m?W&3REgU8CB_]jbRm7KqbLejKQ!6?^JYkB=rAeEt+[\QEArQEuYi3Z.QZ.sMuEMFqmL2BF1(,S7!V#-PiVHe!s
%F%aBCKOF7=\`Y=Q!?"OV0LeKUSE,6\4HYf^m:%UL7PF:a:4!7),[6E;/N):Ccscu_I;.GZ"S`aB-JN]CkWIY0,C7;X.bg"*(%^g1
%^&hf-qZASqE;"aT`cIh&`>Yadf&9PZ(IqFn)S<d.JK4pC;qF^pK:,W2NZC-4.'+7=GJb3i$Wj>7AX@"BgdTCuD14#F7U<H'4l8+s
%>6afcXAmiI$a$D^l-T[M9$+q5Ha!WW#<F;/r71lMSbSq]",Ci=!/FZTT4SmQ)MsZ*lc!@L^X9jr!,QENi=U9N,YiJ8Phn$Ps0b&o
%jA`KSrsn&ekm84o7A1ri_#=@*T+kL.aD+h7)t?Ao^[6)emZ9>329*):]a@7dSFYD^VeA3)2/W<]B`3>79fLs[DY8,.<B@_,RdGbh
%h5!;>KjiDhrOo]);aL?91KQ-H9n\PT&6V18rX^>7JTV[YgGY1B(=+&Mn[/K$h<f=ffT3Z<p>%0lJnOu3muC/E[lsHY%6?h;9/S,@
%*UQbj<?*ra(;/Q$*WZ,Yh=IG<!"L!e#e(mbs(8?K^29&RD*<QY:YWKncaSsQ)VS@RV->&(lY\c\2N[Q$*IsIa0a!A8`mVaG`Um]o
%&a%pMZKbF\eeae-p=kV?MAONqlEr!lj(8.3'+oO0=?LnnOp#^)<MXO=jFdN1CUduI6n+%pLuB2jIk[I(@FN"Z/4eRMn6i(<W_Z/A
%XIu10W'76`G`_J"#\''64T]Ymel=-NJoOT(Bd2:K-[F#hgT5U^>_/b!Y)),")/C\%P77Z_fZM&**r&+PE&@8cOL\q#1/V5,2&)WH
%So89I(*3l`1,Fl-QZ:j.[iI"%Y=<PB6XFIP.:S'*_:tmNdh-]g6/Z8CE12ik.Bf$oE4L)dq92nC'UB*G7,4&Tnn2ZEY^(&2KN*1:
%Ku5M]UDRu=<U4]+&rHK"MRt>b3D<a!K9((jicnYMW),%3#*=GBc\GBC(tuRdTFSXKBg4*YP!11r0S*,-(^tD$&gFbl]`9c7/V&c/
%N&P,kSQJlSaZ*7dLP.^B(N:``KY6!$"E'?4POGqK"u>&h0RMS,Ye=X=&IL'C?k#Tj63D(pB?k6Vi3S]*(rACo/jN]q-iOeu,"o-J
%%M?RfL&sK5>Xh'o=K3Y[(ueX(D/@IQ:8Q;iO2>a/YSHXU%d4*PWQ7#`Cr&IQ=d9;h)m7[OO5/HK'u.Oc$16>P"3c\ObpZ;eEi_?u
%]4/ttDVH]K5`=(d''Y*mPAHVjdXuKU?n02hblR<^<(OjXKBp%q(5D((UDg^=MK!(9_O-"tO^Cr'-=X9uC^nepWh1Eg&>ImLh=MXk
%`glm!*sY)GEnR#fk#Fj7_:q!,a;Ml@3"i*tdN5<F2R])('7f^P"*#]EqQ/=UC&jJc*\V?=XHPq<$t+NlI11h;GT0NsfF+q3d=2@9
%'I>EpN(K06kuGa_`3#mj@2R[]87]a1OPoQRKT#'UQjeM6P)Ca(RuE6$2rgT/7^^FbHoiedp\dlK$&UX"^g[nCF9+l5*<`nBU-Y':
%2A<S+S:MKb_M\IdKi.a%A*]_7c6t:3"aORPZ!_:(j'YG`''N[&Af@]q-75bq,(jKWeeU#a)<)[P&lW_77/k>lkc1*P]f1'BoD=A5
%/T=hJk[Z]&`]iSiB<6@Pg]j/KJE::DT;oKs>RKNWbtVXSLF<WhN1+u,gB","CY1Bh+q:2s@Q0qP_jD-'6Ii8ZCjIl#-q=]-/=>?D
%g/`H+@"1m_Wl)A7%i4_D*LJ'B;+cFhLcfGN6I]-d40hngm5kV97C5"6ZW(OL/@$9nq]X#^c<eOmdLQ%5Xclr5Pf*:UPg_c$abkb6
%rH>62?RMuL4,kX(]4'\L'%3-D)JZJ$Na$)q5Y8%nXtChEm^!rfQ%efp\,``DO*NNn`khr1'mg+_WX'dKE.,,-SMf/i<0#*N2m)oC
%*E*<]5MtI38n$;4lL1*<E0BGa[`p5-^+#(,B,#S!R(7LdVueWS]?Vg$h#W8;c);%T`LUU?7[AG8cDZ]<^<EMUP*9jR;$!6^O#*e9
%k>*mk"b$;[7Qmd6_e'VK#3Klm;:$jW;oaik'=M7\'_%fR=<B=+I#[PVUB3tYl?,RI`2*9Y7Qn3B\%D2<1LUqbLKW9!>!+]6?8Is8
%6-j:*4KIXq._69r'V$'%G!C^7PgM0%\:MX2^$Lh[9`MUoOD?f&Ssr\q%uhNs.bAWd!eEL%.X\uD,Fb7&"gl]Gm/V$YB5r>N,"%,1
%%,V43Lq*&E.;@CS9fclb_n<hmJMk_\'7ABD*`j,rLr(I)Z*rhhd9'S4&Kq]onr,7Fs&dqDktt)\ore;UZJ^0RB(SBRa9X.p-Hi7F
%,,6Dn^3Yr[\m`YaY.0`n2dQC@\3-]X)%+J25OT(/oLM/^YTu=2\]QLDi8l57Z]M89MX2bXeX-5iN'=YugCB?oeP%\2_G`\]ne5X'
%Yf)Na5/?-hI<LKSFY.K_RB7PPSQN(Bkj7WDPX!rs:rqD]`5"AfOL4eoU=DJ:p#I*72a*r:Z:C]i=4"%Il3[6VE7&889%BpE\@%bq
%!;/"QcFYjn?;=C?'t4jgmfqL8?]a\oLbLNNbbqZ/EX^]^&Zqg2-q>lC?St%7,5"h\lPSQ_19"1s^YYsSjdWsN(td2<]uaoK@u%+f
%PGg1\]#O7L>Be[Va?BB&f*H2JYGmu?)\rsf*D[&tCnPC+oS$WR(hP(<ZMFg/ViRkXq5emjr1\Hpd\#%5Y-aCKI83`49h"!;IU6p"
%2HBeUN+hkQY]t"MmdiQ\&rM;Q@%lY;0W/#qaYXg^0u\MJ2T6#h.EgFiYn-nrKq$.,dM//e:m0.dEht$L_3YENhLa,?kP^0pYI^u[
%+<AugK`i2FLKlV\N0::HGNN]E&.gmgZTo,G$l&J2TB4B"2SV#\&=9a\[V>QMiU5,?$L+fAgT?O!&#?f=>0Hf+E]CjX$tGAhA3bj[
%TH7.<?f?,f>"P(-<',+6_XGo-aX[YKlE419+Y&(YqL=g-AWVt$X?`4UGs@)[fgX?)0IZ2q%:p5>XD[n4q#Pf")+O';ktRU+kRihb
%N'B,fLg[X$^"/m2%$4k7YANNs'!+*0&LJ$g)hHpQe9*6tY6#FhJKk2lCLs%LPItWJVgA>F,tLo%_Eup7!4W5$_R&^=n3j3ka1g/'
%g9,e)[JK!$:;-s[m`C3!5lMadh,ardrY>NQ:%_T/:u(1;k<uM)3Dt6l"?3P.*aea:;Bn9,6VN<o+tLo^mcnfYPeNde<+g2K:]^4Q
%hF)MlpM4=:G[!Oj1g0cR$s-M!)c69n[+bp7TnQD6BA@qO/'-79mlEl.UU3j`'Eo&1E9We:1_WNgo-XoWMI'lM(M-RI+!,i4YC#X&
%l]8'H_#o;"qUeAlN_F74WrBiWUC9lT(6pGMY[T]0S/=W5Cd_+*f.oLf?3`!B7'tLLIh;PnR%P1-cY(WSN9b:9h,JF#FS36:DLj:m
%Ku=iMmUBF$=M9EFTr<AH<e=CIKErVj8g@t"b0IOh-3/PV6W_#<B_iR+r-']$nF_p\:B64=^NP3\T[W(<j>n0#J:P0g_(<jT]SJ7q
%Y%s]=Z58JqPI"h@'NZhZo?[Vm&`GcA?9X=M96Rn!91(KVIsFo!A!RfUY2Sr5R`/-ckcE2E8.3?"oCD!!#:\b`i]b3d^0R1H8_n[4
%<qELFiaXu'L7t.t">5iR>rI's9l6%9Z1dh=?+QB5XQ!hYJ!/"$C;8]HQOn7;&4*Y(TO'@$MM.^415-o"4EpZrq`1o`FeSKqV,E]C
%#dN69=g"kGX55rq"PR]eJh'9*C,W%&7M7=J65^NSN`VEX9D&59Us#*S]s4QnjTsL6XT4]uq/MJUc(lhb8ZN+fhN"Pe+[W/kW:U?k
%86n+<)L6C3]gl7=n5R568(VH&BFdPqVi_EQ>uh7B7tsBs5`a,R6n'GsX2dX&iY2Ae7^`:4$l^k7"AD\r.HqkOHf&_Pqt`Uja;%`@
%#*4)`<Bu//%0*`90K@9GY$D5)7S)XHX/M1qhKBW%]CN$9Wa/'3!S;07c4m!_>=#dLWZTK&"UXce8+,,(A5/k:=,@BhqmPrCO.H4m
%qoX8uXHd?a\ocI&kk_)j<JtV%8SJ[0ME.#/5^fgaE)K`74mmu^-_ku7*98[#QgGE>pbQf+.!W]C60O-P$<E>,`Jlap$.a7g=gp0F
%!lIKERajDK:s4b.-/BM@%bP6g6=^h)r4'-;06H^PIb*0j$@QEe$66phUt8ai%)Kn%]iZruasI?*(1MfJ+C3U0#gu";LWqgTal$&a
%O4/8D<k&A<0G#%48U5)c+cI]+f&^bjF6@o#I4;/^R7ADrmA):IdKsm<[/2)O<%,C#74?,g$!&=aj=DRtZ@iZgIP@aq`n4!q?b^or
%H%/FBX&tN&K@P0\Dpu][.7mQtmae0T.Ii>Eq1b6jp\pP-Ad*]t;'B;p16POm]Cb2175Qt@f]7:p]l\V=a!<NPC00)uJ>:Y^Vit?/
%>#Y3:&qZ2#S'$fTn"n&40!g=&[E@]rKd-5)0726CSC3b1'G5Y,d.)]liUQg^X-K]X$NNr%`7>JF&l0Q$p!kkYVr<SpSj>eF^d;15
%BV#ja'4@$nG.b_"dUth$;KIRJqh1#7i"@:SgqH%EK;qIh@hPpHELK7]-I,g#$`:8o;\U\L-Oi<h]JDAtp^iR1_->0_mKkWK><t<=
%.@3a<1]B5-0.%Fe:Bfo09K<mI/CsU$7u+"U29\<^<nUt%pD!s<-$AbIiq<qL(Lp(>n/)1!KeAaI>?-uf.J72.T(VG=qD+PV9@r\n
%l<=%3qT'hcelW`c1s2ZnEg;qg$peGH)9-U`k;JdmdRKGS%;p?/H[I;PI:O/!2:&aX1c<0i(=V3Ei(Z90Ss_rb;K*u5b>lB>;@BQ?
%`nX@N\!6IF,?(ruGa!"P5"X<!m3>Os>AH,#5>(=&Z]!Su;\@bS%ae2DUE8SBKH$$X63CFc:PX"29#ki+Go'4Lr.I*4/jc.4<B4rk
%BCf.R'6$Q\G/Q?VJ3=ARh\pTbA/DL.2ENP>Q`G5p%!pt3M"Q17bs($FQLAVKki2=2Ta:P:K>sL$om"^=,(dR8_'c5YN\Hsh_*^Qq
%>,DN.j/uZ0'FYh\5:bA28a<D8?$%q&62GVe>2PC%/.EW%fbJnAr4F@g(['g+7HbtW)LK3KUR;`N_rH@dBpa(`$3t0=gQ>*BQScY@
%>c`qY%<307qBu]"+Ed`U`3m)L]Sk"-doC40rK*++d4ihs<LVM9GG!tfZ419Od13`-=Fp<7b1Jl7&EAqR+tQ&P!5N"BcPEtl(94`?
%b=uMUq&0s5T0G`&<-:@UlQ?fkAU]u`#\goZr))W9<YtH`K$"o56K[DXc-dls?6Jcgn.\8`V<O--iT8j9>rCsnE.W7p`N`;TP;K7a
%/X&hR3Wnfi3,G1hVb6UDeees5eRe&ORWrVbq5;").q')kfRl%CVf)bn_6th=c2\N:rGE*NO*l@8@T\)2NG9k'bqKjbpXlFGUsiTV
%2cHt?)?Bi0G&UOARW$s<">S[gnTi-^h!@BE+`d=WUhp#V(Dq^n;T*3geoB?X7b(8./Fm?[j@h!.5]IDYYA:Xt-T0,^4%0q,Bq!Q;
%LXG\4[b#AjmCSj02XktId>`q\5+c_'n%R@X/nP*/[<]]rXe3ne!/u6aChP!:BbT_9FYgH[7A_<HkI)ImXqs+Hf'>6A=[uDJK&9AY
%bEuFe,`(K];tMQCTf)<6iR%tFm'3atG$3$s>?=8Q"=&]IAh4S]j.q`@<8nkZ1F^[54W$SZ?hCj$*JPKUYH['sNgUSR4mC?^YF>:'
%l%GNj6n$&m]CU.md@nTJML]Nk@*R<.\BjEGP.YORR*D*b48Q2<p!DCDdo#oN*!kL%iWO(R!u^#[G/AMIK`tL6%@g&>TMR6S6adJm
%aEf*CoCbPeD,WL/DJ\QX6-eqfo3VW_9DTiH&VhP_eD/(%C1EKoKi?uRRKgs",ZV0UY3UkaM%O!#]ahConm:^CGuW&KhZ(Tq'(8:e
%+Saj<QV9p7-QTlhehL&eLiCWb5+jDeLa%RDH:kfj&B%_Y*QJ[nV7W@+a%<plpA(jC$OPCJ-<M=%:_h#s!YQA9Rc[1T?liZF[i^Hf
%j6jiPS7=A2M#WkXY`Nf%BaV0QYrke6+hE)?i'\5oCN(Ip/+A<c3J&<Re?1p5n2qRE4Q7J!Y<[nto:Jp!!RV$u2eu(-I0$4jbs$LM
%@Z)XFN`]5GnI"_E*TH,:0Qa`;Z9Y5_'?aR1lfenqLr*HJP0kdb5bGEmqc#-d]h^.%0Q=uU&4AD<W?S:<gMZH6EF65gpM?P<+%"gL
%cbZ>UYY-Q".[(X<9WC\>)49ZkX6(.,=NZ!_9JHUpNAoK)919LDkFr"(J0SLMC,k[u)t8aiZWC_dNQLN7EiM10_sE%c,KG?_ZZhju
%qN_Dlo&-FEZ6oaXXpZ7qe$jDZl93e51!>Cf)J:I[fS2KgC6lZF+\bLPK$d\'L6lWW[%<On(g;Ni(eXs@Fb/V]*j_"871[g-_rq8'
%r*\qoT*=/pGQ"NZ'oKLp!X`<c&s?NX@-![fOc-4UB;!lcm*)f-]h$77KQ'tt>>n",&L2Bd/1RUVk*8?+7;:XuH-/0D$,Y0P!LXe!
%R1<A,hUXL#s#1ko.QfkU?u7IeD^PMZIX&t29dKlNIC8+Be"Rm!C_5YA9^QhO6aH&0bepstKqQ$Y_3i2%Aa3RX.<8O,@nsWYU4kc_
%X1uSbfu=W5&&r(C_cM@-%riq-\Yc`Ee-d\Y=%a`o#"!-V;.BA9VJ(Xfe9k>W'U15LXMI>+!uHXp*T&G@<D*V+rc[&9?e<iirC7Bq
%F<qYNo%mR;QMH;FHD2Fr,X]F+-=G-=f9EMP(li:_fJU7HEtUYc<_HkY+>+Q(>^,k"CFMC1$_h@7g_Af[@&4T2;0Idfl?25]_YV)k
%h,fg[<?a6ik>]e=5HIHZ"knZ)LAetX_9C-mFOT"-C"ll'i@e49qH+U6:oeN^P*VZhHDG.Y[R#+fln\R'-T.*K-E:T=&16%M**=/H
%)9SJWoS>o.(m6#TS;[S/Y`9P5C#+FRU+T9=NIcG+lAE6_T]qAfBNt`kR@H9]EGVMklp1to%W]I5A*>@A,8^\sG,q;*.r$%Q+q576
%6rT>3leAc-A%'KBPPF?oWb+T[HSDEQWN5Rbp"5Te-F<CSepD*c=ZTFDgTL&!gnie&kJ"`.@C$CcTf<B+Al`Y"6)r3a<*f#ElEu;5
%dENlcJ_/-9e_b7Kq!1G@W5pOJD&.HdfqNBB+t(2A;eB6680t*A4Eb4?.eG!N30Nuf3W)1Y;l1#a8JD1I^S[5?"u(!+<:a9TEFj/'
%ZscsRj6#"3&AcJWl";;?0M4jL2_38@6,IR;L9JkKj"[N."Y[6YX2f-/=4%QohlM33+U]NnXbBnJn2dV#!bfeUdOhE8FGT"W;&ob"
%61:*CF4T7#cVp(7*I<)hRF\jofZphtK8ERDQGS5%A'79"NlD6SK^IiYV1qM$/A?Y[V2Rbg=Pg`4.Ul1?T!m;(?s.Cl>d[Cpkk"%o
%Y_>ph.j-03;ERc`1eSouMS.&g#iUms4q:uTP=cL;'N+rB.#g!h5`lWbR\\F@\e)^GA=PVum>0a;FZg(g.Zi<IX!kh0/0f&FE-YsV
%JqWQ<mX?/V)Uor@+>'+1Ym7JKNBVjfk2MjPI0u\@bX(93+ZmNU,)A1B<!bBW&38Q!NH4Q`W_$(X/tDC/0cC-ce>utdc73?9@AXB>
%ROiIRjWsL"%U83X1^*i4Xgs^7D[8m/DNaR+8^^:uNS1<dSI"nj@C=p`7-l0NFA0ZB<&</@o'<EHIb-IJ7fM1].3>RRF2gb-c&?-I
%!'IPZW+3H&AiD0_8C+"#_B=B^&5sr#.8+.P@Ld6a&J[Dh9Bs?aSlFI24:NbZKL<!)1rlD3W:eV",/&c;^"#TJ`/s-58)I]84'D)i
%i^pqWBKU6L9E+/HYBPkKq>HTN\*qOnL'f]2[DRUj78YqHF*(<I/STa-+nL^1Qrl>ZM?8It"@P6W<ru-TX=B-94Td5FcZ\k\&uZ*-
%)kS^^4?#^4(a\P:%(&_X=Fl4oAKp+i,H+XAZ1"RPD(WU?i!C3]Fl1R.%X++^lGg6D?\M1&CV%RDrn\"X5C8t3`[0i;1U_`8(hqk6
%VS0SSYD:fbkBp,(=C=KPGW%#G1-or2_]X9A>m%N]5=Zi6U/r@(SJ?m>+1=F9QX1In9s]]=GOb$_P0%8db0[p8K1U\VOZD%\X&HlD
%LKal$aqPn&R'4*cl7IDQD>OtpA4"KEFGrX':*=CVAK7+k)kS8D6'X/jr8Kb!5>9QT;*upGG2Au):TC&oQ7NXuASrCT7"Oe7A4P0X
%eV(G5Z,XUh930-bFcu`dKTI$G>d>SJ#FIGT0rP3C</_?[2-O&-8V:=ZL_J,+%-J0ApG]eag8pq=GTNLZDRQ$p+SDa#2g#8NfF[&>
%,E,Z\;TGK+@BU)<U@q;QOfD8ZQ76Mf\$NfrVBe]Zk^HGC7%VmN91^sYg0$l>W`LO-WG()[J;oASMJbKP"r//0Rs,&@GiXOGj:\1]
%7tB-Tcr*giPf.?_(#C2`+E?Ij'>;Q`F"/%`V3*7$9u20X*k%OHQ!b]T]"%*)&)9oeLZ5:eD`jO,;uc'EM/ce@P3Vca[D@\M##_(Y
%4bPWop,Ym+,!;Q,d^Ca+Ca*bEJN&P:%hTXm#"W[*blBV"'5/Vp^a\a==C5@Dc7-^Z&V:W,;1d+K-QQ+"l?'?l36A8o`\@Z;mX8_+
%&Z7@![C/eeffg1%=.9TA`:Glic%h!c=WI'1f8TuarlC:b0SInhS%M:Qcc--b]5`C33F?S1L&`92$fjgJ9ab3tcB^mr.`U/GJFIAV
%[*nijY,J&dX'L:'E\&$=_Kp1gl(?S1q!]5e-^'>X(Che2llaP)S$YWPoI(\e&dDYb1%:GqZ<]<Y$o\TR!(cjZ-D4j?n?:OM=G0B@
%>JFol3aql8RD%_!-0//q&uEX;+?qpY&47@&f"Qi+7$YFnC<?'RYW2r,6J"s4ejJ-jNbM.WD='3)4##TF]i!-\%ZCqT#MF720%"ep
%p]N.%_L*#;(8]10-muC:Fn)J@,O5>'rIfdK\DD:l+Ft$B+#YsKMR[YjY!E+\"4)9_D1VD5e)a_-"UC(%T/\_gL(Q(MZ^<8.q4^QS
%G,U<hii>!(VXk_X@''7QS.oMqJ4Q?UH9(`i9oAq!2r`AS!%K<"eH!OGnn;r>7+hTlJ0Q3EhuG5/>j?g$HXTNT:lg5BGLi4_h&8j#
%!;Ah09LK3t65?q@aG@p,BF]%a@@O"GPYD)ur_2OF\/'?C&ZYh5pW6+p)qY*b]D?2!Z<Rqg^ZjXFo_\SNC=mCq99QW]+C+\5PDF[-
%"qb&RE<;-9i9eOVNE$cqj#F?'6bpl(5f8iM6:BG`@6X"<4ul_27GaVfb/[L_:grnbJ1@E%;uC[ja>Xqudt^)04g!gFH5$.S7%/\3
%OKnp(p6(doHMumLg;-pGEum3Z]>-S^VBRsl:9r88b<I0.c%Ubg]h)&U3n]d,$,,!Un>a97?+^jK5r_nFn-:jb/F.KIR+aHO*fSRp
%-:?9Id=[9kg-\fR_2JRo/8r7?>T.mRN@>%8&#[oNrp8+SbBpP]B<7`\$#tNCVKb2*&.5-CNqYQ/;"ukO)R)jmH\0jp-;TX(@s25h
%&Ar.lELh?cq97G1jPSqhIV6Y>(/Y^A'L@L,MeeM+F$?SH+=$Z5Cd.f<qp$:Im0;tOkUg9'i@;1R<sIKHo]7>eHknA_3PFBX]"R'4
%ZJ@3Q"BP\l8.t;l,X?nsqC-hQ9@4lm+L`0B$BO@'^(.g$7AV^?kN,BAbS0T;o]7>MXQEPrKBs'Add7M$;VU/c(G!E]^f?`?\QMk?
%Hc;/"kVpn`7$oR*KS)e^<buomM(."Do)]^sTl8?qh:?7QDGQIKq"0D11u%RP'5U9,/7n8/9a^#4q3(@V5X&`E=@4?YejaRPQAgji
%feIhkdtk\_P?83aD`'J?_Y;eXqb-5VY+7f=!T)Ob_l;eF4rbo\%#7F#_m,fiFg"SW,&>B>E.fQar:=ka>+bC"_h)Yp:tV3l7HYh^
%daOkjVbb4I0:[cN/U>(\i&@gLmp/Q<))>-?p8,,fk<+M9/QPm7Ygi`3X&RL/*bu(EQ:-XJ?V@Wqa0k1(\:_huSj%1N[`,UHO2\J!
%2<D;cBN8kC=fZ7PoNFsnhsA0R/,&C*E\++-mCe!0m4UVge+lq4lhcdrMV*^F=ASgU*:%;\P54lEs8'e`3Yp4j8EPLb%gf-1p5QU0
%[`3,6C2<UQU:),Ga%o(?Dk)Po/u]dAIcHT3+-ekgq]ch%3WhG'AL)piFr"8O-nkpqF$qY$VI]I#OtG-I^:9koS(^3cGF?kpq7G^f
%+l!uT-P/_s#6`UUl$<oL82(J!SNt*aMUb]n%JUe84!*jSca''n8lUnQ]a+P@LjkFbH`dtm+J*OOlDR9,dKjm64pqi':,^ana]YaP
%L-Qo"`hBqG*\<+g21dtKB&h?VW&kVh2^.`1f0LSiLC>kVannfUcaULcL25R+(,;>ZiW*PdY,'c<J<BV?>qX2RKH]*eUtt=<9)G$8
%<rd&hp7!''^5?f!GTU.N<'k"J2:h?an3N_ZNji&R&$ju*9XU6U0F_1qpr*=HmmQN:<cnllN_Ha,<cfe0`bjLo.pnYp`kj\tgblqr
%TtV*+g;(QR.4Z2;*Ci=<$#65@0sWnL&P,Hr6o*QR1#2gIV3<R*=tI\d7Xnd!,5oLGqS@O*<6P@\K&Cl17qqSBats7'.H$OqAOfB^
%DR-FF0aVqd2HiAq3$Mn4.dR3Z`(>Ws-cD!jirFhtXDV?7EnI]N%Q+s<'f<tP<aVnnFE)=;ohoT>!4e<\$oOuZ?Q-Mr%2cfbJLVo7
%N^4.@h@9UtlpMs2af%#cSLeG@J$8/,TZK`*]M[2uDU7dW9T_@'>W_iN2X0ki!AuZFDa"!cG,b<*JG9BWUefkgTHQp:g0Aj/)dBqa
%mT9P2MS5JE%V<A#aVWPLn0(iHA%M*:<_q?':%s+@l].ZRa2I#_F[q3C:\igh(C4eWg!@QYLT#GN-dNf#@#\E2drT_6T?q\q'(ja5
%cQ,=Q;3dA(ceV;7hlu4Wa89uKacH6O(/6mfU<op3jl&@m;&k!]-u[BZ'PR'[d\"g`^nP[WG=LD9k=s.aK2Z4+%#++-j!L!_::JKX
%!KhA9GrKVsO9i+^N>kD9<*I9N,WQ7&CW6fO7C_F'\q/A3<:dJ7T_D]I:Rp"\c'!G):fLFRS(8$:62=.%]"u7b5m<_flN[$E@\#s@
%B\d&b<oM9#F[NN<@k";"\cK!WO.0tgk]I?7+)\Lr0P!o*d*9"EeGPrXZlp,9>V)A[FGd;,2V8bWNppc95bZDigFXACKt$P_fFX/d
%@b_A2p/Tc.c*5#@1F?)-CXA*'-iGe0)iR2OWcW1s2N[d$o@^?6kpt<E>)!JS;=lKiYX+[>([B\V_0kHl&MIQQZ4(lZ]3Y$,]RQ>]
%%CT<@<3jcM60Q*g5s[;B36J&D>\4Eq=(YVKRotB/j%AU+=bC9a8-$*BRQpqRI(!do+,UeV=Z$5J0=G'/WkeqOMUWYI%;V2r]jb"O
%3\`2F^0*<)FgHK+Ws49k]ORUO=u?j;V#sJnk!i9ffS6<)s4s/!5+ei'3`+hJ=U5j9-HV(f(dpV34]DRcOCD=D7"(Yk3D9E#50;i0
%9$OnH3^`pd%:E+L+K1r74XjTMDbF$r`TPtk^1!WX6<;8>'`uFUT@J@B%n:3P\o=$)GuY>uaOR1Z]X@$UI%RJcX6YR5?aOr;Z0>YS
%!Jqts>8,I7&gS]7lHpNcH2<*O4h't+4#"-1!=#54M]A7`O[qaUg?c]p<ClW0-@4ApZF4#60=-?r?QN!cepH!rFpXXI0:YpJV\KFr
%91sQa^JIA`^Gj,"QNio.$m=lmHMUHhI:3qr+j[XoHcrJl"b:htGHIL5<!e'`3a/H8L*T_mpJ't7;T$X3WG$c$\N"='_BrAG5D5NK
%G@=?Ak1cfZ[Us=oJ!=-sQIW42T&!a\3!;n7O1K\e3_!sYnkej?OP@-sV\D!.UEH`hFJDu4c3l6T:rJUN^is?9:T;S`X4MAS?'.qu
%:Z"-"eeibo7J_%i##mJ85@Srl>I.,NeaS"O*$&9[n&hnR4Qu,,<f:mdmE@(Cl[G$m]mu0^m)u@knEjBTg897:R(6$Gb3&qG:1ehm
%Co#UR5&uIfSio\QY#6]\qoDaoes_#Y*\BU[U:O$3H[JnUIH3\(caS4JbDl(F$.*Vm>:)=-.'\Lk/ZG:UAYog>K]l)`cN&dm(ae-S
%!XSq4PE#RZ[Y\=-T+9uT6gusWfCuc)=^Q2tf'YguBY`<>(EL.W,[V'[>3^Kfjkd4FGFR\m5dQ.KGo"m%.XB`D/N;(XnC!mFch4nY
%i+/-j4l-C*.,X3#T7o&Eh6flh+#X$ed.<RS"k0a,2Y.<62lB+Q<Uns!Jkbb%Gg!4.A:t*!<giA$E;m8T8M).O-OM>F_og[$5ac-E
%l"gZdg/@*m^9hff3r\Q+!$BNT$OUe"#*S8Y?roY%(r34E[q8$0XAB[R"Q@'/m6d&'j&s3h'W1urdK)6t<fP60XA@3=^=n^%H.+lY
%gqSo5Aa_asgtaBLJiEIm"*TpdR8TiWjBRXD0d;*n'>]ak6mB?<$gP:sVsSW*a#NKl:YU)kaRU6Y9]mL@Q6G#>G"B'F0&^R$nZLDt
%a3MEXG4L8fe"ETk/iWGj6'4lFYTb="='RX>ht]2-&IsZ^cMN^sT:rE45J:hGfgfE2A2bt*Zp]QhDo5]Y&DQp/.5GhN[;Ps4keh`&
%@qX][S:*>oR^-.$]4h!cogh52mp,+#I7^C.ZE)YHQ9d<EmcPZ9<8#IZFh?j6oTBiQgre+>\qU?OIaYPJY?IjT]_/V]LZ;YNSUH-V
%^GuMr^1_spD4(S6on'P^B0@Jj#PUo[(r2ePG3qmVOemUcgQ^8"l'>)Bf3rR,ZG((!4nR*ha>0#R;rcjk6%T*nj"r\)k@':EdiMtm
%=*;_?RRm<!]Y:P=?<:!:,G,lp<QQ0ieK4iVK-ORY'>R\cA;N\-+gem3f:rs$U'jO(Bk/G2FTB.uU2#]"JN`j4c[t?GkpIgKAL%j2
%o+E+ST+K#&(][E=FfV>*\gi0E7HcMS8>%h\r#t%,KM"WYiBri&\!#L[CFgS[9dh;/!W$[WB.X-73%.=pPluL92h:H78^>:ah^$0k
%Y8*:"#/5*`:El`h=r7Z,6J<!GLB/%OD,%&0>S,Sc'F0@G6>]]^;F"9Jkh,a9=tJ9q]Nkk\1@Z(()bs=p:ip`nNsk6j3,+A)oL@f]
%Nhp,TS>:b[X>Shlh7(^_!B-mM__P9a61@@T??@Ye;'_6i#ILUtegS7^3%YGm;).UgW$*Ql:q`Q(@*1_"B4E\2WBDH9QfKNQggeD4
%E8dIl;9a&6U'8_^8`V%H1*`N=#XG$q,(lg^Ho,6=iF\t5NYuUTnpOQ.P6.tZR?uq`'/@[nM'<:l4R28.bJgkXb5dtOd4baVoh6nK
%Y\`+c+qLH'JCpj@;'\thhT9RKEp,Wh`XU-iQ!uko]S6_cQb#uoE4gfq'0J$9]4Aq(8QoT]3jjb]f7^$V+VhZ%XP$TuA\=@IDa:*a
%&QejufXHC#="]]*<M(+m.<0,b-tiF/5-U5aBHT=+nLW:&bRT[@H'r/]i2L!0B4/[VLhZe>2jsf1X.n*C],:]MG@Cb7R4$o_(No6p
%`LPlZ%?\%b6jPeKZ.U6'-.0C^7B]nhDOL7qTkc,9[(Yl=c0o[g=]3<0l54+DO>E+VAme!+m.&aX_3:"(FoD$?UCZZrO.H6rS@ah4
%!dVN#57hg_O`8eU]"WMP>QV<,_5^P9b8G!IUKl1t(LDk4TCBIgWaS:G@<bZD7!YXA&Z%=>f?$nr2!>9B%NgrdM**L63nVuo<LFAs
%V0V?*R=O5q,FF$0)]:\!_cE.=+QI8bEq&t\GC,?NaJiQs!o79`j`2W<_gh1.gTOA4Dm#(Rp`6>4G%F,_3%==="FMAlp>=@H-uO`s
%fX2#b5b(''2GpZfd_3&qM&9IESDU]AnuQc<[#*fm.OT^\'.eN&lirq;_,-GDg9o&tGKrjNrop,c+03UEdI5fW=M!g`[111H3_V*X
%i,2<i3q4*\n=s\B@U<Q"'2T;,,t,e#2a@R'-!9Z:J[l4oAQBEoGFh\l0K;mgMP,,###/N9`%fJG.?ere;"Fl,#JM:g05q6e/Nl!e
%LGGfq$B8cT,Qjd)T6;Y<kbM+uX?*(hX(O1CMT$ro$;dM!ajNPqhFM6$G_lu9"g5WXS\YlhMbm2BQjEksN.G1g>Xi.$=>cM7SPA9Y
%&0DOZVk!`?H/c1Ca]_+$+6(-Ak4^EX*Tq?`fTo)I@BZI<M-7Bj:BrYF3HI\7j9o#'6c>!%oeXg^0S;1A_+mlG!_JM1<sq%W3_X,u
%TdA&lU3[\F_J(lhUht_)/^?sc+&]VN!$p5e%6[,XJX_4<SkR>C\HL1=N$T^7,U&(r)X28Ge.$st?mOO6/a>I\/e2M9#(ttY@niVK
%Pueat]j^h!!([-k5piuu?hkjURDZ="m.:UP-odKe6D^dHB]0)W(FI&73D1VBOdN<MW:c7@_(.!mA6La)7fA:8QWc9@dA#c4SSq>U
%(3&qMNG1'uaL1L6jCs-=Q"<nQH5s'BH34UVJ%Bpec]`A=]nS.?57),9-\-^3PHB<T?r#d[g].]IFEWm)!2L/F5c_=*26/S[.H.eh
%Sd9;^%rL2I1U[02ROFVK2k[GlbpO4kMe5/DRl>]^,Jt#%%)&o<D!dKg`\@;JPhi4qQmoPQ?u<%bKP!qk*E"/=r,e)'ScRuY(JWB:
%'O!bI6hC]W[YY$5/3`F5Rj"6A>""\e!(.ob[CH:b!/;\K"ECdLIqAA)/orm?JMB(I0ZqKoACEXJlf3QS<//1_J'Q`-hNQm:AMAF?
%[DpRa%\`:r7+e.im>J>UVpi](#K&>(`91]lYX'RCh2E4]<n5jfqihF`#;Vi2Glo/Gq_dibh\8hkdbem7n<CPlRc0Q/0<Iui@:!,c
%P[`HQI=:F:[eXj&Z@(Z+q>Q1T@(d?c&?*"J>XmqAM?1Pe#$+raWo,WB/lSj!YfYF[2pnrO'3,m4og@*5Mb[lA50MWq%%.!K3&'M:
%0t(CoVh/9g1D"QrJ1rpSIn8pk5J7Q3\%%?&jinZE`P'rlHCa!;-2PS-A=T_nl\Dh7mo56YU3kQMpoK;o7>!Xt05"u8qiabP==.>)
%/iD.A8!:&]A/Z+c@'p2t/'iWp:o<GZ?#3h9Q;)*8X"*;rH5rT)2leZgapebmc#/f0SN3Teq)=0b3\eW,%p$PI>.&^%\rO%aU/u2)
%eXg&2/?">/:TjlFICt$:Wl!EF49Vb7\J*m$amGf)i9batmjatTWpC7+?AB)82.K@F[LL9`m0PM$b91ZMD3uC]Q"A@*6\nF3$s_8,
%TMgE(3^LEU2!F@k9n\uGL>,2P,d6g^)pc8$2eB>g_>CGfkHKk\VUufW^VeSqVpuK0[R!S5S:9\HE`ij#m$[Z,a&llEpND%LESXU8
%EOD8gjW72N*Tpb@]G%WEM.,iI*LP8I5.(s'UV#Se518Z<hET9miZa`Q(QBW:aSCTt&Y,W8%paNfZ.o!mY+q9ZnbTGQk5U3.F0V\W
%&tkS.!=G`#bKR;TMmsP;ki1'lYM4!_&/iLjNBb?R\jfZLh_F_s=q,+lPuABI\]f%c$MXR\58>&rSg1gqL^Gf:W""E4LSk>&Mcbc9
%%"&pOiE+KnGLJq/0HQ9<?5K(!c=Seb-11O=oW"NYdK'$eGgij"(+fY>Hsc43`S"c?;e&LQT5WW_lOPWI%CNLG3hZPffYup5(0'H1
%ZT:(K)&Tt%cKAPPhg3!XHk[G*^@()n!eNMXjoYu[lY/suc;Is`qJ?1Z_nG\e_oIk40QJL!CaG0/].RL]K^(5Tb=N%'q0!@S2r%'8
%2dBr*f7L#sN/kkhd,'S!CpS"=V(ZI1<`!'\QMH8^l1'Ms-(b'Qb*+FV$=@%;inYbp-sqM/T9=sA]`dR=b'q1Y7\Zh-Gucae):V;?
%YE,*fe+GQ=Gln/jlPkUm2MO-f+[qQm@H\3#i;)NUcppo9?(8iKbnN=a8Z7A>+nt3N_;jdVL@pO#?e1V->:n.Bs1r7Np+I/^O`hTq
%+ANMHft%:PCnkZeHV2TD25TL+>#1ap8)MreesOX*D'Al,Gf;EY<&S%dU&0'Q0,'nsbCl5P>#4VIV/JKU$_D:Epl-O/hn.aJRrPh%
%[aXM'UhaPG%V.T%*usE^%A/t/;ifYH.(LuSO,u4<NlQF2T9f6qg6^\Dh3QqA>ta5QaBCi!C\Hk6[!Z517i0e;LEb;>2N;S>mno-1
%CAi!Vg=G0GqcXq/GLd*^qRnPt6V%"T4Ht+R^(68gZAH!n\4O.5GT&:gNbu_s'&#fk>CbIaD(BQEZ2+0/`:T0d2qn[eeDiKj^fAE$
%40WH]RW'=>=iTiLdX#0gl_98n2l3?AGaJq0c3h+S9U]"b(IF]-\OG>AUI%GD<m,3X7J24/$HJ&;]-(Majlf5;mAt>G@]AgV1'Y^t
%$t_`M-<_T!])ft=R-p@i0df4n%ITPkLUubg=Q#-1m2u[IL2TN]/+AGF`(NZ;WD3KrTZeD)%FKuOFX[HbL!43r#=5ATDX1S%[6I5U
%f^h83W+e&56'?]-e_sb`h[rrGhM1=\j!LK45lmfs(?V!EWcI0&7iZ/uLZJ]<@d^8FLo[oulp=N)GcQ;7b8PFT$gB@,2\+1A!optX
%9#EC:36eF+Q1!.!bT--K\<sYD\5iT$IPXe2l_l8GQs)pA7B,0:=]f4]2<#L)W\U\WiUp%Z*@56F]@Fg&Dh7b6a-&],2COBr/HSQ1
%9EO/sJ;CA`\HF>=^9TBm:g@O>FQO3$O=i>V#cLZj7P+\aWG>TIBrlUr+dT,S!(I1aSJ4CP=WIkrgu-,QnehE`3>2tFMXKjNaEO:U
%R8h(kfGUnE>dZB1Tbf5gPu)L\Fk]=`MS_kc.\HCOeEN/<,8_$a`\R.[B\o&jN<\:F"LbdV9)s8%?I`NI&jX<S-B7e(!ltOhJS"2V
%-%Ip$3k^S#!:MEsE6S%^2\ZA'NID!Y+bVU0V/`cLq48-uV$!J,WrX5+Ykso(bBME9`R7.>^P5`;'N[)j'eX`Bk6%oBa8tQ@P@Fe=
%)9W,,`WgmDZ7V!d>M]5RNkdSN-+o"mjYj8o.it2q,%sZXjJW=68ALskq>+C(nY6aX\Wr7[1)Xg<Q`o%D-:CosK.@^.5C[iGn)$F+
%;NU!,mh6OHP,a*8A^Q.Q\:[!baCCOV<QT3EPoM9^dArsD!^ZqO*PNA\28kPBRY3kNf`/IY^gj%s_,E]L#0,!]VAeP5q_CfelHmBD
%*YUVN'>^Y=7*B(I^((W>(([.EDb&.<5Q<Pj7R8P%d)r&IJggFoT;EpS#21Tcel$qd$mS`R/NqkNQF[\K+O+F"+dNf.'#SV)$>CE&
%jrrN-p&h/nb&S>X*f-8n5j50[\q4`f>_.,Y"1,ASIImqc<tt2jg8m$mE")c*K8Z.:;6(lD_`f?4D:Kt@AHdIT^DXUJP1Ak$[4ps$
%C(#j[;P`\rL^HDl>Y)TT%D5mVae@Rg$+[fY7iEapZ\'"Gq7l,KHeFW7ga>-6Q8QTXI\Rp)E'?r&oXQ;[jab7BW:D?O$96<<'JKPh
%#=PQ:23gEC"&TcpEJSq1n0)h4fFMI9&i(RGd5%dqi(f6:p,mRb7qA+p%Rd&E;C3m=6+j=FPOKW;e)KP/Z`RU6r=Jn=s-WiPhuD_d
%HhkQtJ,Ibk57PG9s5uWE_]Sp%TDn=EJ,SE"rp&D=_a"1[o,jV(n;mU*`V%:O2?)4V5Q'c,s89Y3ktceVqWInK:]D4D4L?1)lbEGr
%s7@E4lJMM(#`=#I~>
%AI9_PrivateDataEnd
